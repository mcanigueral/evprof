[{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"mcanigueral.github.io/evprof/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 evprof  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. evprof Copyright (C) 2020 evprof This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"data-exploratory-analysis","dir":"Articles","previous_headings":"","what":"Data exploratory analysis","title":"California case study","text":"case study based open-access data California Technological Institute (Caltech) ACN Portal initiative. can download ACN data set, collection EV charging sessions collected Caltech NASA’s Jet Propulsion Laboratory (JPL),ACN-Data website. information visit ACN documentation. data set transformed standard data format defined evprof provided together package: use case configure evprof global variables (time zone connections start time) following values:","code":"sessions <- evprof::california_ev_sessions ## # A tibble: 10,855 × 13 ##    Session    ConnectionStartDateT…¹ ConnectionEndDateTime ChargingStartDateTime ##    <chr>      <dttm>                 <dttm>                <dttm>                ##  1 5bc90cb9f… 2018-04-25 04:08:04    2018-04-25 06:20:10   2018-04-25 04:08:04   ##  2 5bc90cb9f… 2018-04-25 06:45:10    2018-04-25 17:56:16   2018-04-25 06:45:10   ##  3 5bc90cb9f… 2018-04-25 06:45:50    2018-04-25 16:04:45   2018-04-25 06:45:50   ##  4 5bc90cb9f… 2018-04-25 07:37:06    2018-04-25 16:55:34   2018-04-25 07:37:06   ##  5 5bc90cb9f… 2018-04-25 07:40:34    2018-04-25 16:03:12   2018-04-25 07:40:34   ##  6 5bc90cb9f… 2018-04-25 07:43:50    2018-04-25 18:17:30   2018-04-25 07:43:50   ##  7 5bc90cb9f… 2018-04-25 07:47:42    2018-04-25 11:27:51   2018-04-25 07:47:42   ##  8 5bc90cb9f… 2018-04-25 07:58:25    2018-04-25 12:06:29   2018-04-25 07:58:25   ##  9 5bc90cb9f… 2018-04-25 08:10:52    2018-04-25 11:15:46   2018-04-25 08:10:52   ## 10 5bc90cb9f… 2018-04-25 08:12:11    2018-04-25 11:29:21   2018-04-25 08:12:11   ## # ℹ 10,845 more rows ## # ℹ abbreviated name: ¹​ConnectionStartDateTime ## # ℹ 9 more variables: ChargingEndDateTime <dttm>, Power <dbl>, Energy <dbl>, ## #   ConnectionHours <dbl>, ChargingHours <dbl>, FlexibilityHours <dbl>, ## #   ChargingStation <chr>, UserID <chr>, Location <chr> options(   evprof.tzone = \"America/Los_Angeles\",   evprof.start.hour = 3 )"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"data-set-visualization","dir":"Articles","previous_headings":"Data exploratory analysis","what":"Data set visualization","title":"California case study","text":"ACN charging sessions open data set contains 10855 sessions, 2018-04-25 04:08:04 2021-09-13 14:21:51.","code":"plot_points(sessions, start = 3) +   aes(color = Location) +    scale_color_manual(values = c(\"jpl\" = \"red\", \"caltech\" = \"blue\", \"office\" = \"darkgreen\"), labels = c('JPL', 'Caltech', 'Offices')) +    labs(color = 'ACN data set')"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"statistic-analysis","dir":"Articles","previous_headings":"Data exploratory analysis","what":"Statistic analysis","title":"California case study","text":"average values important features charging sessions data set :","code":"summarise_sessions(sessions, mean) %>%    knitr::kable(digits = 2) plot_histogram_grid(sessions)"},{"path":[]},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"disconnection-day-division","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Disconnection day division","title":"California case study","text":"","code":"plot_points(sessions, size = 0.25) %>%    plot_division_lines(n_lines = 1, division_hour = 12) sessions_divisions <- sessions %>%    divide_by_disconnection(division_hour = 12) %>%    drop_na(Disconnection)"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"time-cycle-division","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Time-cycle division","title":"California case study","text":"Sessions distribution day week:  Sessions distribution month:","code":"plot_density_2D(sessions_divisions, bins = 20, by = 'wday') plot_density_2D(sessions_divisions, bins = 20, by = 'month') sessions_divisions <- sessions_divisions %>%    divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"divided-data-set","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Divided data set","title":"California case study","text":"3D density plot Workday sessions logarithmic scale: 3D density plot Weekend sessions logarithmic scale:","code":"sessions_divided <- sessions_divisions %>%    filter(Disconnection == \"1\") %>%   mutate(     Timecycle = plyr::mapvalues(Timecycle, c(\"1\", \"2\"), c(\"Workday\", \"Weekend\")),     Timecycle = factor(Timecycle, levels = c(\"Workday\", \"Weekend\"))   ) %>%    select(-Disconnection)  head(sessions_divided) sessions_workday <- sessions_divided %>% filter(Timecycle == \"Workday\") sessions_weekend <- sessions_divided %>% filter(Timecycle == \"Weekend\") plot_density_3D(sessions_workday, log = T) plot_density_3D(sessions_weekend, log = T)"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"parameters-selection","dir":"Articles","previous_headings":"Clustering process","what":"Parameters selection","title":"California case study","text":"generating BIC plot one 8 sub-sets, selected number clusters : Sessions workday: k = 7 Sessions weekend: k = 4 , data sub-set clustered 6 times optimal seeds sub-set resulted follows: Sessions workday: seed = 826 Sessions weekend: seed = 163","code":""},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"clustering","dir":"Articles","previous_headings":"Clustering process","what":"Clustering","title":"California case study","text":"","code":"workday_GMM <- cluster_sessions(sessions_workday, k = 7, seed = 826, log = T) weekend_GMM <- cluster_sessions(sessions_weekend, k = 4, seed = 163, log = T) bivarGMM_plots <- purrr::map2(   list(workday_GMM$sessions, weekend_GMM$sessions),   list(workday_GMM$models, weekend_GMM$models),   ~ plot_bivarGMM(     .x, .y, profiles_names = paste0(.y$cluster, \" (\", round(.y$ratio*100), \"%)\"), log = T, legend_nrow = 1   ) )"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"workday-sessions","dir":"Articles","previous_headings":"Profiling","what":"Workday sessions","title":"California case study","text":"workdays’ sessions differentiate full-time Worktime Visitors can connect morning, afternoon evening.","code":"# Define clusters workday_clusters_profiles <- define_clusters(   models = workday_GMM$models,   interpretations = c(     \"Full-day workers\",     \"Full-day workers\",     \"Evening visitors\",     \"Full-day workers\",     \"Afternoon visitors\",     \"Morning visitors\",     \"Visits around the day\"   ),   profile_names = c(     \"Worktime\",     \"Worktime\",     \"Visit\",     \"Worktime\",     \"Visit\",     \"Visit\",     \"Visit\"   ),   log = T )  workday_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"weekend-sessions","dir":"Articles","previous_headings":"Profiling","what":"Weekend sessions","title":"California case study","text":"case consider clusters belong Visitor behaviour.","code":"bivarGMM_plots[[2]] # Define clusters weekend_clusters_profiles <- define_clusters(   models = weekend_GMM$models,   interpretations = c(     \"Full-day visitors\",     \"Morning visitors\",     \"Afternoon visitors\",     \"Evening visits\"   ),   profile_names = c(     \"Visit\",     \"Visit\",     \"Visit\",     \"Visit\"   ),   log = T )  weekend_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"sessions-classification-into-user-profiles","dir":"Articles","previous_headings":"","what":"Sessions classification into user profiles","title":"California case study","text":"","code":"# Join the classification of each subset sessions_profiles <- set_profiles(   sessions_clustered = list(workday_GMM$sessions, weekend_GMM$sessions),   clusters_definition = list(workday_clusters_profiles, weekend_clusters_profiles) )  head(sessions_profiles) ## # A tibble: 6 × 14 ##   Profile  Timecycle Session ConnectionStartDateTime ConnectionEndDateTime ##   <chr>    <fct>     <chr>   <dttm>                  <dttm>                ## 1 Visit    Workday   s1      2019-01-01 17:00:51     2019-01-01 18:39:46   ## 2 Worktime Workday   s2      2019-01-02 05:39:11     2019-01-02 17:19:57   ## 3 Worktime Workday   s3      2019-01-02 05:44:27     2019-01-02 14:37:33   ## 4 Visit    Workday   s4      2019-01-02 05:47:38     2019-01-02 11:01:31   ## 5 Visit    Workday   s5      2019-01-02 05:53:41     2019-01-02 13:40:03   ## 6 Visit    Workday   s6      2019-01-02 06:01:59     2019-01-02 12:24:34   ## # ℹ 9 more variables: ChargingStartDateTime <dttm>, ChargingEndDateTime <dttm>, ## #   Power <dbl>, Energy <dbl>, ConnectionHours <dbl>, ChargingHours <dbl>, ## #   FlexibilityHours <dbl>, acn_set <chr>, Cluster <chr> classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +    facet_wrap(~ Timecycle)  classification_profiles_plot"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"workdays-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Workdays models","title":"California case study","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles)) # Plot the bivariate GMM workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c(\"profile\", \"ratio\")]) # Build the models workday_energy_models <- sessions_profiles %>%    filter(Timecycle == 'Workday') %>%    get_energy_models(     log = TRUE,     by_power = FALSE   ) # Plot the univariate GMM workday_energy_models_plots <- plot_energy_models(workday_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"weekends-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Weekends models","title":"California case study","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles)) # Plot the bivariate GMM weekend_connection_models_plot <- plot_model_clusters(list(weekend_GMM), list(weekend_clusters_profiles), weekend_connection_models[c(\"profile\", \"ratio\")]) # Build the models weekend_energy_models <- sessions_profiles %>%    filter(Timecycle == 'Weekend') %>%    get_energy_models(     log = TRUE,     by_power = FALSE   ) # Plot the univariate GMM weekend_energy_models_plots <- plot_energy_models(weekend_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"save-the-ev-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Save the EV models","title":"California case study","text":"can save object JSON file :","code":"ev_model <- get_ev_model(   names = c('Workday', 'Weekend'),    months_lst = list(1:12),    wdays_lst = list(1:5, 6:7),   connection_GMM = list(workday_connection_models, weekend_connection_models),   energy_GMM = list(workday_energy_models, weekend_energy_models),   connection_log = T,   energy_log = T )  ev_model ## EV sessions model of class \"evmodel\", created on 2023-05-18  ## Timezone of the model: America/Los_Angeles  ## The Gaussian Mixture Models of EV user profiles are built in: ##   - Connection Models: logarithmic scale ##   - Energy Models: logarithmic scale ##  ## Model composed by 2 time-cycles: ##   1. Workday: ##      Months = 1-12, Week days = 1-2 ##      User profiles = Visit, Worktime ##   2. Weekend: ##      Months = 1-12, Week days = 6-7 ##      User profiles = Visit save_ev_model(ev_model, 'california_data/california_evmodel.json')"},{"path":"mcanigueral.github.io/evprof/articles/california.html","id":"compare-bau-and-simulated-demand","dir":"Articles","previous_headings":"","what":"Compare BAU and simulated demand","title":"California case study","text":"simulate equivalent type sessions find following parameters: Charging rates distribution: can get current charging power distribution function get_charging_rates_distribution(): Number sessions per day: daily number sessions model Profiles distribution: user profiles proportion model Simulate new EV sessions function simulate_sessions() package evsim: Finally, can calculate estimated demand compare real demand:","code":"library(dygraphs) library(lubridate) library(evsim) library(dutils)  interval_mins <- 15 start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1) end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1) dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))  sessions_demand <- sessions_profiles %>%    filter(between(ConnectionStartDateTime, start_date, end_date))  demand <- sessions_demand %>%    get_demand(dttm_seq) demand %>% dyplot(fillGraph = T) charging_rates <- get_charging_rates_distribution(sessions_demand) %>%    select(power, ratio)  print(charging_rates) ## # A tibble: 2 × 2 ##   power ratio ##   <dbl> <dbl> ## 1   3.7 0.785 ## 2   7.4 0.215 n_sessions <- sessions_demand %>%    group_by(Timecycle) %>%    summarise(n = n()) %>%    mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle   select(time_cycle = Timecycle, n_sessions = n_day)  print(n_sessions) ## # A tibble: 2 × 2 ##   time_cycle n_sessions ##   <fct>           <dbl> ## 1 Workday           108 ## 2 Weekend            12 profiles_ratios <- sessions_demand %>%    group_by(Timecycle, Profile) %>%    summarise(n = n()) %>%    mutate(ratio = n/sum(n)) %>%    select(time_cycle = Timecycle, profile = Profile, ratio) %>%    ungroup()  print(profiles_ratios) ## # A tibble: 3 × 3 ##   time_cycle profile  ratio ##   <fct>      <chr>    <dbl> ## 1 Workday    Visit    0.516 ## 2 Workday    Worktime 0.484 ## 3 Weekend    Visit    1 sessions_estimated <- simulate_sessions(   evmodel = ev_model,   sessions_day = n_sessions,   user_profiles = profiles_ratios,   charging_powers = charging_rates,    dates = unique(date(dttm_seq)),    resolution = interval_mins ) ## # A tibble: 6 × 11 ##   Session Timecycle Profile ConnectionStartDateTime ConnectionEndDateTime ##   <chr>   <chr>     <chr>   <dttm>                  <dttm>                ## 1 S1      Weekend   Visit   2019-09-01 08:30:00     2019-09-01 10:16:00   ## 2 S2      Weekend   Visit   2019-09-01 08:30:00     2019-09-01 11:25:00   ## 3 S3      Weekend   Visit   2019-09-01 08:45:00     2019-09-01 11:52:00   ## 4 S4      Weekend   Visit   2019-09-01 09:00:00     2019-09-01 19:35:00   ## 5 S5      Weekend   Visit   2019-09-01 10:00:00     2019-09-01 16:17:00   ## 6 S6      Weekend   Visit   2019-09-01 10:15:00     2019-09-01 14:46:00   ## # ℹ 6 more variables: ChargingStartDateTime <dttm>, ChargingEndDateTime <dttm>, ## #   Power <dbl>, Energy <dbl>, ConnectionHours <dbl>, ChargingHours <dbl> estimated_demand <- sessions_estimated %>%    get_demand(dttm_seq)    comparison_demand <- tibble(   datetime = dttm_seq,   demand_real = rowSums(demand[-1]),   demand_estimated = rowSums(estimated_demand[-1]) ) comparison_demand %>%    dyplot(ylab = 'kW') %>%    dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%    dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Profiling EV users","text":"article shows methodology used classify EV charging sessions among generic user profiles, using R package evprof. goal analysis define generic user profiles , words, EV connection patterns relate charging sessions specific user behaviour. relevant variables data set Connection Start Time Connection Hours (duration). Based two variables evprof package aims provide tools analyze, cluster model different user profiles similar flexibility potential , farther stage, exploit flexibility specific demand response programs. workflow followed perform tutorial one : Data set visualization Statistic analysis Data division Outliers cleaning Clustering Profiling Modelling Simulation Comparison simulation real data article applies methodology proposed real EV data set mid-sized Dutch city. However, aim package evprof replicate methodology real data sets country world, like example data set EV charging sessions provided evprof (see California article). use package don’t hesitate comment results authors evprof.","code":""},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"data-set-visualization","dir":"Articles","previous_headings":"Data exploratory analysis","what":"Data set visualization","title":"Profiling EV users","text":"charging sessions data set contains 210711 sessions, 2015-08-31 2020-06-01. variables data set must evprof standard format described vignette(\"sessions-format\"). following plot represents point every charging session hour data set, based two relevant features define user profile: Connection Start Time Connection Hours (duration).  can see, visible “clouds” points plotted natural shape. cut x axis plot goes 00:00 23:59 single day, connection patterns start 6 one day morning next day. solve issue, lot evprof functions start parameter set hour EV users start connections.  parameter can defined global option since function default value start = getOption(\"evprof.start.hour\"). Another global parameter used evprof function data time zone. Since two parameters depend use case mutable, recommend define beginning analysis:","code":"knitr::kable(head(sessions, n = 10)) plot_points(sessions, size = 0.25) plot_points(sessions, start = 6, size = 0.25) options(   evprof.tzone = \"Europe/Amsterdam\",   evprof.start.hour = 6 )"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"statistic-analysis","dir":"Articles","previous_headings":"Data exploratory analysis","what":"Statistic analysis","title":"Profiling EV users","text":"average values important features charging sessions data set : Even though average values don’t give clear view sessions, general data set : Low charging power (new EV models can charge 22 kW AC), probably sessions charge 3.7 7.3 kW rates. Low energy demand (models least 40 kWh battery), probably due energy spent travel home-city. Long connections, probably night. Low charging hours due low energy demand. High flexibility due long connections low energy demand. However, goal analyzing different user profiles find groups sessions different features averages. depth overview data set sense can done distribution plot (histogram) one features: feature fits Gaussian distribution, features like ConnectionHours one peak distribution curve. shows existence combination different EV user profiles independent distributions.","code":"summarise_sessions(sessions, mean) %>% knitr::kable(digits = 2) plot_histogram_grid(sessions)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data preprocessing","title":"Profiling EV users","text":"clustering method used package evprof Gaussian Mixture Models Expectation-Maximization algorithm, wrapping functions mclust package. obtain better performance GMM clustering important divide data smaller groups clean outliers, since different density distributions result accentuated easy model.","code":""},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"divide-the-data","dir":"Articles","previous_headings":"Data preprocessing","what":"Divide the data","title":"Profiling EV users","text":"division performed two steps: Disconnection day Time-cycle behaviors","code":""},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"disconnection-day-division","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Disconnection day division","title":"Profiling EV users","text":"different data points groups stand overview plot correspond sessions disconnection day. function plot_division_lines can visualize division certain hour. set division line 3:00 , means sessions division line disconnect 3:00 day, line corresponding different day.  finding proper hour make division, function divide_by_disconnection() makes division adding extra column data set, Disconnection, number corresponding disconnection day. sessions distribution 5 disconnection days : Almost sessions disconnect day day connection since 3% sessions disconnect 2, 3 4 days connection.","code":"plot_points(sessions, size = 0.25) %>%    plot_division_lines(n_lines = 4, division_hour = 3) sessions_divisions <- sessions %>%    divide_by_disconnection(division_hour = 3)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"time-cycle-division","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Time-cycle division","title":"Profiling EV users","text":"also important consider time-cycles periods users change behaviors. function plot_density_2D lets analyze different density sessions (.e. users behavior) according different weekday, month year.   depending weekday density sessions highly diverse, months can’t see big difference. Moreover, see different distributions Monday-Thursday, Friday, Saturday Sunday, thus consider four different groups: working days (Monday - Thursday), Fridays, Saturdays, Sundays. division time-cycles sessions performed function divide_by_timecycle(), adds extra column Timecycle sessions data set number time-cycle according function parameters months_cycles wdays_cycles.","code":"plot_density_2D(sessions_divisions, by = 'wday') plot_density_2D(sessions_divisions, by = 'month') sessions_divisions <- sessions_divisions %>%    divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:4, 5, 6, 7))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"divided-data-set","dir":"Articles","previous_headings":"Data preprocessing > Divide the data","what":"Divided data set","title":"Profiling EV users","text":"two division approaches applied, data set counts two extra columns (Disconnection Timecycle) classify data point within group. columns integer values corresponding division. readable data set can change integer values character strings definition group, convert factors set specific order levels. However, Disconnection day division seen sessions disconnecting 2, 3 4 days connection represent just 3% total data set. Thus, obtaining generic user profiles sessions discarded. two Disconnection groups analyze sessions disconnect connection day, labeled City sessions, sessions disconnect day connection, named Home sessions. time, Time-cycle group name corresponding weekday: Workday, Friday, Saturday Sunday.","code":"sessions_divided <- sessions_divisions %>%    filter(Disconnection %in% c(\"1\", \"2\")) %>%   mutate(     Disconnection = plyr::mapvalues(Disconnection, c(\"1\", \"2\"), c(\"City\", \"Home\")),     Disconnection = factor(Disconnection, levels = c(\"City\", \"Home\")),     Timecycle = plyr::mapvalues(Timecycle, c(\"1\", \"2\", \"3\", \"4\"), c(\"Workday\", \"Friday\", \"Saturday\", \"Sunday\")),     Timecycle = factor(Timecycle, levels = c(\"Workday\", \"Friday\", \"Saturday\", \"Sunday\"))   )  head(sessions_divided)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"outliers-cleaning","dir":"Articles","previous_headings":"Data preprocessing","what":"Outliers cleaning","title":"Profiling EV users","text":"explained, clustering method used package evprof Gaussian Mixture Models clustering. method sensible outliers since tries explain possible variance data. results wide low-precision Gaussian distributions (clusters). Therefore evprof package provides different functions detect filter outliers. time, also recommended perform clustering process logarithmic scale, include negative values originally positive variables. logarithmic transformation can done lot functions setting log parameter TRUE. can visualize data subset:  plots see every group several points stand points. outliers can detected specifying noise threshold (percentage) function detect_outliers(). function adds logical column Outlier sessions data set showing session whether session considered outlier. classification can visualized function plot_outliers() shows outliers grey noise level (percentage) title graph. Outlier extra column can removed together outliers function drop_outliers(). Additionally, simply discard sessions certain limit axis (.e connection hours starting hour), function cut_sessions() filters sessions data set according specified minimum maximum limits corresponding axis. following plots show noise-detection process performed charging sessions data set corresponding filtering, resulting 8 different clean sub sets ready clustered.","code":"plot_points(sessions_divided, size = 0.2, log = T) + facet_wrap(vars(Timecycle, Disconnection), scales = 'free', ncol = 4)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"workday-city-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Workday city sessions","title":"Profiling EV users","text":"","code":"swc <- sessions_divided %>%    filter(Disconnection == \"City\", Timecycle == \"Workday\") %>%    cut_sessions(connection_start_min = 1.85, connection_start_max = 3.15, log=T) %>%    detect_outliers(MinPts = 100, noise_th = 2, log = T) swc %>% plot_outliers(log = T, size = 0.25) sessions_workday_city <- swc %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"workday-home-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Workday home sessions","title":"Profiling EV users","text":"","code":"swh <- sessions_divided %>%    filter(Disconnection == \"Home\", Timecycle == \"Workday\") %>%    cut_sessions(connection_hours_min = 1.5, log=T) %>%    detect_outliers(MinPts = 200, noise_th = 2, log = T) swh %>% plot_outliers(log = T, size = 0.25) sessions_workday_home <- swh %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"friday-city-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Friday city sessions","title":"Profiling EV users","text":"","code":"sfc <- sessions_divided %>%    filter(Disconnection == \"City\", Timecycle == \"Friday\") %>%    detect_outliers(MinPts = 50, noise_th = 2, log = T) sfc %>% plot_outliers(log = T, size = 0.25) sessions_friday_city <- sfc %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"friday-home-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Friday home sessions","title":"Profiling EV users","text":"","code":"sfh <- sessions_divided %>%    filter(Disconnection == \"Home\", Timecycle == \"Friday\") %>%    cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log=T) %>%    detect_outliers(MinPts = 200, noise_th = 5, log = T) sfh %>% plot_outliers(log = T, size = 0.25) sessions_friday_home <- sfh %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"saturday-city-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Saturday city sessions","title":"Profiling EV users","text":"","code":"ssac <- sessions_divided %>%    filter(Disconnection == \"City\", Timecycle == \"Saturday\") %>%    detect_outliers(MinPts = 200, noise_th = 5, log = T) ssac %>% plot_outliers(log = T, size = 0.25) sessions_saturday_city <- ssac %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"saturday-home-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Saturday home sessions","title":"Profiling EV users","text":"","code":"ssah <- sessions_divided %>%    filter(Disconnection == \"Home\", Timecycle == \"Saturday\") %>%    cut_sessions(connection_hours_min = 1.5, log=T) %>%    detect_outliers(MinPts = 50, noise_th = 6, log = T) ssah %>% plot_outliers(log = T, size = 0.25) sessions_saturday_home <- ssah %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sunday-city-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Sunday city sessions","title":"Profiling EV users","text":"","code":"ssuc <- sessions_divided %>%    filter(Disconnection == \"City\", Timecycle == \"Sunday\") %>%    cut_sessions(connection_start_min = 2.2, log = T ) %>%    detect_outliers(MinPts = 50, noise_th = 6, log = T) ssuc %>% plot_outliers(log = T, size = 0.25) sessions_sunday_city <- ssuc %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sunday-home-sessions","dir":"Articles","previous_headings":"Data preprocessing > Outliers cleaning","what":"Sunday home sessions","title":"Profiling EV users","text":"","code":"ssuh <- sessions_divided %>%    filter(Disconnection == \"Home\", Timecycle == \"Sunday\") %>%    cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.3, connection_start_max = 3.25, log = T) %>%    detect_outliers(MinPts = 200, noise_th = 5, log = T) ssuh %>% plot_outliers(log = T, size = 0.25) sessions_sunday_home <- ssuh %>%    drop_outliers()"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"clustering-process","dir":"Articles","previous_headings":"","what":"Clustering process","title":"Profiling EV users","text":"Function cluster_sessions perform classification sessions adding extra column Cluster corresponding cluster number. However, Gaussian Mixture Models need predefined number clusters k. Moreover, function also requires seed order define specific random seed able reproduce specifics clustering results.","code":""},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"parameters-selection","dir":"Articles","previous_headings":"Clustering process","what":"Parameters selection","title":"Profiling EV users","text":"Bayesan Information Criterion (BIC) common approach find optimal number clusters consider GMM clustering. BIC penalizes non-explained variability clusters found, lower BIC value better model . Function choose_k_GMM() generates BIC plot wrapped mclust package. generating BIC plot one 8 sub-sets, selected number clusters : Sessions workday city: k = 6 Sessions workday home: k = 6 Sessions Friday city: k = 6 Sessions Friday home: k = 6 Sessions Saturday city: k = 5 Sessions Saturday home: k = 5 Sessions Sunday city: k = 5 Sessions Sunday home: k = 6 , since Gaussian Mixture Modeling depends random seed operation, recommended repeat clustering process several times observe variability. different clusters obtained repetition, means still much noise variance data, different number clusters selected. Function save_clustering_iterations() repeats clustering number times specified parameter saves results PDF file. file, can choose optimal seed according BIC value. study case, data sub-set clustered 6 times optimal seeds sub-set resulted follows: Sessions Workday city: seed = 91 Sessions Workday home: seed = 643 Sessions Friday city: seed = 311 Sessions Friday home: seed = 436 Sessions Saturday city: seed = 668 Sessions Saturday home: seed = 537 Sessions Sunday city: seed = 908 Sessions Sunday home: seed = 566","code":""},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"clustering","dir":"Articles","previous_headings":"Clustering process","what":"Clustering","title":"Profiling EV users","text":"Finally, can cluster plot sub-set function cluster_sessions(), specifying parameters k seed corresponding values previously found: object returned cluster_sessions() function list two objects: sessions: data set extra column Cluster, corresponding cluster number models: tibble means co-variance matrix cluster’s Gaussian Mixture Models two objects correspond parameters sessions models function plot_bivarGMM(), plots cluster ellipse sessions’ points. Using purrr iteration can generate list plot sub-set. visualize clusters subsets Profiling section, together interpretation cluster corresponding assignation user profile.","code":"workday_city_GMM <- cluster_sessions(sessions_workday_city, k = 6, seed = 91, log = T) workday_home_GMM <- cluster_sessions(sessions_workday_home, k = 6, seed = 643, log = T) friday_city_GMM <- cluster_sessions(sessions_friday_city, k = 6, seed = 311, log = T) friday_home_GMM <- cluster_sessions(sessions_friday_home, k = 6, seed = 436, log = T) saturday_city_GMM <- cluster_sessions(sessions_saturday_city, k = 5, seed = 668, log = T) saturday_home_GMM <- cluster_sessions(sessions_saturday_home, k = 6, seed = 92, log = T) sunday_city_GMM <- cluster_sessions(sessions_sunday_city, k = 5, seed = 101, log = T) sunday_home_GMM <- cluster_sessions(sessions_sunday_home, k = 6, seed = 191, log = T) bivarGMM_plots <- purrr::map2(   list(workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,        saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions),   list(workday_city_GMM$models, workday_home_GMM$models, friday_city_GMM$models, friday_home_GMM$models,        saturday_city_GMM$models, saturday_home_GMM$models, sunday_city_GMM$models, sunday_home_GMM$models),   ~ plot_bivarGMM(     .x, .y, profiles_names = paste0(.y$cluster, \" (\", round(.y$ratio*100), \"%)\"), log = T, legend_nrow = 1   ) )"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"profiling","dir":"Articles","previous_headings":"","what":"Profiling","title":"Profiling EV users","text":"Clusters obtained GMM don’t give lot information separately may unclear meaning. section define cluster give meaning relate generic user behaviors, .e. user profiles. Moreover, every clusters must correspond single user profile, clusters similar meaning can grouped user profile. Thus, combination multiple Gaussian Mixture Models single user profile expect result daily generic behavior EV users. tool define different clusters, function define_clusters() prints average value connection start time connection duration (.e. centroid) cluster. cluster process performed logarithmic scale, values transformed natural scale better understanding. Moreover, can pass parameters interpretations profile_names list character strings corresponding interpretation centroids (e.g. “Connection work-time, leaving always next morning”) user profile name assigned interpretation (e.g. “Commuter”).","code":""},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"workday-city","dir":"Articles","previous_headings":"Profiling > Workdays","what":"Workday city","title":"Profiling EV users","text":"","code":"# Define clusters workday_city_clusters_profiles <- define_clusters(   models = workday_city_GMM$models,   interpretations = c(     \"Visits during the morning or whole day\",     \"Short visits during the day\",     \"Short visits during the evening\",     \"Full-day working time\",     \"Visits during the afternoon\",     \"Dinner time\"   ),   profile_names = c(     \"Visit\",     \"Shortstay\",     \"Shortstay\",     \"Worktime\",     \"Visit\",     \"Dinner\"   ),   log = T )  workday_city_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"workday-home","dir":"Articles","previous_headings":"Profiling > Workdays","what":"Workday home","title":"Profiling EV users","text":"","code":"# Define clusters workday_home_clusters_profiles <- define_clusters(   models = workday_home_GMM$models,   interpretations = c(     \"Connection during the night, leaving next morning\",     \"Connection after work, leaving next morning\",     \"Connection during the night, not necessarily leaving next morning\",     \"Connection during the afternoon, not necessarily leaving next morning\",     \"Connection during the afternoon, leaving next morning\",     \"Connection after work, leaving next morning\"   ),   profile_names = c(     \"Pillow\",     \"Commuters\",     \"Pillow\",     \"Home\",     \"Home\",     \"Commuters\"   ),   log = T )  workday_home_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"friday-city","dir":"Articles","previous_headings":"Profiling > Fridays","what":"Friday city","title":"Profiling EV users","text":"","code":"# Define clusters friday_city_clusters_profiles <- define_clusters(   models = friday_city_GMM$models,   interpretations = c(     \"Dinner time\",     \"Visits during the afternoon\",     \"Short visits during the evening\",     \"Short visits during the day\",     \"Full-day working time\",     \"Visits during the morning or whole day\"   ),   profile_names = c(     \"Dinner\",     \"Visit\",     \"Shortstay\",     \"Shortstay\",     \"Worktime\",     \"Visit\"   ),   log = T )  friday_city_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"friday-home","dir":"Articles","previous_headings":"Profiling > Fridays","what":"Friday home","title":"Profiling EV users","text":"Notes: Friday Home cluster leave next day narrow (concentrated) Workday Home cluster since people timetable weekends morning. Commuter profile Fridays different Workdays Commuter since -work sessions dispersed terms starting time duration. result working Friday afternoon (leave early work) leave early next morning.","code":"# Define clusters friday_home_clusters_profiles <- define_clusters(   models = friday_home_GMM$models,   interpretations = c(     \"Connection during the night, not necessarily leaving next morning\",     \"Connection during the night, leaving during next morning\",     \"Connection after work, leaving during next morning\",     \"Connection during the night, not necessarily leaving next morning\",     \"Connection during the afternoon, leaving next morning\",     \"Connection during the afternoon, not necessarily leaving next morning\"   ),   profile_names = c(     \"Pillow\",     \"Pillow\",     \"Commuters\",     \"Pillow\",     \"Home\",     \"Home\"   ),   log = T )  friday_home_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(   \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"saturday-city","dir":"Articles","previous_headings":"Profiling > Saturdays","what":"Saturday city","title":"Profiling EV users","text":"Notes: Shortstay profile minority Saturdays favour Visit profile, probably people time make longer visits rather short ones.","code":"# Define clusters saturday_city_clusters_profiles <- define_clusters(   models = saturday_city_GMM$models,   interpretations = c(     \"Short visits during the day\",     \"Visits during the day\",     \"Visits during the afternoon\",     \"Visits during the morning\",     \"Dinner time\"   ),   profile_names = c(     \"Shortstay\",     \"Visit\",     \"Visit\",     \"Visit\",     \"Dinner\"   ),   log = T )  saturday_city_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"saturday-home","dir":"Articles","previous_headings":"Profiling > Saturdays","what":"Saturday home","title":"Profiling EV users","text":"Notes: Friday Home cluster leave next day narrow (concentrated) Workday Home cluster since people timetable weekends morning. weekends user profiles variable less clear. weekends don’t commuters since don’t go work home, thus afternoon sessions belong now Home profile.","code":"# Define clusters saturday_home_clusters_profiles <- define_clusters(   models = saturday_home_GMM$models,   interpretations = c(     \"Connection during the noon, leaving next morning\",     \"Connection during the early-afternoon, leaving next morning\",     \"Connection during the night, leaving next morning\",     \"Connection during the night, not necessarily leaving next morning\",     \"Connection during the night, leaving next morning\",     \"Connection during the afternoon, not necessarily leaving next morning\"   ),   profile_names = c(     \"Commuters\",      \"Home\",      \"Pillow\",     \"Pillow\",     \"Pillow\",     \"Home\"   ),   log = T )  saturday_home_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":[]},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sunday-city","dir":"Articles","previous_headings":"Profiling > Sundays","what":"Sunday city","title":"Profiling EV users","text":"Notes: Shortstay visits less relevant Sunday since shops places make short assignments closed weekday. Dinner profile weight (20%) time-cycles (around 15%)","code":"# Define clusters sunday_city_clusters_profiles <- define_clusters(   models = sunday_city_GMM$models,   interpretations = c(     \"Visits during the morning or whole day\",     \"Visits during the morning\",     \"Visits during the day\",     \"Short visits during the day\",     \"Dinner time\"   ),   profile_names = c(     \"Visit\",     \"Visit\",     \"Visit\",     \"Shortstay\",     \"Dinner\"   ),   log = T )  sunday_city_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sunday-home","dir":"Articles","previous_headings":"Profiling > Sundays","what":"Sunday home","title":"Profiling EV users","text":"Notes: narrow afternoon Home clusters show people leaving next morning since Monday working day. weekends don’t commuters since don’t go work home.","code":"# Define clusters sunday_home_clusters_profiles <- define_clusters(   models = sunday_home_GMM$models,   interpretations = c(     \"Connection during the afternoon, not necessarily leaving next morning\",     \"Connection during the afternoon, leaving next morning\",     \"Connection during the afternoon, leaving next morning\",     \"Connection during the night, leaving next morning\",     \"Connection during the night, not necessarily leaving next morning\",     \"Connection during the afternoon, leaving next morning\"   ),   profile_names = c(     \"Home\",     \"Home\",     \"Commuters\",     \"Pillow\",     \"Pillow\",     \"Commuters\"   ),   log = T )  sunday_home_clusters_profiles %>%    knitr::kable(digits = 2, col.names = c(     \"Cluster\", \"Controid Start time\", \"Centroid Connection hours\", \"Interpretation\", \"Profile\"   ))"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sessions-classification-into-user-profiles","dir":"Articles","previous_headings":"","what":"Sessions classification into user profiles","title":"Profiling EV users","text":"assigning user profile cluster clusters definitions function define_clusters(), can use data frame function outputs clusters_definition parameter function set_profiles(). function wraps sub-sets sessions clusters definitions return total sessions data set extra Profile column, finishing function user profile classification charging sessions data set. parameter function set_profiles() needs sessions_clustered, sessions object output cluster_sessions function. visualize classification can plot charging sessions points different color every user profile, separate time-cycle.  Although user profiles names used time-cycles, can appreciate differences support approach make model time-cycle independently: Worktime sessions appear clear shape working days, weekends morning sessions variable assigned Visit user profile. Worktime sessions Friday half Worktime sessions working day. Short-stay sessions minority Weekends days since longer sessions instead, business places closed. Home profile present narrower cluster shapes next day working day (Workday Sunday time-cycles). users don’t defined timetable following day, sessions variable terms duration start time. Dinner profile importance Sundays time-cycles. conclude profiling section, summarize user profiles following classification based connections features: Worktime: connections start 8:00 9:00, duration 8-9 hours. Commuters: connections start 18:00 19:00, duration 13-14 hours (leaving 7:00-8:00 next day) Diner: connections start 18:00 19:00, duration 3-4 hours. Shortstay: connection duration 1.5 hours average. Pillow: connection start time 21:00. Visit: city sessions start day variety short long connection duration. Home: home sessions start afternoon necessarily leaving next day.","code":"# Join the classification of each subset sessions_profiles <- set_profiles(   sessions_clustered = list(     workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,     saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions   ),   clusters_definition = list(     workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,     saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles   ) )  head(sessions_profiles) ## # A tibble: 6 × 15 ##   Profile   Timecycle Session ConnectionStartDateTime ConnectionEndDateTime ##   <chr>     <fct>     <chr>   <dttm>                  <dttm>                ## 1 Shortstay Workday   86437   2015-09-02 07:35:00     2015-09-02 09:02:00   ## 2 Worktime  Workday   86444   2015-09-02 07:46:00     2015-09-02 15:39:00   ## 3 Worktime  Workday   86450   2015-09-02 08:00:00     2015-09-02 17:55:00   ## 4 Visit     Workday   86466   2015-09-02 08:38:00     2015-09-02 11:49:00   ## 5 Visit     Workday   86486   2015-09-02 08:58:00     2015-09-02 13:11:00   ## 6 Worktime  Workday   86492   2015-09-02 09:07:00     2015-09-02 17:33:00   ## # ℹ 10 more variables: ChargingStartDateTime <dttm>, ## #   ChargingEndDateTime <dttm>, Power <dbl>, Energy <dbl>, ## #   ConnectionHours <dbl>, ChargingHours <dbl>, FlexibilityHours <dbl>, ## #   ChargingStation <chr>, Disconnection <fct>, Cluster <chr> classification_profiles_plot <-    plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +    facet_wrap(vars(Timecycle)) +    guides(colour = guide_legend(override.aes = list(size=2)))  classification_profiles_plot"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"user-profiles-modeling","dir":"Articles","previous_headings":"","what":"User profiles modeling","title":"Profiling EV users","text":"seen , divided data two subsets considering time-cycles EV user profiles change behaviors. case four different time cycles: Workdays, Fridays, Saturdays Sundays. time-cycle connection models (estimate connection start time duration) energy models (estimate energy charged) every user profile. time-cycle model stored tibbles following variables: profile: Character vector profiles names. profile row tibble. profile_ratio: Numeric vector ratio percentage sessions corresponding profile time cycle, obtained function get_connection_models(). case modifying ratios, values must always 0 1. connection_models: List tibbles containing connection models profile, obtained function get_connection_models(). energy_models: List tibbles containing energy models profile, obtained function get_energy_models(). energy consumed sensitive latest models EV market, since batteries larger every new model. deal variability, make energy model profile time-cycle based data January February 2020, making use lubridate::year lubridate::month functions filter sessions. Moreover, energy models done separately according Power charging rate. purpose, Power value every session rounded three possible values charging infrastructure: 3.7 kW, 7.4 kW 11 kW. one hand, obtaining connection models (.e. bi-variate Gaussian Mixture Models weights, means co-variance matrices) function get_connection_models(), can visualize function plot_model_clusters() outputs similar ellipses plot function plot_bivarGMM() using different color user profile instead clusters (clusters profile color now). hand, energy models (.e. uni-variate Gaussian Mixture Models weights, means variance) obtained function get_energy_models() can visualized function plot_energy_models_density(). function simulates random energy values, makes density curve overlaps simulated density curve real density curve user profile’s energy values. useful appreciate modeled values fit real ones increase decrease number Gaussian components.","code":"sessions_energy_models <- sessions_profiles %>%    filter(     lubridate::year(ConnectionStartDateTime) == 2020,      lubridate::month(ConnectionStartDateTime) < 3   ) %>%    mutate(     Power = round_to_interval(Power, 3.7)   ) sessions_profiles$Power[sessions_profiles$Power == 0] <- 3.7 sessions_profiles$Power[sessions_profiles$Power > 11] <- 11"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"workdays-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Workdays models","title":"Profiling EV users","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models workday_connection_models <- get_connection_models(   list(workday_city_GMM, workday_home_GMM),   list(workday_city_clusters_profiles, workday_home_clusters_profiles) ) # Plot the bivariate GMM workday_connection_models_plot <- plot_model_clusters(   list(workday_city_GMM, workday_home_GMM),   list(workday_city_clusters_profiles, workday_home_clusters_profiles),   workday_connection_models[c(\"profile\", \"ratio\")] ) # Build the models workday_energy_models <- sessions_energy_models %>%    filter(Timecycle == 'Workday') %>%    get_energy_models(     log = TRUE,     by_power = TRUE   ) # Plot the univariate GMM workday_energy_models_plots <- plot_energy_models(workday_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"fridays-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Fridays models","title":"Profiling EV users","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models friday_connection_models <- get_connection_models(   list(friday_city_GMM, friday_home_GMM),   list(friday_city_clusters_profiles, friday_home_clusters_profiles) ) # Plot the bivariate GMM friday_connection_models_plot <- plot_model_clusters(   list(friday_city_GMM, friday_home_GMM),   list(friday_city_clusters_profiles, friday_home_clusters_profiles),   friday_connection_models[c(\"profile\", \"ratio\")] ) # Build the models friday_energy_models <- sessions_energy_models %>%    filter(Timecycle == 'Friday') %>%    get_energy_models(     log = TRUE,     by_power = TRUE   ) # Plot the univariate GMM friday_energy_models_plots <- plot_energy_models(friday_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"saturdays-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Saturdays models","title":"Profiling EV users","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models saturday_connection_models <- get_connection_models(   list(saturday_city_GMM, saturday_home_GMM),   list(saturday_city_clusters_profiles, saturday_home_clusters_profiles) ) # Plot the bivariate GMM saturday_connection_models_plot <- plot_model_clusters(   list(saturday_city_GMM, saturday_home_GMM),   list(saturday_city_clusters_profiles, saturday_home_clusters_profiles),   saturday_connection_models[c(\"profile\", \"ratio\")] ) # Build the models saturday_energy_models <- sessions_energy_models %>%    filter(Timecycle == 'Saturday') %>%    get_energy_models(     log = TRUE,     by_power = TRUE   ) # Plot the univariate GMM saturday_energy_models_plots <- plot_energy_models(saturday_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"sundays-models","dir":"Articles","previous_headings":"User profiles modeling","what":"Sundays models","title":"Profiling EV users","text":"Connection models: Bi-variate Gaussian Mixture Models  Energy models: Uni-variate Gaussian Mixture Models","code":"# Build the models sunday_connection_models <- get_connection_models(   list(sunday_city_GMM, sunday_home_GMM),   list(sunday_city_clusters_profiles, sunday_home_clusters_profiles) ) # Plot the bivariate GMM sunday_connection_models_plot <- plot_model_clusters(   list(sunday_city_GMM, sunday_home_GMM),   list(sunday_city_clusters_profiles, sunday_home_clusters_profiles),   sunday_connection_models[c(\"profile\", \"ratio\")] ) # Build the models sunday_energy_models <- sessions_energy_models %>%    filter(Timecycle == 'Sunday') %>%    get_energy_models(     log = TRUE,     by_power = TRUE   ) # Plot the univariate GMM sunday_energy_models_plots <- plot_energy_models(sunday_energy_models)"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"save-the-ev-model","dir":"Articles","previous_headings":"User profiles modeling","what":"Save the EV model","title":"Profiling EV users","text":"package evprof proposes standard format EV model function get_ev_model(). function returns object class evmodel, can used input evsim package simulate new sessions. function requires following variables: names: Character vector names time cycle months_lst: List numeric vectors, observation containing months validity time cycle wdays_lst: List numeric vectors, observation containing weekdays validity (week start = 1) time cycle connection_GMM: List connection models returned function get_connection_models() energy_GMMList connection models returned function get_energy_models() connection_log: logical TRUE since built connection models logarithmic scale energy_log: logical TRUE since built energy models logarithmic scale tzone: case sessions Europe/Amsterdam time-zone can save object JSON file :","code":"ev_model <- get_ev_model(   names = c('Workday', 'Friday', 'Saturday', 'Sunday'),    months_lst = list(1:12),    wdays_lst = list(1:4, 5, 6, 7),   connection_GMM = list(     workday_connection_models, friday_connection_models,      saturday_connection_models, sunday_connection_models   ),   energy_GMM = list(     workday_energy_models, friday_energy_models,      saturday_energy_models, sunday_energy_models   ),   connection_log = T,   energy_log = T )  ev_model ## EV sessions model of class \"evmodel\", created on 2023-05-18  ## Timezone of the model: Europe/Amsterdam  ## The Gaussian Mixture Models of EV user profiles are built in: ##   - Connection Models: logarithmic scale ##   - Energy Models: logarithmic scale ##  ## Model composed by 4 time-cycles: ##   1. Workday: ##      Months = 1-12, Week days = 1-4 ##      User profiles = Dinner, Shortstay, Visit, Worktime, Commuters, Home, Pillow ##   2. Friday: ##      Months = 1-12, Week days = 5 ##      User profiles = Dinner, Shortstay, Visit, Worktime, Commuters, Home, Pillow ##   3. Saturday: ##      Months = 1-12, Week days = 6 ##      User profiles = Dinner, Shortstay, Visit, Commuters, Home, Pillow ##   4. Sunday: ##      Months = 1-12, Week days = 7 ##      User profiles = Dinner, Shortstay, Visit, Commuters, Home, Pillow save_ev_model(ev_model, filename = \"arnhem_data/evmodel_arnhem.json\")"},{"path":"mcanigueral.github.io/evprof/articles/evprof.html","id":"compare-bau-and-simulated-demand","dir":"Articles","previous_headings":"","what":"Compare BAU and simulated demand","title":"Profiling EV users","text":"simulate new sessions models make use package {evsim}. need following data: Number sessions model User profiles proportions model Charging powers proportions compare current demand demand obtained models certain period, example two first weeks September 2019. time series demand sessions data set can also obtained evsim package, using function get_demand(). simulate equivalent type sessions find following parameters: Charging rates distribution: can get current charging power distribution function get_charging_rates_distribution(): Number sessions per day: daily number sessions model Profiles distribution: user profiles proportion model Finally, function simulate_sessions() requires dates simulated sessions interval_mins time resolution (minutes). Moreover, parameters connection_log energy_log must TRUE models built logarithmic scale. parameters hand can simulate new sessions: Finally, can calculate estimated demand compare real demand: obvious two demand curves don’t match perfectly forecasting model simulation model, without inputs predetermine particular output. can compare day times demand peaks valleys occur, positive comparison models, coincide almost perfectly real demand. Moreover, peak values general concordance real peaks.","code":"library(evsim) interval_mins <- 15 start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day') end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day') dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))  sessions_demand <- sessions_profiles %>%    filter(between(ConnectionStartDateTime, start_date, end_date))  demand <- sessions_demand %>%    get_demand(dttm_seq) demand %>% dyplot(fillGraph = T) charging_rates <- get_charging_rates_distribution(sessions_demand) %>%    select(power, ratio)  print(charging_rates) ## # A tibble: 3 × 2 ##   power ratio ##   <dbl> <dbl> ## 1   3.7 0.563 ## 2   7.4 0.239 ## 3  11   0.198 n_sessions <- sessions_demand %>%    group_by(Timecycle) %>%    summarise(n = n()) %>%    mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle   select(time_cycle = Timecycle, n_sessions = n_day)  print(n_sessions) ## # A tibble: 4 × 2 ##   time_cycle n_sessions ##   <fct>           <dbl> ## 1 Workday           262 ## 2 Friday            261 ## 3 Saturday          248 ## 4 Sunday            203 profiles_ratios <- sessions_demand %>%    group_by(Timecycle, Profile) %>%    summarise(n = n()) %>%    mutate(ratio = n/sum(n)) %>%    select(time_cycle = Timecycle, profile = Profile, ratio) %>%    ungroup()  head(profiles_ratios, 10) ## # A tibble: 10 × 3 ##    time_cycle profile    ratio ##    <fct>      <fct>      <dbl> ##  1 Workday    Shortstay 0.152  ##  2 Workday    Worktime  0.0626 ##  3 Workday    Visit     0.204  ##  4 Workday    Dinner    0.0886 ##  5 Workday    Home      0.0829 ##  6 Workday    Commuters 0.198  ##  7 Workday    Pillow    0.212  ##  8 Friday     Shortstay 0.195  ##  9 Friday     Worktime  0.0384 ## 10 Friday     Visit     0.199 set.seed(1) sessions_estimated <- evsim::simulate_sessions(   evmodel = ev_model,   sessions_day = n_sessions,   user_profiles = profiles_ratios,   charging_powers = charging_rates,    dates = unique(date(dttm_seq)),    resolution = interval_mins ) ## # A tibble: 6 × 11 ##   Session Timecycle Profile ConnectionStartDateTime ConnectionEndDateTime ##   <chr>   <chr>     <chr>   <dttm>                  <dttm>                ## 1 S1      Saturday  Visit   2020-02-01 07:30:00     2020-02-01 09:06:00   ## 2 S2      Saturday  Visit   2020-02-01 08:15:00     2020-02-01 09:48:00   ## 3 S3      Saturday  Visit   2020-02-01 08:45:00     2020-02-01 09:25:00   ## 4 S4      Saturday  Visit   2020-02-01 09:00:00     2020-02-01 15:07:00   ## 5 S5      Saturday  Visit   2020-02-01 09:15:00     2020-02-01 11:14:00   ## 6 S6      Saturday  Visit   2020-02-01 09:30:00     2020-02-01 16:32:00   ## # ℹ 6 more variables: ChargingStartDateTime <dttm>, ChargingEndDateTime <dttm>, ## #   Power <dbl>, Energy <dbl>, ConnectionHours <dbl>, ChargingHours <dbl> estimated_demand <- sessions_estimated %>%    get_demand(dttm_seq)    comparison_demand <- tibble(   datetime = dttm_seq,   demand_real = rowSums(demand[-1]),   demand_estimated = rowSums(estimated_demand[-1]) ) comparison_demand %>%    dyplot(ylab = 'kW') %>%    dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%    dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)"},{"path":"mcanigueral.github.io/evprof/articles/outliers.html","id":"cutting-sessions","dir":"Articles","previous_headings":"","what":"Cutting sessions","title":"Outliers detection","text":"see part graph consists clearly outlying points, can cut directly sessions specific limit using function cut_sessions(). function lets configure Connection Duration limits (connection_hours_min connection_hours_max) Connection Start limits (connection_start_min connection_start_max). want make division logarithmic scale important set argument log = TRUE.","code":"noisy_set <- noisy_set %>%    cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log = T) plot_points(noisy_set, size = 0.2, log = T)"},{"path":"mcanigueral.github.io/evprof/articles/outliers.html","id":"noise-cleaning-with-dbscan-clustering","dir":"Articles","previous_headings":"","what":"Noise cleaning with DBSCAN clustering","title":"Outliers detection","text":"DBSCAN (Density-based spatial clustering applications noise) clustering method widely used dividing data sets according density zones. case, method used detect outliers, .e data points outside main density zones. Package evprof proposes function detect_outliers purpose classify certain noise threshold noise. main arguments function MinPts, eps (DBSCAN parameters) noise_th (noise threshold, %). plot area sessions detected noise threshold depends highly MinPts values. recommendation compare different values MinPts noise_th corresponding plots obtained function plot_outliers. Following can find possible code iteration (using purrr::pmap function): can save plots pdf proper visualization, using cowplot::plot_grid function. plots, see higher MinPts , center-focused final clean cluster. valid approach data sets, value MinPts must defined properly every case. case, decide good compromise solution value MinPts 200 noise threshold 5%:","code":".MinPts <- c(10, 50, 100, 200) .noise_th <- c(1, 3, 5, 7) dbscan_params <- tibble(   MinPts = rep(.MinPts, each = length(.noise_th)),   noise_th = rep(.noise_th, times = length(.MinPts)) ) plots_list <- pmap(   dbscan_params,   ~ noisy_set %>%    detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%    plot_outliers(log = T, size = 0.2) +      theme(legend.position = \"none\") ) ggsave(   filename = 'my_noise_detection.pdf',    plot = cowplot::plot_grid(     plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))   ),   width = 500, height = 250, units = \"mm\" ) plots_list[[15]]"},{"path":"mcanigueral.github.io/evprof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Cañigueral. Author, maintainer, copyright holder.","code":""},{"path":"mcanigueral.github.io/evprof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cañigueral M (2023). evprof: Electric Vehicle Charging Sessions Profiling Modelling. R package version 1.0.0, https://github.com/mcanigueral/evprof/.","code":"@Manual{,   title = {evprof: Electric Vehicle Charging Sessions Profiling and Modelling},   author = {Marc Cañigueral},   year = {2023},   note = {R package version 1.0.0},   url = {https://github.com/mcanigueral/evprof/}, }"},{"path":[]},{"path":"mcanigueral.github.io/evprof/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Electric Vehicle Charging Sessions Profiling and Modelling","text":"{evprof} part suite packages analyse, model simulate charging behavior electric vehicle users: {evprof}: Electric Vehicle PROFiling {evsim}: Electric Vehicle SIMulation {evprof} aims provide tools classifying EV charging sessions generic groups similar connection patterns named “user profiles”, using Gaussian Mixture Models (GMM) clustering method. Moreover, functions build stochastic models (based GMM) every user profile also provided order simulate new EV sessions. Gaussian Mixture Models clustering technique used package aims accomplish two different tasks can useful multiple purposes: Classification EV charging sessions generic user profiles (e.g. working time, dinner, commuters, etc.), allowing : Increase knowledge different flexibility potential patterns real data set Define accurate tariffs according flexibility potential (implicit demand response scenario) Reduce uncertainty flexibility offers participating flexibility markets (explicit demand response scenario) Modeling every user profile stochastic models, allowing : Simulate high penetration EV estimate existing charging infrastructure saturated Simulate different scenarios charging rates analyse impact fast charging Size plan public charging infrastructure","code":""},{"path":"mcanigueral.github.io/evprof/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Electric Vehicle Charging Sessions Profiling and Modelling","text":"use package need data set EV charging sessions least two fundamental variables: connection start time connection duration. two variables able classify sessions different user profiles, generate EV Gaussian Models also need energy values. package also provides example open data set EV charging sessions California Technological Institute (Caltech), can downloaded ACN-Data website. information data set use , visit ACN documentation. Moreover, example evmodel object (EV Gaussian Mixture Models) built evprof functions California open data set (see California case study article) also provided. two demo data objects provided together package functions better interactive user experience. data set, best place start Get started chapter package website.","code":""},{"path":"mcanigueral.github.io/evprof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Electric Vehicle Charging Sessions Profiling and Modelling","text":"can install package CRAN development version GitHub:","code":"# CRAN stable release install.packages(\"evprof\")  # Latest development version devtools::install_github(\"mcanigueral/evprof\")"},{"path":"mcanigueral.github.io/evprof/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Electric Vehicle Charging Sessions Profiling and Modelling","text":"encounter clear bug, please open issue minimal reproducible example GitHub. questions discussion, please send mail marc.canigueral@udg.edu. technical details, can read following academic articles methodology used paper: Electric vehicle user profiles aggregated flexibility planning. IEEE PES Innovative Smart Grid Technologies Europe (ISGT Europe). IEEE, Oct. 18, 2021. DOI: 10.1109/isgteurope52324.2021.9639931. Flexibility management electric vehicles based user profiles: Arnhem case study. International Journal Electrical Power Energy Systems, vol. 133. Elsevier BV, p. 107195, Dec. 2021. DOI: 10.1016/j.ijepes.2021.107195. Potential benefits scheduling electric vehicle sessions limiting charging power. CIRED Porto Workshop 2022: E-mobility power distribution systems. Institution Engineering Technology, 2022. DOI: 10.1049/icp.2022.0744. Assessment electric vehicle charging hub based stochastic models user profiles. Expert Systems Applications (Vol. 227, p. 120318). Elsevier BV. May 2023. DOI: 10.1016/j.eswa.2023.120318","code":""},{"path":"mcanigueral.github.io/evprof/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Electric Vehicle Charging Sessions Profiling and Modelling","text":"work developed PhD program eXiT research group University Girona (Catalonia) collaboration Resourcefully, energy transition consulting company based Amsterdam, Netherlands.","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_model.html","id":null,"dir":"Reference","previous_headings":"","what":"EV model example — california_ev_model","title":"EV model example — california_ev_model","text":"Example evmodel object created {evprof} testing purposes. created using Open source data set EV charging sessions provided ACN. information development model evprof website: https://mcanigueral.github.io/evprof/articles/california.html","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EV model example — california_ev_model","text":"","code":"california_ev_model"},{"path":[]},{"path":"mcanigueral.github.io/evprof/reference/california_ev_model.html","id":"california-ev-model","dir":"Reference","previous_headings":"","what":"california_ev_model","title":"EV model example — california_ev_model","text":"evmodel object. metadata Information characteristics model model Gaussian Mixture Models connection times energy","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_model.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EV model example — california_ev_model","text":"https://mcanigueral.github.io/evprof/articles/california.html","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"EV charging sessions example — california_ev_sessions","title":"EV charging sessions example — california_ev_sessions","text":"Example charging sessions data set ready use {evprof} functions. open source data set downloaded ACN-Data website, transformed according standard names defined evprof (see article). information analysis data set evprof website: https://mcanigueral.github.io/evprof/articles/california.html","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EV charging sessions example — california_ev_sessions","text":"","code":"california_ev_sessions"},{"path":[]},{"path":"mcanigueral.github.io/evprof/reference/california_ev_sessions.html","id":"california-ev-sessions","dir":"Reference","previous_headings":"","what":"california_ev_sessions","title":"EV charging sessions example — california_ev_sessions","text":"tibble object standard variable names defined evprof","code":""},{"path":"mcanigueral.github.io/evprof/reference/california_ev_sessions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EV charging sessions example — california_ev_sessions","text":"https://ev.caltech.edu/dataset","code":""},{"path":"mcanigueral.github.io/evprof/reference/choose_k_GMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","title":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","text":"Visualize BIC indicator choose number clusters","code":""},{"path":"mcanigueral.github.io/evprof/reference/choose_k_GMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","text":"","code":"choose_k_GMM(   sessions,   k,   mclust_tol = 1e-08,   mclust_itmax = 10000,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/choose_k_GMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","text":"sessions tibble, sessions data set evprof standard format. k sequence number clusters, example 1:10, 1 10 clusters. mclust_tol tolerance parameter clustering mclust_itmax maximum number iterations log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/choose_k_GMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","text":"BIC plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/choose_k_GMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIC indicator to choose the number of clusters — choose_k_GMM","text":"","code":"choose_k_GMM(california_ev_sessions, k = 1:4, start = 3)"},{"path":"mcanigueral.github.io/evprof/reference/cluster_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster sessions with mclust package — cluster_sessions","title":"Cluster sessions with mclust package — cluster_sessions","text":"Cluster sessions mclust package","code":""},{"path":"mcanigueral.github.io/evprof/reference/cluster_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster sessions with mclust package — cluster_sessions","text":"","code":"cluster_sessions(   sessions,   k,   seed,   mclust_tol = 1e-08,   mclust_itmax = 10000,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/cluster_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster sessions with mclust package — cluster_sessions","text":"sessions tibble, sessions data set evprof standard format. k number clusters seed random seed mclust_tol tolerance parameter clustering mclust_itmax maximum number iterations log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/cluster_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster sessions with mclust package — cluster_sessions","text":"list two attributes: sessions models","code":""},{"path":"mcanigueral.github.io/evprof/reference/cluster_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster sessions with mclust package — cluster_sessions","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # The column `Cluster` has been added names(sessions_clusters) #> [1] \"sessions\" \"models\"   plot_points(sessions_clusters$sessions) +   ggplot2::aes(color = Cluster)"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert datetime value to numeric (hour-based) — convert_time_dt_to_num","title":"Convert datetime value to numeric (hour-based) — convert_time_dt_to_num","text":"Convert datetime value numeric (hour-based)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert datetime value to numeric (hour-based) — convert_time_dt_to_num","text":"","code":"convert_time_dt_to_num(time_dt)"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert datetime value to numeric (hour-based) — convert_time_dt_to_num","text":"time_dt Datetime value","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify datetime values according evprof.start.hour — convert_time_dt_to_plot_dt","title":"Modify datetime values according evprof.start.hour — convert_time_dt_to_plot_dt","text":"Modify datetime values according evprof.start.hour","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify datetime values according evprof.start.hour — convert_time_dt_to_plot_dt","text":"","code":"convert_time_dt_to_plot_dt(time_dt, start = getOption(\"evprof.start.hour\"))"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify datetime values according evprof.start.hour — convert_time_dt_to_plot_dt","text":"time_dt Datetime value start Start hour (int)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert datetime value to sorted factor considering a start time — convert_time_dt_to_plot_factor","title":"Convert datetime value to sorted factor considering a start time — convert_time_dt_to_plot_factor","text":"Convert datetime value sorted factor considering start time","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert datetime value to sorted factor considering a start time — convert_time_dt_to_plot_factor","text":"","code":"convert_time_dt_to_plot_factor(   time_dt,   interval = 0.5,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert datetime value to sorted factor considering a start time — convert_time_dt_to_plot_factor","text":"time_dt Datetime value interval Time interval time sequence. can 0.5 (30 minutes) 1 (1 hour). start Start hour (int)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert datetime values to sorted numeric values considering a start time — convert_time_dt_to_plot_num","title":"Convert datetime values to sorted numeric values considering a start time — convert_time_dt_to_plot_num","text":"Convert datetime values sorted numeric values considering start time","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert datetime values to sorted numeric values considering a start time — convert_time_dt_to_plot_num","text":"","code":"convert_time_dt_to_plot_num(time_dt, start = getOption(\"evprof.start.hour\"))"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_dt_to_plot_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert datetime values to sorted numeric values considering a start time — convert_time_dt_to_plot_num","text":"time_dt Datetime value start Start hour (int)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric time value (hour-based) to character hour in %H:%M format — convert_time_num_to_chr","title":"Convert numeric time value (hour-based) to character hour in %H:%M format — convert_time_num_to_chr","text":"Convert numeric time value (hour-based) character hour %H:%M format","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric time value (hour-based) to character hour in %H:%M format — convert_time_num_to_chr","text":"","code":"convert_time_num_to_chr(time_num)"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric time value (hour-based) to character hour in %H:%M format — convert_time_num_to_chr","text":"time_num Numeric time value (hour-based)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"Convert numeric time value datetime period (hour-based)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"","code":"convert_time_num_to_period(time_num)"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"time_num Numeric time value (hour-based)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric time value to sorted factor considering a start time — convert_time_num_to_plot_factor","title":"Convert numeric time value to sorted factor considering a start time — convert_time_num_to_plot_factor","text":"Convert numeric time value sorted factor considering start time","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric time value to sorted factor considering a start time — convert_time_num_to_plot_factor","text":"","code":"convert_time_num_to_plot_factor(   time_num,   interval = 0.5,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric time value to sorted factor considering a start time — convert_time_num_to_plot_factor","text":"time_num Numeric time value (hour-based) interval Time interval time sequence. can 0.5 (30 minutes) 1 (1 hour). start Start hour (int)","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify numeric time value according to a time sequence start time — convert_time_num_to_plot_num","title":"Modify numeric time value according to a time sequence start time — convert_time_num_to_plot_num","text":"Modify numeric time value according time sequence start time","code":""},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify numeric time value according to a time sequence start time — convert_time_num_to_plot_num","text":"","code":"convert_time_num_to_plot_num(time_num, start = getOption(\"evprof.start.hour\"))"},{"path":"mcanigueral.github.io/evprof/reference/convert_time_num_to_plot_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify numeric time value according to a time sequence start time — convert_time_num_to_plot_num","text":"time_num Numeric time value (hour-based) start Start hour (int)","code":""},{"path":"mcanigueral.github.io/evprof/reference/cut_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","title":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","text":"Cut outliers based minimum maximum limits ConnectionHours ConnectionStartDateTime variables","code":""},{"path":"mcanigueral.github.io/evprof/reference/cut_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","text":"","code":"cut_sessions(   sessions,   connection_hours_min = NA,   connection_hours_max = NA,   connection_start_min = NA,   connection_start_max = NA,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/cut_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","text":"sessions tibble, sessions data set evprof standard format. connection_hours_min numeric, minimum connection hours (duration). NA minimum value considered. connection_hours_max numeric, maximum connection hours (duration). NA maximum value considered. connection_start_min numeric, minimum hour connection start (hour numeric). NA minimum value considered. connection_start_max numeric, maximum hour connection start (hour numeric). NA maximum value considered. log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/cut_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","text":"session dataframe","code":""},{"path":"mcanigueral.github.io/evprof/reference/cut_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut outliers based on minimum and maximum limits of ConnectionHours and ConnectionStartDateTime variables — cut_sessions","text":"","code":"# Localize the outlying sessions above a certain threshold plot_points(california_ev_sessions, start = 3)   # For example sessions that start before 5 AM or that are # longer than 20 hours are considered outliers sessions_clean <- cut_sessions(   california_ev_sessions, start = 3,   connection_hours_max = 20, connection_start_min = 5, ) plot_points(sessions_clean, start = 3)"},{"path":"mcanigueral.github.io/evprof/reference/define_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define each cluster with a user profile interpretation — define_clusters","title":"Define each cluster with a user profile interpretation — define_clusters","text":"Every cluster centroid (.e. average start time duration) can related daily human behaviour connection pattern (e.g. Worktime, Dinner, etc.). function, user profile name assigned every cluster.","code":""},{"path":"mcanigueral.github.io/evprof/reference/define_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define each cluster with a user profile interpretation — define_clusters","text":"","code":"define_clusters(   models,   interpretations = NULL,   profile_names = NULL,   log = FALSE )"},{"path":"mcanigueral.github.io/evprof/reference/define_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define each cluster with a user profile interpretation — define_clusters","text":"models tibble, parameters clusters' GMM models obtained function cluster_sessions() (object models returned list) interpretations character vector interpretation sentences cluster (arranged cluster number) profile_names character vector user profile assigned cluster (arranged cluster number) log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)).","code":""},{"path":"mcanigueral.github.io/evprof/reference/define_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define each cluster with a user profile interpretation — define_clusters","text":"tibble object","code":""},{"path":"mcanigueral.github.io/evprof/reference/define_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define each cluster with a user profile interpretation — define_clusters","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE ) #> # A tibble: 2 × 5 #>   cluster mean_start_time mean_conn_time interpretations                 profile #>   <chr>   <chr>                    <dbl> <chr>                           <chr>   #> 1 1       07:54                     9.07 Connections during working hou… Workers #> 2 2       11:34                     3.14 Connections during all day (hi… Visito…"},{"path":"mcanigueral.github.io/evprof/reference/detect_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect outliers — detect_outliers","title":"Detect outliers — detect_outliers","text":"Detect outliers","code":""},{"path":"mcanigueral.github.io/evprof/reference/detect_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect outliers — detect_outliers","text":"","code":"detect_outliers(   sessions,   MinPts = NULL,   eps = NULL,   noise_th = 2,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/detect_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect outliers — detect_outliers","text":"sessions tibble, sessions data set evprof standard format. MinPts MinPts parameter DBSCAN clustering eps eps parameter DBSCAN clustering noise_th noise threshold log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/detect_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect outliers — detect_outliers","text":"sessions tibble extra boolean column Outlier","code":""},{"path":"mcanigueral.github.io/evprof/reference/detect_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect outliers — detect_outliers","text":"","code":"sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5, log = TRUE) #> Trying with MinPts = 200 and eps = 0.1 #> Too much nosie (49.07 %). Consider a higher eps. #> Trying with MinPts = 200 and eps = 0.15 #> Too much nosie (21.49 %). Consider a higher eps. #> Trying with MinPts = 200 and eps = 0.225 #> Too much nosie (8.96 %). Consider a higher eps. #> Trying with MinPts = 200 and eps = 0.3375 #> Solution found: MinPts= 200 , eps = 0.3015"},{"path":"mcanigueral.github.io/evprof/reference/divide_by_disconnection.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide sessions by disconnection day — divide_by_disconnection","title":"Divide sessions by disconnection day — divide_by_disconnection","text":"Divide sessions disconnection day","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_disconnection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide sessions by disconnection day — divide_by_disconnection","text":"","code":"divide_by_disconnection(   sessions,   division_hour,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/divide_by_disconnection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide sessions by disconnection day — divide_by_disconnection","text":"sessions tibble, sessions data set evprof standard format. division_hour Hour divide groups according disconnection time start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_disconnection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide sessions by disconnection day — divide_by_disconnection","text":"sessions data set extra column \"Disconnection\"","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_disconnection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide sessions by disconnection day — divide_by_disconnection","text":"","code":"sessions_disconnection <- divide_by_disconnection(   california_ev_sessions, division_hour = 10 )  # The column `Disconnection` has been added names(sessions_disconnection) #>  [1] \"Session\"                 \"ConnectionStartDateTime\" #>  [3] \"ConnectionEndDateTime\"   \"ChargingStartDateTime\"   #>  [5] \"ChargingEndDateTime\"     \"Power\"                   #>  [7] \"Energy\"                  \"ConnectionHours\"         #>  [9] \"ChargingHours\"           \"FlexibilityHours\"        #> [11] \"ChargingStation\"         \"UserID\"                  #> [13] \"Location\"                \"Disconnection\"            library(ggplot2) plot_points(sessions_disconnection) +   facet_wrap(vars(Disconnection))"},{"path":"mcanigueral.github.io/evprof/reference/divide_by_timecycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide sessions by time-cycle — divide_by_timecycle","title":"Divide sessions by time-cycle — divide_by_timecycle","text":"Divide sessions time-cycle","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_timecycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide sessions by time-cycle — divide_by_timecycle","text":"","code":"divide_by_timecycle(   sessions,   months_cycles = list(1:12),   wdays_cycles = list(1:5, 6:7),   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/divide_by_timecycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide sessions by time-cycle — divide_by_timecycle","text":"sessions tibble, sessions data set evprof standard format. months_cycles list containing Monthly cycles wdays_cycles list containing Weekdays cycles start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_timecycle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide sessions by time-cycle — divide_by_timecycle","text":"sessions data set extra column \"Timecycle\"","code":""},{"path":"mcanigueral.github.io/evprof/reference/divide_by_timecycle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide sessions by time-cycle — divide_by_timecycle","text":"","code":"sessions_timecycles <- divide_by_timecycle(   california_ev_sessions,   months_cycles = list(1:12),   wdays_cycles = list(1:5, 6:7) ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   |  # The column `Timecycle` has been added names(sessions_timecycles) #>  [1] \"Session\"                 \"ConnectionStartDateTime\" #>  [3] \"ConnectionEndDateTime\"   \"ChargingStartDateTime\"   #>  [5] \"ChargingEndDateTime\"     \"Power\"                   #>  [7] \"Energy\"                  \"ConnectionHours\"         #>  [9] \"ChargingHours\"           \"FlexibilityHours\"        #> [11] \"ChargingStation\"         \"UserID\"                  #> [13] \"Location\"                \"Timecycle\"                library(ggplot2) plot_points(sessions_timecycles) +   facet_wrap(vars(Timecycle))"},{"path":"mcanigueral.github.io/evprof/reference/dot-print_energy_models_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LaTeX code for the energy GMM features (mu and sigma) — .print_energy_models_table","title":"Get LaTeX code for the energy GMM features (mu and sigma) — .print_energy_models_table","text":"Get LaTeX code energy GMM features (mu sigma)","code":""},{"path":"mcanigueral.github.io/evprof/reference/dot-print_energy_models_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LaTeX code for the energy GMM features (mu and sigma) — .print_energy_models_table","text":"","code":".print_energy_models_table(GMM, label, caption, full_width, path = NULL)"},{"path":"mcanigueral.github.io/evprof/reference/dot-print_energy_models_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LaTeX code for the energy GMM features (mu and sigma) — .print_energy_models_table","text":"GMM Gaussian Mixture Models obtained function get_energy_models label character, e.g. \"tab:gmm\" caption character, table caption full_width logical, true \"*\" added next \"table\" tag path character, file path write latex table . must \".tex\" extension. NULL, character string returned instead writing file.","code":""},{"path":"mcanigueral.github.io/evprof/reference/dot-print_energy_models_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LaTeX code for the energy GMM features (mu and sigma) — .print_energy_models_table","text":"character, LaTeX code","code":""},{"path":"mcanigueral.github.io/evprof/reference/drop_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop outliers — drop_outliers","title":"Drop outliers — drop_outliers","text":"Drop outliers","code":""},{"path":"mcanigueral.github.io/evprof/reference/drop_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop outliers — drop_outliers","text":"","code":"drop_outliers(sessions)"},{"path":"mcanigueral.github.io/evprof/reference/drop_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop outliers — drop_outliers","text":"sessions tibble, sessions data set evprof standard format.","code":""},{"path":"mcanigueral.github.io/evprof/reference/drop_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop outliers — drop_outliers","text":"sessions without outliers column Outlier","code":""},{"path":"mcanigueral.github.io/evprof/reference/drop_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop outliers — drop_outliers","text":"","code":"sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5) #> Trying with MinPts = 200 and eps = 1.5 #> Too much nosie (5.83 %). Consider a higher eps. #> Trying with MinPts = 200 and eps = 2.25 #> Solution found: MinPts= 200 , eps = 1.65 plot_outliers(sessions_outliers)  sessions_clean <- drop_outliers(sessions_outliers) plot_points(sessions_clean)"},{"path":"mcanigueral.github.io/evprof/reference/get_charging_rates_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Get charging rates distribution in percentages — get_charging_rates_distribution","title":"Get charging rates distribution in percentages — get_charging_rates_distribution","text":"Get charging rates distribution percentages","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_charging_rates_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get charging rates distribution in percentages — get_charging_rates_distribution","text":"","code":"get_charging_rates_distribution(sessions, unit = \"year\")"},{"path":"mcanigueral.github.io/evprof/reference/get_charging_rates_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get charging rates distribution in percentages — get_charging_rates_distribution","text":"sessions tibble, sessions data set evprof standard format. unit character, lubridate floor_date unit parameter","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_charging_rates_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get charging rates distribution in percentages — get_charging_rates_distribution","text":"tibble","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_charging_rates_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get charging rates distribution in percentages — get_charging_rates_distribution","text":"","code":"get_charging_rates_distribution(california_ev_sessions, unit=\"month\") #> # A tibble: 74 × 4 #>    datetime            power     n     ratio #>    <dttm>              <dbl> <int>     <dbl> #>  1 2018-04-01 00:00:00   3.7   205 0.0189    #>  2 2018-04-01 00:00:00   7.4    59 0.00544   #>  3 2018-05-01 00:00:00   3.7  1471 0.136     #>  4 2018-05-01 00:00:00   7.4   272 0.0251    #>  5 2018-05-01 00:00:00  11       1 0.0000921 #>  6 2018-06-01 00:00:00   3.7  1512 0.139     #>  7 2018-06-01 00:00:00   7.4   309 0.0285    #>  8 2018-07-01 00:00:00   3.7   972 0.0895    #>  9 2018-07-01 00:00:00   7.4   318 0.0293    #> 10 2018-10-01 00:00:00   3.7  1021 0.0941    #> # ℹ 64 more rows get_charging_rates_distribution(california_ev_sessions, unit=\"month\") #> # A tibble: 74 × 4 #>    datetime            power     n     ratio #>    <dttm>              <dbl> <int>     <dbl> #>  1 2018-04-01 00:00:00   3.7   205 0.0189    #>  2 2018-04-01 00:00:00   7.4    59 0.00544   #>  3 2018-05-01 00:00:00   3.7  1471 0.136     #>  4 2018-05-01 00:00:00   7.4   272 0.0251    #>  5 2018-05-01 00:00:00  11       1 0.0000921 #>  6 2018-06-01 00:00:00   3.7  1512 0.139     #>  7 2018-06-01 00:00:00   7.4   309 0.0285    #>  8 2018-07-01 00:00:00   3.7   972 0.0895    #>  9 2018-07-01 00:00:00   7.4   318 0.0293    #> 10 2018-10-01 00:00:00   3.7  1021 0.0941    #> # ℹ 64 more rows"},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_mclust_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform mclust::Mclust clustering for multivariate GMM — get_connection_model_mclust_object","title":"Perform mclust::Mclust clustering for multivariate GMM — get_connection_model_mclust_object","text":"Perform mclust::Mclust clustering multivariate GMM","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_mclust_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform mclust::Mclust clustering for multivariate GMM — get_connection_model_mclust_object","text":"","code":"get_connection_model_mclust_object(   sessions,   k,   mclust_tol = 1e-08,   mclust_itmax = 10000,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_mclust_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform mclust::Mclust clustering for multivariate GMM — get_connection_model_mclust_object","text":"sessions tibble, sessions data set evprof standard format. k number clusters mclust_tol tolerance parameter clustering mclust_itmax maximum number iterations log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_mclust_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform mclust::Mclust clustering for multivariate GMM — get_connection_model_mclust_object","text":"mclust object","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract models parameters from mclust object — get_connection_model_params","title":"Extract models parameters from mclust object — get_connection_model_params","text":"Extract models parameters mclust object","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract models parameters from mclust object — get_connection_model_params","text":"","code":"get_connection_model_params(mclust_obj)"},{"path":"mcanigueral.github.io/evprof/reference/get_connection_model_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract models parameters from mclust object — get_connection_model_params","text":"mclust_obj mclust::Mclust object","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tibble of connection GMM for every user profile — get_connection_models","title":"Get a tibble of connection GMM for every user profile — get_connection_models","text":"Get tibble connection GMM every user profile","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tibble of connection GMM for every user profile — get_connection_models","text":"","code":"get_connection_models(   subsets_clustering = list(),   clusters_definition = list() )"},{"path":"mcanigueral.github.io/evprof/reference/get_connection_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a tibble of connection GMM for every user profile — get_connection_models","text":"subsets_clustering list clustering results subset (direct output function cluser_sessions()) clusters_definition list tibbles clusters definitions (direct output function define_clusters()) sub-set","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tibble of connection GMM for every user profile — get_connection_models","text":"tibble","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_connection_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a tibble of connection GMM for every user profile — get_connection_models","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Create a table with the connection GMM parameters get_connection_models(   subsets_clustering = list(sessions_clusters),   clusters_definition = list(clusters_definitions) ) #> # A tibble: 2 × 3 #>   profile  ratio connection_models #>   <chr>    <dbl> <list>            #> 1 Visitors 0.558 <tibble [1 × 3]>  #> 2 Workers  0.442 <tibble [1 × 3]>"},{"path":"mcanigueral.github.io/evprof/reference/get_daily_avg_n_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","title":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","text":"Get daily average number sessions given range years, months weekdays","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_avg_n_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","text":"","code":"get_daily_avg_n_sessions(sessions, years, months, wdays)"},{"path":"mcanigueral.github.io/evprof/reference/get_daily_avg_n_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","text":"sessions tibble, sessions data set evprof standard format. years vector integers, range years consider months vector integers, range months consider wdays vector integers, range weekdays consider","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_avg_n_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","text":"tibble number sessions date given time period","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_avg_n_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the daily average number of sessions given a range of years, months and weekdays — get_daily_avg_n_sessions","text":"","code":"get_daily_avg_n_sessions(   california_ev_sessions,   year = 2018, months = c(5, 6), wdays = 1 ) #> [1] 60"},{"path":"mcanigueral.github.io/evprof/reference/get_daily_n_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","title":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","text":"Get daily number sessions given range years, months weekdays","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_n_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","text":"","code":"get_daily_n_sessions(sessions, years, months, wdays)"},{"path":"mcanigueral.github.io/evprof/reference/get_daily_n_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","text":"sessions tibble, sessions data set evprof standard format. years vector integers, range years consider months vector integers, range months consider wdays vector integers, range weekdays consider","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_n_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","text":"tibble number sessions date given time period","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_daily_n_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get daily number of sessions given a range of years, months and weekdays — get_daily_n_sessions","text":"","code":"get_daily_n_sessions(   california_ev_sessions,   year = 2018, months = c(5, 6), wdays = 1 ) #> # A tibble: 8 × 2 #>   date       n_sessions #>   <date>          <int> #> 1 2018-05-07         56 #> 2 2018-05-14         66 #> 3 2018-05-21         65 #> 4 2018-05-28         19 #> 5 2018-06-04         63 #> 6 2018-06-11         78 #> 7 2018-06-18         65 #> 8 2018-06-25         71"},{"path":"mcanigueral.github.io/evprof/reference/get_dbscan_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the minPts and eps values for DBSCAN to label only a specific percentage as noise — get_dbscan_params","title":"Get the minPts and eps values for DBSCAN to label only a specific percentage as noise — get_dbscan_params","text":"Get minPts eps values DBSCAN label specific percentage noise","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_dbscan_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the minPts and eps values for DBSCAN to label only a specific percentage as noise — get_dbscan_params","text":"","code":"get_dbscan_params(   sessions,   MinPts,   eps0,   noise_th = 2,   eps_offset_pct = 0.9,   eps_inc_pct = 0.02,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/get_dbscan_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the minPts and eps values for DBSCAN to label only a specific percentage as noise — get_dbscan_params","text":"sessions tibble, sessions data set evprof standard format. MinPts DBSCAN MinPts parameter eps0 DBSCAN eps parameter corresponding elbow kNN dist plot noise_th noise threshold eps_offset_pct eps_offset_pct eps_inc_pct eps_inc_pct log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_dbscan_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the minPts and eps values for DBSCAN to label only a specific percentage as noise — get_dbscan_params","text":"tibble minPts eps parameters, corresponding noise","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_division_line.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 type function to plot a division line — get_division_line","title":"ggplot2 type function to plot a division line — get_division_line","text":"ggplot2 type function plot division line","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_division_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 type function to plot a division line — get_division_line","text":"","code":"get_division_line(day_n, division_hour)"},{"path":"mcanigueral.github.io/evprof/reference/get_division_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 type function to plot a division line — get_division_line","text":"day_n Number day line division_hour Hour divide groups according disconnection time","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_division_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 type function to plot a division line — get_division_line","text":"ggplot2 function","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_mclust_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Mclust object of univariate Gaussian Mixture Models — get_energy_model_mclust_object","title":"Get Mclust object of univariate Gaussian Mixture Models — get_energy_model_mclust_object","text":"Get Mclust object univariate Gaussian Mixture Models","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_mclust_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Mclust object of univariate Gaussian Mixture Models — get_energy_model_mclust_object","text":"","code":"get_energy_model_mclust_object(energy_vct, log = TRUE)"},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_mclust_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Mclust object of univariate Gaussian Mixture Models — get_energy_model_mclust_object","text":"energy_vct numeric vector, energy sessions log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)).","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_mclust_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Mclust object of univariate Gaussian Mixture Models — get_energy_model_mclust_object","text":"object class dnstyMcl","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy univariate Gaussian Mixture Model — get_energy_model_parameters","title":"Get energy univariate Gaussian Mixture Model — get_energy_model_parameters","text":"Get energy univariate Gaussian Mixture Model","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy univariate Gaussian Mixture Model — get_energy_model_parameters","text":"","code":"get_energy_model_parameters(mclust_obj)"},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy univariate Gaussian Mixture Model — get_energy_model_parameters","text":"mclust_obj object class dnstyMcl function get_energy_model_mclust_object","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_model_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy univariate Gaussian Mixture Model — get_energy_model_parameters","text":"tibble","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tibble of energy GMM for every user profile — get_energy_models","title":"Get a tibble of energy GMM for every user profile — get_energy_models","text":"Get tibble energy GMM every user profile","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tibble of energy GMM for every user profile — get_energy_models","text":"","code":"get_energy_models(sessions_profiles, log = TRUE, by_power = FALSE)"},{"path":"mcanigueral.github.io/evprof/reference/get_energy_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a tibble of energy GMM for every user profile — get_energy_models","text":"sessions_profiles tibble, sessions data set evprof standard format user profile attribute Profile log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). by_power Logical, true fit energy models every charging rate separately","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tibble of energy GMM for every user profile — get_energy_models","text":"tibble","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_energy_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a tibble of energy GMM for every user profile — get_energy_models","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Classify each session to the corresponding user profile sessions_profiles <- set_profiles(   sessions_clustered = list(sessions_clusters$sessions),   clusters_definition = list(clusters_definitions) )  # Create a table with the energy GMM parameters get_energy_models(sessions_profiles, log = TRUE) #> # A tibble: 2 × 2 #>   profile  energy_models    #>   <chr>    <list>           #> 1 Visitors <tibble [1 × 3]> #> 2 Workers  <tibble [1 × 3]>  # If there is a `Power` variable in the data set # you can create an energy model per power rate and user profile # First it is convenient to round the `Power` values for more generic models sessions_profiles <- sessions_profiles %>%   mutate(Power = round_to_interval(Power, 3.7)) %>%   filter(Power < 11) sessions_profiles$Power[sessions_profiles$Power == 0] <- 3.7 get_energy_models(sessions_profiles, log = TRUE, by_power = TRUE) #> # A tibble: 2 × 2 #>   profile  energy_models    #>   <chr>    <list>           #> 1 Visitors <tibble [2 × 3]> #> 2 Workers  <tibble [2 × 3]>"},{"path":"mcanigueral.github.io/evprof/reference/get_ev_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the EV model object of class evmodel — get_ev_model","title":"Get the EV model object of class evmodel — get_ev_model","text":"Get EV model object class evmodel","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_ev_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the EV model object of class evmodel — get_ev_model","text":"","code":"get_ev_model(   names,   months_lst = list(1:12, 1:12),   wdays_lst = list(1:5, 6:7),   connection_GMM,   energy_GMM,   connection_log,   energy_log,   data_tz = getOption(\"evprof.tzone\", \"Europe/Amsterdam\") )"},{"path":"mcanigueral.github.io/evprof/reference/get_ev_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the EV model object of class evmodel — get_ev_model","text":"names character vector given names time-cycle model months_lst list integer vectors corresponding months year time-cycle model wdays_lst list integer vectors corresponding days week model (week start = 1) connection_GMM list different connection bivariate GMM obtained get_connection_models energy_GMM list different energy univariate GMM obtained get_energy_models connection_log logical, true connection models logarithmic transformations energy_log logical, true energy models logarithmic transformations data_tz character, time zone original data (necessary properly simulate new sessions)","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_ev_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the EV model object of class evmodel — get_ev_model","text":"object class evmodel","code":""},{"path":"mcanigueral.github.io/evprof/reference/get_ev_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the EV model object of class evmodel — get_ev_model","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Get connection GMM parameters connection_models <- get_connection_models(   subsets_clustering = list(sessions_clusters),   clusters_definition = list(clusters_definitions) )  # Classify each session to the corresponding user profile sessions_profiles <- set_profiles(   sessions_clustered = list(sessions_clusters$sessions),   clusters_definition = list(clusters_definitions) )  # Get energy GMM parameters energy_models <- get_energy_models(sessions_profiles, log = TRUE)  # Get the whole model ev_model <- get_ev_model(   names = c(\"Working days\"),   months_lst = list(1:12),   wdays_lst = list(1:5),   connection_GMM = list(connection_models),   energy_GMM = list(energy_models),   connection_log = TRUE,   energy_log = TRUE,   data_tz = \"America/Los_Angeles\" )"},{"path":"mcanigueral.github.io/evprof/reference/mutate_to_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithmic transformation to ConnectionStartDateTime and ConnectionHours variables — mutate_to_log","title":"Logarithmic transformation to ConnectionStartDateTime and ConnectionHours variables — mutate_to_log","text":"Logarithmic transformation ConnectionStartDateTime ConnectionHours variables","code":""},{"path":"mcanigueral.github.io/evprof/reference/mutate_to_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithmic transformation to ConnectionStartDateTime and ConnectionHours variables — mutate_to_log","text":"","code":"mutate_to_log(sessions, base = exp(1))"},{"path":"mcanigueral.github.io/evprof/reference/mutate_to_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logarithmic transformation to ConnectionStartDateTime and ConnectionHours variables — mutate_to_log","text":"sessions sessions data set standard format. base logarithmic base","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_bivarGMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","title":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","text":"Plot Bivariate Gaussian Mixture Models","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_bivarGMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","text":"","code":"plot_bivarGMM(   sessions,   models,   profiles_names = seq(1, nrow(models)),   points_size = 0.25,   lines_size = 1,   legend_nrow = 2,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/plot_bivarGMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","text":"sessions tibble, sessions data set evprof standard format. models tibble, parameters clusters' GMM models obtained function cluster_sessions (object models returned list) profiles_names names profiles points_size size scatter points plot lines_size size lines plot legend_nrow number rows legend log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_bivarGMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","text":"ggplot2 plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_bivarGMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Bivariate Gaussian Mixture Models — plot_bivarGMM","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )"},{"path":"mcanigueral.github.io/evprof/reference/plot_density_2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","title":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","text":"Density plot 2D, considering Start time Connection duration variables","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","text":"","code":"plot_density_2D(   sessions,   bins = 15,   by = c(\"wday\", \"month\", \"year\"),   start = getOption(\"evprof.start.hour\"),   log = FALSE )"},{"path":"mcanigueral.github.io/evprof/reference/plot_density_2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","text":"sessions tibble, sessions data set evprof standard format. bins integer, parameter pass ggplot2::stat_density_2d variable facet plot. Character \"wday\", \"month\" \"year\", considering week start wday=1. start integer, start hour x axis plot. used log = FALSE. log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)).","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","text":"ggplot2 plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot in 2D, considering Start time and Connection duration as variables — plot_density_2D","text":"","code":"plot_density_2D(california_ev_sessions, by = \"wday\", start = 3, bins = 20)  plot_density_2D(california_ev_sessions, by = \"month\", start = 2, log = TRUE)"},{"path":"mcanigueral.github.io/evprof/reference/plot_density_3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","title":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","text":"Density plot 3D, considering Start time Connection duration variables","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","text":"","code":"plot_density_3D(   sessions,   start = getOption(\"evprof.start.hour\"),   eye = list(x = -1.5, y = -1.5, z = 1.5),   log = FALSE )"},{"path":"mcanigueral.github.io/evprof/reference/plot_density_3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","text":"sessions tibble, sessions data set evprof standard format. start integer, start hour x axis plot. used log = FALSE. eye list containing x, y z points view. Example: list(x = -1.5, y = -1.5, z = 1.5) log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)).","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","text":"plotly plot (html)","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_density_3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot in 3D, considering Start time and Connection duration as variables — plot_density_3D","text":"","code":"plot_density_3D(california_ev_sessions, start = 3)  {\"x\":{\"visdat\":{\"b3ed7202b0f7\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"b3ed7202b0f7\",\"attrs\":{\"b3ed7202b0f7\":{\"x\":[3.00583333333333,3.99429398148148,4.98275462962963,5.97121527777778,6.95967592592593,7.94813657407407,8.93659722222222,9.92505787037037,10.9135185185185,11.9019791666667,12.8904398148148,13.878900462963,14.8673611111111,15.8558217592593,16.8442824074074,17.8327430555556,18.8212037037037,19.8096643518519,20.798125,21.7865856481481,22.7750462962963,23.7635069444444,24.7519675925926,25.7404282407407,26.7288888888889],\"y\":[0.0875,1.07291666666667,2.05833333333333,3.04375,4.02916666666667,5.01458333333333,6,6.98541666666667,7.97083333333333,8.95625,9.94166666666667,10.9270833333333,11.9125,12.8979166666667,13.8833333333333,14.86875,15.8541666666667,16.8395833333333,17.825,18.8104166666667,19.7958333333333,20.78125,21.7666666666667,22.7520833333333,23.7375],\"z\":[[1.15190932773926e-05,0.000136392793323507,0.000482138341554033,0.000810642534839878,0.000958987126866483,0.00116134929730252,0.00128313596913997,0.00124726718874486,0.00138209529317705,0.00163844179253462,0.00166224976522482,0.00177453114087578,0.00234498065952239,0.00310864759703292,0.00327155231789656,0.0030535285274431,0.00277515903989218,0.0021689362271797,0.00174291528674223,0.00160559529746105,0.00119993318237257,0.000605390896439951,0.000222277639646922,6.11249668913899e-05,1.03709366281915e-05],[3.28285440878976e-05,0.000296239065145386,0.000910387602207051,0.00187924196467409,0.00250405579585431,0.00304862175107626,0.00359947017046038,0.00379230531964137,0.00380478189594421,0.00376948443116448,0.00383278190308778,0.00452097047449877,0.00595371438650299,0.00767865560030746,0.0071463963200235,0.00596757871530544,0.00551912060929729,0.00445952677259746,0.00307650105239633,0.00196801963424828,0.00134941877822558,0.000718829490451515,0.000324428415425886,0.000137193931133621,4.52031868298535e-05],[7.50008753390465e-05,0.000272803543536719,0.000573750999398569,0.00122509721946285,0.00247693310257927,0.00424637268899441,0.00590112890567151,0.00567954577013104,0.00425880483005145,0.00400126367938268,0.00523162864309668,0.0063566814937421,0.00788554638476452,0.00918618068038286,0.00751228969292469,0.00654372992214393,0.00700313433307259,0.00507244200847808,0.00276587716060653,0.00149074636863411,0.000874270596416465,0.00049899256937784,0.000244306799655477,9.93724604880866e-05,4.50782019874115e-05],[0.000147141951320835,0.000229805094383197,0.000287730259053147,0.000834353082200548,0.00294554176372575,0.00665772384658323,0.00777582233998847,0.00547147103279242,0.004054921668671,0.00547527571684127,0.00767391712105939,0.00794738236971248,0.00716709989112225,0.00626326964273894,0.0051431274353358,0.00493561579557649,0.00493021444439305,0.00322573515622189,0.00154958955198188,0.000952234745270948,0.000558586907414165,0.000284465774288956,0.000182952085334326,8.96923470955462e-05,5.67868031455573e-05],[5.17162644274084e-05,0.000156622044878412,0.000460571218428109,0.00214401112251916,0.00634437885872997,0.0104514630392668,0.00873988567440413,0.00500803798654336,0.00442177389493971,0.00748632991612864,0.00948670328932067,0.00764301196605601,0.00495501023199195,0.00367495054044867,0.00318918977146287,0.00281428580284516,0.00243093442457092,0.00135135620681097,0.000531663612305376,0.000283130069756923,0.000211690476818158,0.000141604491487847,7.25684387815662e-05,7.6652258836592e-05,6.43574831306705e-05],[2.06239399183394e-05,0.000142064034665753,0.000852229676041752,0.00361869922417658,0.0073075853159755,0.00937206446236832,0.00779964534275931,0.00545937805443224,0.00629611017730667,0.00913748170317768,0.00828349402778468,0.00488377558622449,0.00266882883510407,0.00220447618822498,0.00211958467584735,0.00158484026344664,0.00105465419365306,0.000484465128543564,0.000168289083351793,0.00012962898157553,0.000126640058572849,0.000127740891587927,0.000125650933684452,0.000100675065943474,4.55538234044439e-05],[7.7070441183121e-06,0.000103956820548438,0.000737322515325008,0.00249602631154974,0.00486009428481777,0.00721361907826009,0.00732020604613151,0.00697653276689137,0.00874697630515467,0.00916527618545301,0.00606265969278489,0.00380789361149588,0.00208796338880457,0.00124827518666858,0.00105272176791617,0.000828051393539322,0.000539288336173874,0.000272293881421925,0.000101740367284171,7.9140031235676e-05,8.79719630042549e-05,0.000176024934326265,0.000239987691263202,0.000151363016567299,5.57052520598828e-05],[8.72472665249729e-06,0.000103780955733117,0.000644509883533801,0.00222194282345418,0.00540429787394584,0.0094584278273327,0.0109177484039684,0.0107056959234867,0.00894919219705179,0.00613080630593296,0.0044220678791367,0.00390491260891989,0.0018385006052405,0.000604391693965707,0.000538475887843717,0.000447691192240235,0.000191025883893045,8.33765805803731e-05,4.31400092802833e-05,6.53386270962168e-05,0.00014114344385592,0.000159766133856911,0.000151294315880593,0.000117288122474539,4.02419109747324e-05],[2.98945584237851e-05,0.000360925813049305,0.00171730691749531,0.00556548333896999,0.0124114847987995,0.0195962052376852,0.0205890119606349,0.0145003680328433,0.00676103278814184,0.0031541262773379,0.00257204925418617,0.00225902107288842,0.000823227524816051,0.000234284964899831,0.000330969367912075,0.000258846123795304,8.85570171159866e-05,8.61376121823395e-05,0.000149065423573581,0.000285387263387255,0.000362658061946901,0.000247291729067739,0.000134650947561044,9.26872728657877e-05,3.28151849126389e-05],[6.64579878442339e-05,0.000763873648976415,0.00401191326102039,0.0146731987443362,0.0299726314732049,0.0361182081873196,0.0265155655668649,0.0123434958242303,0.00388924634292393,0.00129841194629526,0.000866747031698318,0.000650042871737438,0.000308478106167392,0.000100244452852641,0.000116052355621325,0.000114969215815636,0.000112392722077521,0.000209725861012533,0.000427762744006027,0.000652490817812836,0.000691700418751288,0.000406574287215282,0.00015044347500062,7.37060356384559e-05,3.9557351763046e-05],[6.38844147379561e-05,0.000706460608946014,0.004522446050321,0.0166346811822866,0.032190392316401,0.032001563617495,0.0171809764122061,0.00602911307611578,0.00180853965161655,0.000667149954281595,0.000371964765134124,0.000283249945844339,0.000194394399212235,8.34910029661236e-05,5.30281683322756e-05,8.22110572191837e-05,0.000192661939454471,0.000445066367863193,0.000641161173388871,0.000699734672296766,0.000624020148708818,0.000341424334903481,0.00016115110098131,6.0806550861577e-05,1.73894226694027e-05],[2.15443655127987e-05,0.00035151195988673,0.00256923454483834,0.00842238115676401,0.0149549619321688,0.0144485452364985,0.00721414062483175,0.00225160950887915,0.000723424796115755,0.000336702900567808,0.000159397667221847,9.11108808644957e-05,7.98625187673298e-05,4.20354074617216e-05,4.656445822806e-05,0.000183350889026569,0.000599914719109584,0.00105583487111275,0.000870614245942403,0.000583532950277776,0.000376579813368351,0.000170526080566708,6.25428467744792e-05,1.86789504459648e-05,1.85738072066172e-06],[1.80748341420797e-05,0.000214677464063876,0.00121298416357931,0.0030365879679562,0.00434486914776743,0.00431400098558762,0.00238985289189556,0.000774880568231874,0.000312964230224151,0.000183935801054728,8.59378165434125e-05,2.13360990327373e-05,1.71757295331109e-05,5.04436444018901e-05,0.000302823843207019,0.000585295239296378,0.000818142046394817,0.00109414094854514,0.000906885898529485,0.000587328135403003,0.000272733569221405,8.19737875877359e-05,1.25638790439921e-05,2.76842692052817e-06,4.56083168504877e-07],[1.45257041066247e-05,0.000111680668940824,0.000428686630673862,0.00085304586313846,0.00120275551409138,0.00122388901310586,0.000718051886292119,0.000328528525954845,0.000163571455599439,0.000150168156650527,9.85536149473742e-05,2.81517036192894e-05,1.5526725325244e-05,0.000189280581303339,0.00084775375282162,0.00100257017786303,0.000726867422755513,0.000979156396973765,0.00108956610390104,0.000660220177932982,0.000252509551304612,9.91701082774549e-05,3.82644116303771e-05,2.39893397556388e-05,5.58132500045844e-06],[2.44037719064563e-06,2.66070944352029e-05,0.000142692609467516,0.000301899643750403,0.000361943812903209,0.00039716280520662,0.000307829760839976,0.00020110343041243,0.000158434003260257,0.000137639191059482,8.30580694093601e-05,4.11291750761939e-05,1.87721878504772e-05,0.000107574855028006,0.000365493788639434,0.000468380663516977,0.000514801934525366,0.000654596847621509,0.000728235793445876,0.000524825002413044,0.000276680614624159,0.000165388455191246,7.21796247937351e-05,2.95089035437706e-05,1.11641559246372e-05],[8.55706470596545e-08,2.21358411937451e-06,1.77906309063818e-05,5.88101377546067e-05,0.000140316101359757,0.000233952712593411,0.000168533114262275,0.000119327569517443,0.000134793809826024,9.64087833554594e-05,3.9699659893822e-05,9.03906107466094e-06,7.61159420311394e-06,4.9890637926812e-05,0.000164122101876818,0.000259133544763794,0.000264234189985473,0.000267494205134595,0.000291288605351834,0.000253943590152108,0.000163431264983392,9.37311663025275e-05,4.5161220759484e-05,2.59874888639043e-05,3.33346592592119e-05],[4.38203067061347e-09,1.65432096129312e-07,2.89194860961548e-06,2.29022826734872e-05,0.000102401680565987,0.000148644023945871,6.47854892615113e-05,5.3014281796923e-05,8.48603634576419e-05,5.0559245811545e-05,1.78668907809845e-05,3.38205709795147e-06,2.31064722685065e-05,0.000124017739308773,0.000303737680929561,0.000383966727722635,0.000272675876493354,0.000178846846183451,0.000228269392570146,0.000187292607357964,0.000109886702273201,6.54126733645685e-05,7.00084063556679e-05,2.90554960500366e-05,1.34260738470617e-05],[2.34214986555924e-07,3.51037572016078e-06,1.65672037868501e-05,4.14887122038682e-05,7.54521716878311e-05,9.57645423708066e-05,2.84069753172177e-05,7.63302035401892e-06,2.3652236149889e-05,5.96196095514983e-05,4.58918664697726e-05,8.52233905004308e-06,2.05982476664213e-05,0.000109562934106119,0.000209236330728908,0.000202661889215832,0.000148789424471455,0.000103546998465319,0.00014537486382454,0.000122059624572578,5.86589437833909e-05,1.65951551427961e-05,1.68438368229747e-05,8.113485444057e-06,1.14312883322584e-06],[1.20570781550845e-06,1.58943413069842e-05,3.63455056271848e-05,2.57379716853479e-05,4.29104060070392e-05,6.89322789977908e-05,2.36742937926056e-05,1.80584931878114e-06,4.35646997673821e-06,2.13555534090496e-05,2.23785699083392e-05,2.53040573133557e-05,5.93688968187723e-05,0.000102816959985535,0.000106588929622577,6.36132310773251e-05,3.02976181156771e-05,3.94500810871215e-05,5.92450541909011e-05,4.29486517450925e-05,4.61689884187936e-05,1.8810490004913e-05,2.43292487297052e-05,2.58892690515197e-05,4.62881205782579e-06],[4.11223769344612e-07,5.37236175864192e-06,1.12984980674381e-05,4.32277497446468e-06,4.51996363495123e-06,1.02770070608901e-05,9.78136877239081e-06,1.0040912661803e-05,9.88654376125909e-06,3.95088235415909e-05,4.57874777102564e-05,5.37047333123248e-05,8.57801977389866e-05,9.8182536429732e-05,0.000109745780420354,8.46780072646656e-05,6.1574698235786e-05,3.20902141713816e-05,5.30812145127521e-05,6.52840774794302e-05,5.88334945033931e-05,3.40857391381365e-05,2.23590695240629e-05,1.6040259794709e-05,3.105729247147e-06],[9.16187646104657e-09,1.19623776782608e-07,2.50109981515658e-07,8.97304578627601e-08,2.96178832841117e-07,5.15896778498339e-06,2.70962555277473e-05,3.65833494907663e-05,2.96035395962752e-05,5.84612560030089e-05,4.71425933637995e-05,2.32288066247419e-05,4.51485128011602e-05,5.95492671604921e-05,8.76933440402461e-05,0.000131568221985636,0.000128300891050253,5.81607933732122e-05,5.59879431920138e-05,6.21910697283686e-05,2.76034089531096e-05,3.41288062802789e-05,3.35343210503407e-05,2.82242780388688e-05,1.040073566017e-05],[1.33581777405473e-11,1.77631011545453e-10,4.41765735699694e-10,1.08042567873307e-08,9.73876212142368e-07,1.47054581842072e-05,3.94113497444074e-05,3.12567198640015e-05,2.74111196471878e-05,2.47401701021452e-05,9.6836695801585e-06,2.1208260192975e-05,5.30672427731555e-05,3.26336768027379e-05,1.74599992772533e-05,2.94571922367137e-05,3.95528469283711e-05,4.57573365172885e-05,4.62005873666219e-05,2.35153935547469e-05,4.48046280865313e-06,7.5430700022386e-06,2.3284196421279e-05,3.54984210263855e-05,1.18965220658404e-05],[3.34717127872494e-11,3.39575488992591e-09,5.51474840606791e-08,1.48197634951248e-07,5.39209105368735e-07,7.65105142064164e-06,2.30205633619565e-05,3.56625069691786e-05,3.60103348712552e-05,9.46297020150177e-06,3.90134469288358e-06,9.40918154110327e-06,2.15573117228944e-05,3.46851618410174e-05,3.01684671787759e-05,1.44733189992452e-05,1.15248536151169e-05,2.93114792882463e-05,2.40762470817011e-05,4.60461334630336e-06,1.15447071060652e-06,7.78137661684735e-06,3.22018126034905e-05,3.15414982802427e-05,5.90694017882867e-06],[2.00768772034643e-09,2.03689475087322e-07,3.30749209297446e-06,8.60712827227532e-06,4.79540296414212e-06,2.10912689820587e-05,5.84954461827037e-05,4.28608371355882e-05,4.00441968848397e-05,2.32088787453438e-05,3.88814113134953e-05,3.88561389224141e-05,3.14332627917773e-05,5.84212522024222e-05,4.97074544961175e-05,4.04790497076888e-05,4.65653576504425e-05,3.02273730166858e-05,6.02154554028303e-06,3.58109622422723e-06,1.59364226721291e-05,2.79931521204818e-05,3.80290906928256e-05,1.47525011095031e-05,1.33284561094399e-06],[7.85912818957918e-09,7.97345947949861e-07,1.29471785603547e-05,3.36552113926045e-05,1.4756215855389e-05,1.3648748917939e-05,3.43341866754158e-05,1.8564568819271e-05,1.09644135743683e-05,1.42793129712635e-05,3.67625044468838e-05,2.97711953295937e-05,1.62051772338609e-05,2.0904204384487e-05,1.19243849129563e-05,2.38378995872889e-05,3.28912762978028e-05,1.44578184839028e-05,1.95421028253068e-06,6.07447693499942e-06,2.80253311203959e-05,2.47990153022742e-05,1.12526390906732e-05,2.87340283420559e-06,1.48906521509376e-07]],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"surface\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"Connection start time\",\"titlefont\":{\"size\":12},\"tickfont\":{\"size\":10}},\"yaxis\":{\"title\":\"Connection hours\",\"titlefont\":{\"size\":12},\"tickfont\":{\"size\":10}},\"zaxis\":{\"title\":\"Density of sessions\",\"titlefont\":{\"size\":12},\"tickfont\":{\"size\":10}},\"camera\":{\"eye\":{\"x\":-1.5,\"y\":-1.5,\"z\":1.5}}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"colorbar\":{\"title\":\"\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666667\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333333\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666667\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.375\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333333\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666667\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.875\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"x\":[3.00583333333333,3.99429398148148,4.98275462962963,5.97121527777778,6.95967592592593,7.94813657407407,8.93659722222222,9.92505787037037,10.9135185185185,11.9019791666667,12.8904398148148,13.878900462963,14.8673611111111,15.8558217592593,16.8442824074074,17.8327430555556,18.8212037037037,19.8096643518519,20.798125,21.7865856481481,22.7750462962963,23.7635069444444,24.7519675925926,25.7404282407407,26.7288888888889],\"y\":[0.0875,1.07291666666667,2.05833333333333,3.04375,4.02916666666667,5.01458333333333,6,6.98541666666667,7.97083333333333,8.95625,9.94166666666667,10.9270833333333,11.9125,12.8979166666667,13.8833333333333,14.86875,15.8541666666667,16.8395833333333,17.825,18.8104166666667,19.7958333333333,20.78125,21.7666666666667,22.7520833333333,23.7375],\"z\":[[1.15190932773926e-05,0.000136392793323507,0.000482138341554033,0.000810642534839878,0.000958987126866483,0.00116134929730252,0.00128313596913997,0.00124726718874486,0.00138209529317705,0.00163844179253462,0.00166224976522482,0.00177453114087578,0.00234498065952239,0.00310864759703292,0.00327155231789656,0.0030535285274431,0.00277515903989218,0.0021689362271797,0.00174291528674223,0.00160559529746105,0.00119993318237257,0.000605390896439951,0.000222277639646922,6.11249668913899e-05,1.03709366281915e-05],[3.28285440878976e-05,0.000296239065145386,0.000910387602207051,0.00187924196467409,0.00250405579585431,0.00304862175107626,0.00359947017046038,0.00379230531964137,0.00380478189594421,0.00376948443116448,0.00383278190308778,0.00452097047449877,0.00595371438650299,0.00767865560030746,0.0071463963200235,0.00596757871530544,0.00551912060929729,0.00445952677259746,0.00307650105239633,0.00196801963424828,0.00134941877822558,0.000718829490451515,0.000324428415425886,0.000137193931133621,4.52031868298535e-05],[7.50008753390465e-05,0.000272803543536719,0.000573750999398569,0.00122509721946285,0.00247693310257927,0.00424637268899441,0.00590112890567151,0.00567954577013104,0.00425880483005145,0.00400126367938268,0.00523162864309668,0.0063566814937421,0.00788554638476452,0.00918618068038286,0.00751228969292469,0.00654372992214393,0.00700313433307259,0.00507244200847808,0.00276587716060653,0.00149074636863411,0.000874270596416465,0.00049899256937784,0.000244306799655477,9.93724604880866e-05,4.50782019874115e-05],[0.000147141951320835,0.000229805094383197,0.000287730259053147,0.000834353082200548,0.00294554176372575,0.00665772384658323,0.00777582233998847,0.00547147103279242,0.004054921668671,0.00547527571684127,0.00767391712105939,0.00794738236971248,0.00716709989112225,0.00626326964273894,0.0051431274353358,0.00493561579557649,0.00493021444439305,0.00322573515622189,0.00154958955198188,0.000952234745270948,0.000558586907414165,0.000284465774288956,0.000182952085334326,8.96923470955462e-05,5.67868031455573e-05],[5.17162644274084e-05,0.000156622044878412,0.000460571218428109,0.00214401112251916,0.00634437885872997,0.0104514630392668,0.00873988567440413,0.00500803798654336,0.00442177389493971,0.00748632991612864,0.00948670328932067,0.00764301196605601,0.00495501023199195,0.00367495054044867,0.00318918977146287,0.00281428580284516,0.00243093442457092,0.00135135620681097,0.000531663612305376,0.000283130069756923,0.000211690476818158,0.000141604491487847,7.25684387815662e-05,7.6652258836592e-05,6.43574831306705e-05],[2.06239399183394e-05,0.000142064034665753,0.000852229676041752,0.00361869922417658,0.0073075853159755,0.00937206446236832,0.00779964534275931,0.00545937805443224,0.00629611017730667,0.00913748170317768,0.00828349402778468,0.00488377558622449,0.00266882883510407,0.00220447618822498,0.00211958467584735,0.00158484026344664,0.00105465419365306,0.000484465128543564,0.000168289083351793,0.00012962898157553,0.000126640058572849,0.000127740891587927,0.000125650933684452,0.000100675065943474,4.55538234044439e-05],[7.7070441183121e-06,0.000103956820548438,0.000737322515325008,0.00249602631154974,0.00486009428481777,0.00721361907826009,0.00732020604613151,0.00697653276689137,0.00874697630515467,0.00916527618545301,0.00606265969278489,0.00380789361149588,0.00208796338880457,0.00124827518666858,0.00105272176791617,0.000828051393539322,0.000539288336173874,0.000272293881421925,0.000101740367284171,7.9140031235676e-05,8.79719630042549e-05,0.000176024934326265,0.000239987691263202,0.000151363016567299,5.57052520598828e-05],[8.72472665249729e-06,0.000103780955733117,0.000644509883533801,0.00222194282345418,0.00540429787394584,0.0094584278273327,0.0109177484039684,0.0107056959234867,0.00894919219705179,0.00613080630593296,0.0044220678791367,0.00390491260891989,0.0018385006052405,0.000604391693965707,0.000538475887843717,0.000447691192240235,0.000191025883893045,8.33765805803731e-05,4.31400092802833e-05,6.53386270962168e-05,0.00014114344385592,0.000159766133856911,0.000151294315880593,0.000117288122474539,4.02419109747324e-05],[2.98945584237851e-05,0.000360925813049305,0.00171730691749531,0.00556548333896999,0.0124114847987995,0.0195962052376852,0.0205890119606349,0.0145003680328433,0.00676103278814184,0.0031541262773379,0.00257204925418617,0.00225902107288842,0.000823227524816051,0.000234284964899831,0.000330969367912075,0.000258846123795304,8.85570171159866e-05,8.61376121823395e-05,0.000149065423573581,0.000285387263387255,0.000362658061946901,0.000247291729067739,0.000134650947561044,9.26872728657877e-05,3.28151849126389e-05],[6.64579878442339e-05,0.000763873648976415,0.00401191326102039,0.0146731987443362,0.0299726314732049,0.0361182081873196,0.0265155655668649,0.0123434958242303,0.00388924634292393,0.00129841194629526,0.000866747031698318,0.000650042871737438,0.000308478106167392,0.000100244452852641,0.000116052355621325,0.000114969215815636,0.000112392722077521,0.000209725861012533,0.000427762744006027,0.000652490817812836,0.000691700418751288,0.000406574287215282,0.00015044347500062,7.37060356384559e-05,3.9557351763046e-05],[6.38844147379561e-05,0.000706460608946014,0.004522446050321,0.0166346811822866,0.032190392316401,0.032001563617495,0.0171809764122061,0.00602911307611578,0.00180853965161655,0.000667149954281595,0.000371964765134124,0.000283249945844339,0.000194394399212235,8.34910029661236e-05,5.30281683322756e-05,8.22110572191837e-05,0.000192661939454471,0.000445066367863193,0.000641161173388871,0.000699734672296766,0.000624020148708818,0.000341424334903481,0.00016115110098131,6.0806550861577e-05,1.73894226694027e-05],[2.15443655127987e-05,0.00035151195988673,0.00256923454483834,0.00842238115676401,0.0149549619321688,0.0144485452364985,0.00721414062483175,0.00225160950887915,0.000723424796115755,0.000336702900567808,0.000159397667221847,9.11108808644957e-05,7.98625187673298e-05,4.20354074617216e-05,4.656445822806e-05,0.000183350889026569,0.000599914719109584,0.00105583487111275,0.000870614245942403,0.000583532950277776,0.000376579813368351,0.000170526080566708,6.25428467744792e-05,1.86789504459648e-05,1.85738072066172e-06],[1.80748341420797e-05,0.000214677464063876,0.00121298416357931,0.0030365879679562,0.00434486914776743,0.00431400098558762,0.00238985289189556,0.000774880568231874,0.000312964230224151,0.000183935801054728,8.59378165434125e-05,2.13360990327373e-05,1.71757295331109e-05,5.04436444018901e-05,0.000302823843207019,0.000585295239296378,0.000818142046394817,0.00109414094854514,0.000906885898529485,0.000587328135403003,0.000272733569221405,8.19737875877359e-05,1.25638790439921e-05,2.76842692052817e-06,4.56083168504877e-07],[1.45257041066247e-05,0.000111680668940824,0.000428686630673862,0.00085304586313846,0.00120275551409138,0.00122388901310586,0.000718051886292119,0.000328528525954845,0.000163571455599439,0.000150168156650527,9.85536149473742e-05,2.81517036192894e-05,1.5526725325244e-05,0.000189280581303339,0.00084775375282162,0.00100257017786303,0.000726867422755513,0.000979156396973765,0.00108956610390104,0.000660220177932982,0.000252509551304612,9.91701082774549e-05,3.82644116303771e-05,2.39893397556388e-05,5.58132500045844e-06],[2.44037719064563e-06,2.66070944352029e-05,0.000142692609467516,0.000301899643750403,0.000361943812903209,0.00039716280520662,0.000307829760839976,0.00020110343041243,0.000158434003260257,0.000137639191059482,8.30580694093601e-05,4.11291750761939e-05,1.87721878504772e-05,0.000107574855028006,0.000365493788639434,0.000468380663516977,0.000514801934525366,0.000654596847621509,0.000728235793445876,0.000524825002413044,0.000276680614624159,0.000165388455191246,7.21796247937351e-05,2.95089035437706e-05,1.11641559246372e-05],[8.55706470596545e-08,2.21358411937451e-06,1.77906309063818e-05,5.88101377546067e-05,0.000140316101359757,0.000233952712593411,0.000168533114262275,0.000119327569517443,0.000134793809826024,9.64087833554594e-05,3.9699659893822e-05,9.03906107466094e-06,7.61159420311394e-06,4.9890637926812e-05,0.000164122101876818,0.000259133544763794,0.000264234189985473,0.000267494205134595,0.000291288605351834,0.000253943590152108,0.000163431264983392,9.37311663025275e-05,4.5161220759484e-05,2.59874888639043e-05,3.33346592592119e-05],[4.38203067061347e-09,1.65432096129312e-07,2.89194860961548e-06,2.29022826734872e-05,0.000102401680565987,0.000148644023945871,6.47854892615113e-05,5.3014281796923e-05,8.48603634576419e-05,5.0559245811545e-05,1.78668907809845e-05,3.38205709795147e-06,2.31064722685065e-05,0.000124017739308773,0.000303737680929561,0.000383966727722635,0.000272675876493354,0.000178846846183451,0.000228269392570146,0.000187292607357964,0.000109886702273201,6.54126733645685e-05,7.00084063556679e-05,2.90554960500366e-05,1.34260738470617e-05],[2.34214986555924e-07,3.51037572016078e-06,1.65672037868501e-05,4.14887122038682e-05,7.54521716878311e-05,9.57645423708066e-05,2.84069753172177e-05,7.63302035401892e-06,2.3652236149889e-05,5.96196095514983e-05,4.58918664697726e-05,8.52233905004308e-06,2.05982476664213e-05,0.000109562934106119,0.000209236330728908,0.000202661889215832,0.000148789424471455,0.000103546998465319,0.00014537486382454,0.000122059624572578,5.86589437833909e-05,1.65951551427961e-05,1.68438368229747e-05,8.113485444057e-06,1.14312883322584e-06],[1.20570781550845e-06,1.58943413069842e-05,3.63455056271848e-05,2.57379716853479e-05,4.29104060070392e-05,6.89322789977908e-05,2.36742937926056e-05,1.80584931878114e-06,4.35646997673821e-06,2.13555534090496e-05,2.23785699083392e-05,2.53040573133557e-05,5.93688968187723e-05,0.000102816959985535,0.000106588929622577,6.36132310773251e-05,3.02976181156771e-05,3.94500810871215e-05,5.92450541909011e-05,4.29486517450925e-05,4.61689884187936e-05,1.8810490004913e-05,2.43292487297052e-05,2.58892690515197e-05,4.62881205782579e-06],[4.11223769344612e-07,5.37236175864192e-06,1.12984980674381e-05,4.32277497446468e-06,4.51996363495123e-06,1.02770070608901e-05,9.78136877239081e-06,1.0040912661803e-05,9.88654376125909e-06,3.95088235415909e-05,4.57874777102564e-05,5.37047333123248e-05,8.57801977389866e-05,9.8182536429732e-05,0.000109745780420354,8.46780072646656e-05,6.1574698235786e-05,3.20902141713816e-05,5.30812145127521e-05,6.52840774794302e-05,5.88334945033931e-05,3.40857391381365e-05,2.23590695240629e-05,1.6040259794709e-05,3.105729247147e-06],[9.16187646104657e-09,1.19623776782608e-07,2.50109981515658e-07,8.97304578627601e-08,2.96178832841117e-07,5.15896778498339e-06,2.70962555277473e-05,3.65833494907663e-05,2.96035395962752e-05,5.84612560030089e-05,4.71425933637995e-05,2.32288066247419e-05,4.51485128011602e-05,5.95492671604921e-05,8.76933440402461e-05,0.000131568221985636,0.000128300891050253,5.81607933732122e-05,5.59879431920138e-05,6.21910697283686e-05,2.76034089531096e-05,3.41288062802789e-05,3.35343210503407e-05,2.82242780388688e-05,1.040073566017e-05],[1.33581777405473e-11,1.77631011545453e-10,4.41765735699694e-10,1.08042567873307e-08,9.73876212142368e-07,1.47054581842072e-05,3.94113497444074e-05,3.12567198640015e-05,2.74111196471878e-05,2.47401701021452e-05,9.6836695801585e-06,2.1208260192975e-05,5.30672427731555e-05,3.26336768027379e-05,1.74599992772533e-05,2.94571922367137e-05,3.95528469283711e-05,4.57573365172885e-05,4.62005873666219e-05,2.35153935547469e-05,4.48046280865313e-06,7.5430700022386e-06,2.3284196421279e-05,3.54984210263855e-05,1.18965220658404e-05],[3.34717127872494e-11,3.39575488992591e-09,5.51474840606791e-08,1.48197634951248e-07,5.39209105368735e-07,7.65105142064164e-06,2.30205633619565e-05,3.56625069691786e-05,3.60103348712552e-05,9.46297020150177e-06,3.90134469288358e-06,9.40918154110327e-06,2.15573117228944e-05,3.46851618410174e-05,3.01684671787759e-05,1.44733189992452e-05,1.15248536151169e-05,2.93114792882463e-05,2.40762470817011e-05,4.60461334630336e-06,1.15447071060652e-06,7.78137661684735e-06,3.22018126034905e-05,3.15414982802427e-05,5.90694017882867e-06],[2.00768772034643e-09,2.03689475087322e-07,3.30749209297446e-06,8.60712827227532e-06,4.79540296414212e-06,2.10912689820587e-05,5.84954461827037e-05,4.28608371355882e-05,4.00441968848397e-05,2.32088787453438e-05,3.88814113134953e-05,3.88561389224141e-05,3.14332627917773e-05,5.84212522024222e-05,4.97074544961175e-05,4.04790497076888e-05,4.65653576504425e-05,3.02273730166858e-05,6.02154554028303e-06,3.58109622422723e-06,1.59364226721291e-05,2.79931521204818e-05,3.80290906928256e-05,1.47525011095031e-05,1.33284561094399e-06],[7.85912818957918e-09,7.97345947949861e-07,1.29471785603547e-05,3.36552113926045e-05,1.4756215855389e-05,1.3648748917939e-05,3.43341866754158e-05,1.8564568819271e-05,1.09644135743683e-05,1.42793129712635e-05,3.67625044468838e-05,2.97711953295937e-05,1.62051772338609e-05,2.0904204384487e-05,1.19243849129563e-05,2.38378995872889e-05,3.28912762978028e-05,1.44578184839028e-05,1.95421028253068e-06,6.07447693499942e-06,2.80253311203959e-05,2.47990153022742e-05,1.12526390906732e-05,2.87340283420559e-06,1.48906521509376e-07]],\"type\":\"surface\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"mcanigueral.github.io/evprof/reference/plot_division_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","title":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","text":"Iteration evprof::plot_division_line function plot multiple lines","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_division_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","text":"","code":"plot_division_lines(ggplot_points, n_lines, division_hour)"},{"path":"mcanigueral.github.io/evprof/reference/plot_division_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","text":"ggplot_points ggplot2 returned evprof::plot_points function n_lines number lines plot division_hour Hour divide groups according disconnection time","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_division_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","text":"ggplot2 function","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_division_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteration over evprof::plot_division_line function to plot multiple lines — plot_division_lines","text":"","code":"library(dplyr) plot_points(california_ev_sessions) %>%   plot_division_lines(n_lines = 1, division_hour = 10)"},{"path":"mcanigueral.github.io/evprof/reference/plot_divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot divisions in a wrapped ggplot — plot_divisions","title":"Plot divisions in a wrapped ggplot — plot_divisions","text":"Plot divisions wrapped ggplot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot divisions in a wrapped ggplot — plot_divisions","text":"","code":"plot_divisions(   sessions,   by_disconnection = TRUE,   by_timecycle = TRUE,   plottype = c(\"points\", \"density\"),   nrow = NULL,   ncol = NULL )"},{"path":"mcanigueral.github.io/evprof/reference/plot_divisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot divisions in a wrapped ggplot — plot_divisions","text":"sessions sessions data set standard format by_disconnection boolean by_timecycle boolean plottype \"density\" \"points\" plot nrow number rows ggplot2::facet_wrap ncol number columns ggplot2::facet_wrap","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_divisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot divisions in a wrapped ggplot — plot_divisions","text":"ggplot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_energy_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare density of estimated energy with density of real energy vector — plot_energy_models","title":"Compare density of estimated energy with density of real energy vector — plot_energy_models","text":"Compare density estimated energy density real energy vector","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_energy_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare density of estimated energy with density of real energy vector — plot_energy_models","text":"","code":"plot_energy_models(energy_models, nrow = 2)"},{"path":"mcanigueral.github.io/evprof/reference/plot_energy_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare density of estimated energy with density of real energy vector — plot_energy_models","text":"energy_models energy models returned function get_energy_models nrow integer, number rows plot grid (passed cowplot::plot_grid)","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_energy_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare density of estimated energy with density of real energy vector — plot_energy_models","text":"ggplot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_energy_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare density of estimated energy with density of real energy vector — plot_energy_models","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Classify each session to the corresponding user profile sessions_profiles <- set_profiles(   sessions_clustered = list(sessions_clusters$sessions),   clusters_definition = list(clusters_definitions) )  # Create energy models energy_models <- get_energy_models(sessions_profiles, log = TRUE)  # Plot energy models plot_energy_models(energy_models)"},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of a variable from sessions data set — plot_histogram","title":"Histogram of a variable from sessions data set — plot_histogram","text":"Histogram variable sessions data set","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of a variable from sessions data set — plot_histogram","text":"","code":"plot_histogram(sessions, var, binwidth = 1)"},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of a variable from sessions data set — plot_histogram","text":"sessions tibble, sessions data set evprof standard format. var character, column name compute histogram binwidth integer, histogram bins","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of a variable from sessions data set — plot_histogram","text":"ggplot plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of a variable from sessions data set — plot_histogram","text":"","code":"plot_histogram(california_ev_sessions, \"Power\", binwidth = 2)  plot_histogram(california_ev_sessions, \"Power\", binwidth = 0.1)"},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid of multiple variable histograms — plot_histogram_grid","title":"Grid of multiple variable histograms — plot_histogram_grid","text":"Grid multiple variable histograms","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid of multiple variable histograms — plot_histogram_grid","text":"","code":"plot_histogram_grid(   sessions,   vars = evprof::sessions_summary_feature_names,   binwidths = rep(1, length(vars)),   nrow = NULL,   ncol = NULL )"},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid of multiple variable histograms — plot_histogram_grid","text":"sessions tibble, sessions data set evprof standard format. vars vector characters, variables plot binwidths vector integers, binwidths variable histogram. length vector must correspond length vars parameter. nrow integer, number rows plot grid ncol integer, number columns plot grid","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid of multiple variable histograms — plot_histogram_grid","text":"grid plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_histogram_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid of multiple variable histograms — plot_histogram_grid","text":"","code":"plot_histogram_grid(california_ev_sessions)  plot_histogram_grid(california_ev_sessions, vars = c(\"Energy\", \"Power\"))"},{"path":"mcanigueral.github.io/evprof/reference/plot_kNNdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot kNNdist — plot_kNNdist","title":"Plot kNNdist — plot_kNNdist","text":"Plot kNNdist","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_kNNdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot kNNdist — plot_kNNdist","text":"","code":"plot_kNNdist(   sessions,   MinPts = NULL,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/plot_kNNdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot kNNdist — plot_kNNdist","text":"sessions tibble, sessions data set evprof standard format. MinPts integer, DBSCAN MinPts parameter. null, value 200 considered. log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_kNNdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot kNNdist — plot_kNNdist","text":"plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_kNNdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot kNNdist — plot_kNNdist","text":"","code":"plot_kNNdist(california_ev_sessions, start = 3)  plot_kNNdist(california_ev_sessions, start = 3, log = TRUE)"},{"path":"mcanigueral.github.io/evprof/reference/plot_model_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","title":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","text":"Plot bi-variable GMM (clusters) colors corresponding assigned user profile. shows clusters correspond user profile, proportion every user profile.","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_model_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","text":"","code":"plot_model_clusters(   subsets_clustering = list(),   clusters_definition = list(),   profiles_ratios,   log = TRUE )"},{"path":"mcanigueral.github.io/evprof/reference/plot_model_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","text":"subsets_clustering list clustering results subset (direct output function cluser_sessions()) clusters_definition list tibbles clusters definitions (direct output function define_clusters()) sub-set profiles_ratios tibble columns profile ratio log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)).","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_model_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","text":"ggplot2","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_model_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot all bi-variable GMM (clusters) with the colors corresponding\nto the assigned user profile. This shows which clusters correspond to which\nuser profile, and the proportion of every user profile. — plot_model_clusters","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Create a table with the connection GMM parameters connection_models <- get_connection_models(   subsets_clustering = list(sessions_clusters),   clusters_definition = list(clusters_definitions) )  # Plot all bi-variable GMM (clusters) with the colors corresponding # to their assigned user profile plot_model_clusters(   subsets_clustering = list(sessions_clusters),   clusters_definition = list(clusters_definitions),   profiles_ratios = connection_models[c(\"profile\", \"ratio\")] )"},{"path":"mcanigueral.github.io/evprof/reference/plot_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot outlying sessions — plot_outliers","title":"Plot outlying sessions — plot_outliers","text":"Plot outlying sessions","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot outlying sessions — plot_outliers","text":"","code":"plot_outliers(sessions, log = FALSE, ...)"},{"path":"mcanigueral.github.io/evprof/reference/plot_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot outlying sessions — plot_outliers","text":"sessions tibble, sessions data set evprof standard format. log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). ... arguments pass function ggplot2::plot_point","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot outlying sessions — plot_outliers","text":"ggplot2 plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot outlying sessions — plot_outliers","text":"","code":"sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5) #> Trying with MinPts = 200 and eps = 1.5 #> Too much nosie (5.83 %). Consider a higher eps. #> Trying with MinPts = 200 and eps = 2.25 #> Solution found: MinPts= 200 , eps = 1.65 plot_outliers(sessions_outliers)  plot_outliers(sessions_outliers, log = TRUE)"},{"path":"mcanigueral.github.io/evprof/reference/plot_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of sessions — plot_points","title":"Scatter plot of sessions — plot_points","text":"Scatter plot sessions","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of sessions — plot_points","text":"","code":"plot_points(sessions, start = getOption(\"evprof.start.hour\"), log = FALSE, ...)"},{"path":"mcanigueral.github.io/evprof/reference/plot_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of sessions — plot_points","text":"sessions tibble, sessions data set evprof standard format. start integer, start hour x axis plot. used log = FALSE. log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). ... arguments ggplot2::geom_point function","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of sessions — plot_points","text":"ggplot scatter plot","code":""},{"path":"mcanigueral.github.io/evprof/reference/plot_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of sessions — plot_points","text":"","code":"plot_points(california_ev_sessions)  plot_points(california_ev_sessions, start = 3)  plot_points(california_ev_sessions, log = TRUE)"},{"path":"mcanigueral.github.io/evprof/reference/print.evmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"print method for evmodel object class — print.evmodel","title":"print method for evmodel object class — print.evmodel","text":"print method evmodel object class","code":""},{"path":"mcanigueral.github.io/evprof/reference/print.evmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print method for evmodel object class — print.evmodel","text":"","code":"# S3 method for evmodel print(x, ...)"},{"path":"mcanigueral.github.io/evprof/reference/print.evmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print method for evmodel object class — print.evmodel","text":"x evmodel object (see link information) ... arguments passed methods.","code":""},{"path":"mcanigueral.github.io/evprof/reference/print.evmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print method for evmodel object class — print.evmodel","text":"nothing prints information evmodel object","code":""},{"path":"mcanigueral.github.io/evprof/reference/print.evmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print method for evmodel object class — print.evmodel","text":"","code":"print(california_ev_model) #> EV sessions model of class \"evmodel\", created on 2023-05-16  #> Timezone of the model: America/Los_Angeles  #> The Gaussian Mixture Models of EV user profiles are built in: #>   - Connection Models: logarithmic scale #>   - Energy Models: logarithmic scale #>  #> Model composed by 2 time-cycles: #>   1. Workday: #>      Months = 1-12, Week days = 1-2 #>      User profiles = Visit, Worktime #>   2. Weekend: #>      Months = 1-12, Week days = 6-7 #>      User profiles = Visit"},{"path":"mcanigueral.github.io/evprof/reference/print_connection_models_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","title":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","text":"Get LaTeX code connection bivariate GMM features (mu sigma)","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_connection_models_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","text":"","code":"print_connection_models_table(GMM, label, caption, full_width, path = NULL)"},{"path":"mcanigueral.github.io/evprof/reference/print_connection_models_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","text":"GMM Gaussian Mixture Models obtained function get_connection_models label character, e.g. \"tab:gmm\" caption character, table caption full_width logical, true \"*\" added next \"table\" tag path character, file path write latex table . must \".tex\" extension. NULL, character string returned instead writing file.","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_connection_models_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","text":"character, LaTeX code","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_connection_models_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LaTeX code for the connection bivariate GMM features (mu and sigma) — print_connection_models_table","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Create a table with the connection GMM parameters connection_models <- get_connection_models(   subsets_clustering = list(sessions_clusters),   clusters_definition = list(clusters_definitions) )  # Print connection GMM tables print_connection_models_table(   GMM = connection_models,   label = \"tab:con-gmm\",   caption = \"Connection GMM\",   full_width = TRUE ) #> [1] \"\\\\begin{table*}\\n\\\\resizebox{\\\\linewidth}{!} {\\n\\\\begin{tabular}{l|c|c|c}\\n\\\\hline\\nUser profile & Centroid ($\\\\mu$) & Covariance ($\\\\Sigma$) & Share (\\\\%) \\\\\\\\\\n\\\\hline\\n\\\\multirow{1}{*}{Visitors}& $\\\\begin{array}{cc} 2.448642 \\\\\\\\ 1.145562 \\\\end{array}$&$\\\\begin{array}{cc} 0.153393 & -0.114645 \\\\\\\\ -0.114645 & 0.683706 \\\\end{array}$&100 \\\\\\\\ \\\\hline\\n\\\\multirow{1}{*}{Workers}& $\\\\begin{array}{cc} 2.066054 \\\\\\\\ 2.205394 \\\\end{array}$&$\\\\begin{array}{cc} 0.02773 & -0.011875 \\\\\\\\ -0.011875 & 0.017942 \\\\end{array}$&100 \\\\\\\\ \\\\hline\\n\\\\end{tabular}}\\n\\\\caption{\\\\label{tab:con-gmm}Connection GMM}\\n\\\\end{table*}\""},{"path":"mcanigueral.github.io/evprof/reference/print_user_profile_energy_models_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","title":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","text":"Get LaTeX code energy GMM features SINGLE USER PROFILE (mu sigma)","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_user_profile_energy_models_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","text":"","code":"print_user_profile_energy_models_table(   user_profile_GMM,   label,   caption,   full_width,   path = NULL )"},{"path":"mcanigueral.github.io/evprof/reference/print_user_profile_energy_models_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","text":"user_profile_GMM Gaussian Mixture Models obtained function get_energy_models label character, e.g. \"tab:gmm\" caption character, table caption full_width logical, true \"*\" added next \"table\" tag path character, file path write latex table . must \".tex\" extension. NULL, character string returned instead writing file.","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_user_profile_energy_models_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","text":"character, LaTeX code","code":""},{"path":"mcanigueral.github.io/evprof/reference/print_user_profile_energy_models_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma) — print_user_profile_energy_models_table","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   | plot_points(sessions_day, start = 3)   # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Classify each session to the corresponding user profile sessions_profiles <- set_profiles(   sessions_clustered = list(sessions_clusters$sessions),   clusters_definition = list(clusters_definitions) )  # Create energy models by power charging rate sessions_profiles <- sessions_profiles %>%   mutate(Power = round_to_interval(Power, 3.7)) %>%   filter(Power < 11) sessions_profiles$Power[sessions_profiles$Power == 0] <- 3.7 energy_models <- get_energy_models(sessions_profiles, log = TRUE, by_power = TRUE)  # Print energy GMM table print_user_profile_energy_models_table(   user_profile_GMM = energy_models$energy_models[[1]], # GMM from user profile 1   label = \"tab:energy-gmm-profile-1\",   caption = \"Energy GMM from user profile 1\",   full_width = TRUE ) #> [1] \"\\\\begin{table*}\\n\\\\resizebox{\\\\linewidth}{!} {\\n\\\\begin{tabular}{l|c|c|c}\\n\\\\hline\\nCharging rate (kW) & Mean ($\\\\mu$) & Std. deviation ($\\\\sigma$) & Share (\\\\%) \\\\\\\\\\n\\\\hline\\n\\\\multirow{5}{*}{3.7}& -0.169774&0.080427&5\\\\\\\\ \\\\cline{2-4} & 1.118453&0.564089&35\\\\\\\\ \\\\cline{2-4} & 1.850353&0.207168&24\\\\\\\\ \\\\cline{2-4} & 2.495336&0.253413&33\\\\\\\\ \\\\cline{2-4} & 3.108829&0.088357&4 \\\\\\\\ \\\\hline\\n\\\\multirow{3}{*}{7.4}& 1.695851&0.625466&38\\\\\\\\ \\\\cline{2-4} & 2.597475&0.355331&52\\\\\\\\ \\\\cline{2-4} & 3.369258&0.115799&11 \\\\\\\\ \\\\hline\\n\\\\end{tabular}}\\n\\\\caption{\\\\label{tab:energy-gmm-profile-1}Energy GMM from user profile 1}\\n\\\\end{table*}\""},{"path":"mcanigueral.github.io/evprof/reference/read_ev_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","title":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","text":"Read EV model JSON file convert object class evmodel","code":""},{"path":"mcanigueral.github.io/evprof/reference/read_ev_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","text":"","code":"read_ev_model(file)"},{"path":"mcanigueral.github.io/evprof/reference/read_ev_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","text":"file path JSON file","code":""},{"path":"mcanigueral.github.io/evprof/reference/read_ev_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","text":"object class evmodel","code":""},{"path":"mcanigueral.github.io/evprof/reference/read_ev_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an EV model JSON file and convert it to object of class evmodel — read_ev_model","text":"","code":"ev_model <- california_ev_model # Model of example  save_ev_model(ev_model, file = file.path(tempdir(), \"evmodel.json\"))  read_ev_model(file = file.path(tempdir(), \"evmodel.json\")) #> EV sessions model of class \"evmodel\", created on 2023-05-16  #> Timezone of the model: America/Los_Angeles  #> The Gaussian Mixture Models of EV user profiles are built in: #>   - Connection Models: logarithmic scale #>   - Energy Models: logarithmic scale #>  #> Model composed by 2 time-cycles: #>   1. Workday: #>      Months = 1-12, Week days = 1-2 #>      User profiles = Visit, Worktime #>   2. Weekend: #>      Months = 1-12, Week days = 6-7 #>      User profiles = Visit"},{"path":"mcanigueral.github.io/evprof/reference/round_to_half.html","id":null,"dir":"Reference","previous_headings":"","what":"Round numeric time value to half hour basis. — round_to_half","title":"Round numeric time value to half hour basis. — round_to_half","text":"Round numeric time value half hour basis.","code":""},{"path":"mcanigueral.github.io/evprof/reference/round_to_half.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round numeric time value to half hour basis. — round_to_half","text":"","code":"round_to_half(time_num)"},{"path":"mcanigueral.github.io/evprof/reference/round_to_half.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round numeric time value to half hour basis. — round_to_half","text":"time_num Numeric time value (hour-based)","code":""},{"path":"mcanigueral.github.io/evprof/reference/round_to_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest interval — round_to_interval","title":"Round to nearest interval — round_to_interval","text":"Round nearest interval","code":""},{"path":"mcanigueral.github.io/evprof/reference/round_to_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest interval — round_to_interval","text":"","code":"round_to_interval(dbl, interval)"},{"path":"mcanigueral.github.io/evprof/reference/round_to_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest interval — round_to_interval","text":"dbl number round interval rounding interval","code":""},{"path":"mcanigueral.github.io/evprof/reference/round_to_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest interval — round_to_interval","text":"numeric value","code":""},{"path":"mcanigueral.github.io/evprof/reference/round_to_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest interval — round_to_interval","text":"","code":"set.seed(1) random_vct <- rnorm(10, 5, 5) round_to_interval(random_vct, 2.5) #>  [1]  2.5  5.0  0.0 12.5  7.5  0.0  7.5  7.5  7.5  2.5"},{"path":"mcanigueral.github.io/evprof/reference/save_clustering_iterations.html","id":null,"dir":"Reference","previous_headings":"","what":"Save iteration plots in PDF file — save_clustering_iterations","title":"Save iteration plots in PDF file — save_clustering_iterations","text":"Save iteration plots PDF file","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_clustering_iterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save iteration plots in PDF file — save_clustering_iterations","text":"","code":"save_clustering_iterations(   sessions,   k,   it = 12,   seeds = round(runif(it, min = 1, max = 1000)),   filename = paste0(\"iteration_\", k, \"_clusters.pdf\"),   plot_scale = 2,   points_size = 0.25,   mclust_tol = 1e-08,   mclust_itmax = 10000,   log = FALSE,   start = getOption(\"evprof.start.hour\") )"},{"path":"mcanigueral.github.io/evprof/reference/save_clustering_iterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save iteration plots in PDF file — save_clustering_iterations","text":"sessions tibble, sessions data set evprof standard format. k number clusters number iterations seeds seed iteration filename PDF output file (extension .pdf) plot_scale scale iteration plot good visualization pdf file points_size integer, size points scatter plot mclust_tol tolerance parameter clustering mclust_itmax maximum number iterations log logical, whether transform ConnectionStartDateTime ConnectionHours variables natural logarithmic scale (base = exp(1)). start integer, start hour x axis plot. used log = FALSE.","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_clustering_iterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save iteration plots in PDF file — save_clustering_iterations","text":"nothing, PDF file saved path specified parameter filename","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_clustering_iterations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save iteration plots in PDF file — save_clustering_iterations","text":"","code":"temp_file <- file.path(tempdir(), \"iteration.pdf\") save_clustering_iterations(california_ev_sessions, k = 2, it = 4, filename = temp_file) #> Optimal seed: 935 with BIC = -111687"},{"path":"mcanigueral.github.io/evprof/reference/save_ev_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the EV model object of class evmodel to a JSON file — save_ev_model","title":"Save the EV model object of class evmodel to a JSON file — save_ev_model","text":"Save EV model object class evmodel JSON file","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_ev_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the EV model object of class evmodel to a JSON file — save_ev_model","text":"","code":"save_ev_model(evmodel, file = \"evmodel.json\")"},{"path":"mcanigueral.github.io/evprof/reference/save_ev_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the EV model object of class evmodel to a JSON file — save_ev_model","text":"evmodel object class evmodel (see link information) file character string path name file","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_ev_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the EV model object of class evmodel to a JSON file — save_ev_model","text":"nothing saves evmodel object JSON file","code":""},{"path":"mcanigueral.github.io/evprof/reference/save_ev_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the EV model object of class evmodel to a JSON file — save_ev_model","text":"","code":"ev_model <- california_ev_model # Model of example  save_ev_model(ev_model, file = file.path(tempdir(), \"evmodel.json\"))"},{"path":"mcanigueral.github.io/evprof/reference/sessions_feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of standard features of a sessions dataset — sessions_feature_names","title":"Names of standard features of a sessions dataset — sessions_feature_names","text":"vector standard names sessions features package functions.","code":""},{"path":"mcanigueral.github.io/evprof/reference/sessions_feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of standard features of a sessions dataset — sessions_feature_names","text":"","code":"sessions_feature_names"},{"path":"mcanigueral.github.io/evprof/reference/sessions_feature_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of standard features of a sessions dataset — sessions_feature_names","text":"vector","code":""},{"path":"mcanigueral.github.io/evprof/reference/sessions_summary_feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of features to summarise in evprof functions — sessions_summary_feature_names","title":"Names of features to summarise in evprof functions — sessions_summary_feature_names","text":"vector summary features","code":""},{"path":"mcanigueral.github.io/evprof/reference/sessions_summary_feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of features to summarise in evprof functions — sessions_summary_feature_names","text":"","code":"sessions_summary_feature_names"},{"path":"mcanigueral.github.io/evprof/reference/sessions_summary_feature_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of features to summarise in evprof functions — sessions_summary_feature_names","text":"vector","code":""},{"path":"mcanigueral.github.io/evprof/reference/set_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify sessions into user profiles — set_profiles","title":"Classify sessions into user profiles — set_profiles","text":"Joins sub-sets list, adding new column Profile","code":""},{"path":"mcanigueral.github.io/evprof/reference/set_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify sessions into user profiles — set_profiles","text":"","code":"set_profiles(sessions_clustered = list(), clusters_definition = list())"},{"path":"mcanigueral.github.io/evprof/reference/set_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify sessions into user profiles — set_profiles","text":"sessions_clustered list tibbles sessions clustered (sessionsobject output function cluser_sessions()) sub-set clusters_definition list tibbles clusters definitions (direct output function define_clusters()) sub-set","code":""},{"path":"mcanigueral.github.io/evprof/reference/set_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify sessions into user profiles — set_profiles","text":"tibble","code":""},{"path":"mcanigueral.github.io/evprof/reference/set_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify sessions into user profiles — set_profiles","text":"","code":"library(dplyr)  # Select working day sessions (`Timecycle == 1`) that # disconnect the same day (`Disconnection == 1`) sessions_day <- california_ev_sessions %>%   divide_by_timecycle(     months_cycles = list(1:12), # Not differentiation between months     wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends   ) %>%   divide_by_disconnection(     division_hour = 10, start = 3   ) %>%   filter(     Disconnection == 1, Timecycle == 1   ) #> The considered time-cycles are: #>  #>  #> |Timecycle |months |wdays | #> |:---------|:------|:-----| #> |1         |1-12   |1-5   | #> |2         |1-12   |6-7   |  # Identify two clusters sessions_clusters <- cluster_sessions(   sessions_day, k=2, seed = 1234, log = TRUE )  # Plot the clusters found plot_bivarGMM(   sessions = sessions_clusters$sessions,   models = sessions_clusters$models,   log = TRUE, start = 3 )   # Define the clusters with user profile interpretations clusters_definitions <- define_clusters(   models = sessions_clusters$models,   interpretations = c(     \"Connections during working hours\",     \"Connections during all day (high variability)\"   ),   profile_names = c(\"Workers\", \"Visitors\"),   log = TRUE )  # Classify each session to the corresponding user profile sessions_profiles <- set_profiles(   sessions_clustered = list(sessions_clusters$sessions),   clusters_definition = list(clusters_definitions) )"},{"path":"mcanigueral.github.io/evprof/reference/summarise_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistic summary of sessions features — summarise_sessions","title":"Statistic summary of sessions features — summarise_sessions","text":"Statistic summary sessions features","code":""},{"path":"mcanigueral.github.io/evprof/reference/summarise_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistic summary of sessions features — summarise_sessions","text":"","code":"summarise_sessions(   sessions,   .funs,   vars = evprof::sessions_summary_feature_names )"},{"path":"mcanigueral.github.io/evprof/reference/summarise_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistic summary of sessions features — summarise_sessions","text":"sessions tibble, sessions data set evprof standard format. standard format. .funs function compute, e.g. mean, max, etc. vars character vector, variables compute histogram ","code":""},{"path":"mcanigueral.github.io/evprof/reference/summarise_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistic summary of sessions features — summarise_sessions","text":"Summary table","code":""},{"path":"mcanigueral.github.io/evprof/reference/summarise_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistic summary of sessions features — summarise_sessions","text":"","code":"summarise_sessions(california_ev_sessions, mean) #> # A tibble: 1 × 5 #>   Power Energy ConnectionHours ChargingHours FlexibilityHours #>   <dbl>  <dbl>           <dbl>         <dbl>            <dbl> #> 1  3.48   11.5            6.32          3.63             2.69"},{"path":"mcanigueral.github.io/evprof/news/index.html","id":"evprof-100","dir":"Changelog","previous_headings":"","what":"evprof 1.0.0","title":"evprof 1.0.0","text":"Added functions save read model JSON instead RDS files Bug fix evmodel printing function Default log value function detect_outliers set TRUE Replace deprecated aes_string functions using .data[[var]] Remove unused functions Remove days parameter function divide_by_disconnection Print message time-cycles’ table function divide_by_timecycle Complete tests Including California EV sessions loading package Include examples exported functions CRAN release","code":""},{"path":"mcanigueral.github.io/evprof/news/index.html","id":"evprof-010","dir":"Changelog","previous_headings":"","what":"evprof 0.1.0","title":"evprof 0.1.0","text":"First release","code":""}]

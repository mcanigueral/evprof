% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelling.R
\name{print_user_profile_energy_models_table}
\alias{print_user_profile_energy_models_table}
\title{Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma)}
\usage{
print_user_profile_energy_models_table(
  user_profile_GMM,
  label,
  caption,
  full_width,
  path = NULL
)
}
\arguments{
\item{user_profile_GMM}{Gaussian Mixture Models obtained from function \code{get_energy_models}}

\item{label}{character, e.g. "tab:gmm"}

\item{caption}{character, table caption}

\item{full_width}{logical, if true the "*" will be added next to the "table" tag}

\item{path}{character, file path to write the latex table to. Is must have ".tex" extension.
If it is NULL, then the character string is returned instead of writing a file.}
}
\value{
character, LaTeX code
}
\description{
Get LaTeX code for the energy GMM features OF A SINGLE USER PROFILE (mu and sigma)
}
\examples{
library(dplyr)

# Select working day sessions (`Timecycle == 1`) that
# disconnect the same day (`Disconnection == 1`)
sessions_day <- california_ev_sessions \%>\%
  divide_by_timecycle(
    months_cycles = list(1:12), # Not differentiation between months
    wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends
  ) \%>\%
  divide_by_disconnection(
    division_hour = 10, start = 3
  ) \%>\%
  filter(
    Disconnection == 1, Timecycle == 1
  )
plot_points(sessions_day, start = 3)

# Identify two clusters
sessions_clusters <- cluster_sessions(
  sessions_day, k=2, seed = 1234, log = TRUE
)

# Plot the clusters found
plot_bivarGMM(
  sessions = sessions_clusters$sessions,
  models = sessions_clusters$models,
  log = TRUE, start = 3
)

# Define the clusters with user profile interpretations
clusters_definitions <- define_clusters(
  models = sessions_clusters$models,
  interpretations = c(
    "Connections during working hours",
    "Connections during all day (high variability)"
  ),
  profile_names = c("Workers", "Visitors"),
  log = TRUE
)

# Classify each session to the corresponding user profile
sessions_profiles <- set_profiles(
  sessions_clustered = list(sessions_clusters$sessions),
  clusters_definition = list(clusters_definitions)
)

# Create energy models by power charging rate
sessions_profiles <- sessions_profiles \%>\%
  mutate(Power = round_to_interval(Power, 3.7)) \%>\%
  filter(Power < 11)
sessions_profiles$Power[sessions_profiles$Power == 0] <- 3.7
energy_models <- get_energy_models(sessions_profiles, log = TRUE, by_power = TRUE)

# Print energy GMM table
print_user_profile_energy_models_table(
  user_profile_GMM = energy_models$energy_models[[1]], # GMM from user profile 1
  label = "tab:energy-gmm-profile-1",
  caption = "Energy GMM from user profile 1",
  full_width = TRUE
)


}

)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
print(dbscan_params)
save(plots_list, file='outliers.RData')
noise_plots <- cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
)
noise_plots
plots_list[[15]]
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
devtools::load_all() # load evprof
library(dplyr)
library(lubridate)
library(ggplot2)
library(purrr)
library(tidyr)
load('california_data/california_sessions_divided.RData')
load('california_data/california_GMM.RData')
load('california_data/california_sessions_profiles.RData')
load('california_data/california_sessions_models.RData')
load('california_data/california_comparison_demand.RData')
choose_k_GMM(sessions_workday, k = 3:10, log = T)
choose_k_GMM(sessions_weekend, k = 1:5, log = T)
choose_k_GMM(sessions_workday, k = 3:10, log = T)
pkgdown::build_site()
california_ev_sessions
detect_outliers(california_ev_sessions, noise_th = 5)
sessions_outliers <- california_ev_sessions %>% dplyr::sample_n(10000) %>% detect_outliers(noise_th = 5)
plot_outliers(sessions_outliers)
?detect_outliers
plot_outliers(sessions_outliers, start = 3)
?plot_outliers
devtools::load_all(".")
plot_outliers(sessions_outliers, start = 3)
devtools::load_all(".")
plot_outliers(sessions_outliers, start = 3)
california_ev_sessions %>%
dplyr::sample_frac(0.1) %>%
plot_kNNdist(start = 3, log = TRUE)
sessions_outliers <- california_ev_sessions %>%
dplyr::sample_frac(0.1) %>%
detect_outliers(start = 3, noise_th = 5, log = TRUE)
sessions_outliers <- california_ev_sessions %>%
dplyr::sample_n(10000) %>%
detect_outliers(start = 3, noise_th = 5, log = TRUE)
sessions_outliers <- california_ev_sessions %>%
dplyr::sample_frac(0.1) %>%
detect_outliers(start = 3, noise_th = 5, log = TRUE)
?mutate_to_log
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 3, log = TRUE)
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 2, noise_th = 5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 3, log = TRUE)
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 2, log = TRUE)
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 4, log = TRUE)
devtools::load_all(".")
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 3, log = TRUE)
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5, eps = 2.5)
plot_outliers(sessions_outliers, start = 3)
plot_outliers(sessions_outliers, start = 3, log = TRUE)
library(dplyr)
sessions_outliers <- california_ev_sessions %>%
sample_frac(0.05) %>%
detect_outliers(start = 3, noise_th = 5, eps = 2.5)
sessions_outliers %>% plot_outliers()
sessions_outliers %>% plot_outliers(start = 3)
sessions <- evprof::california_ev_sessions
sessions
sessions2 <- cut_sessions(sessions, connection_start_min = 3, log = FALSE)
expect_true(nrow(sessions2) < nrow(sessions))
cut_sessions(sessions, connection_start_min = 3, log = FALSE)
plot_points(sessions, connection_start_min = 3, log = FALSE)
?cut_sessions
plot_points(sessions, log = FALSE)
options(
evprof.start.hour = 3
)
plot_points(sessions, log = FALSE)
get_energy_models(evprof::california_ev_sessions_profiles, log = TRUE, by_power = FALSE)
evprof::california_ev_sessions_profiles %>% dplyr::sample_frac(0.05) %>% get_energy_models(log = TRUE, by_power = FALSE)
plot_point(sessions)
plot_points(sessions, log = FALSE)
plot_points(sessions, log = TRUE)
sessions_day <- california_ev_sessions_profiles %>%
filter(
Disconnection == 1, Timecycle == 1
) %>%
sample_frac(0.05)
california_ev_sessions_profiles
load('california_data/california_sessions_divided.RData')
load('california_data/california_GMM.RData')
load('california_data/california_sessions_profiles.RData')
sessions_profiles
workday_GMM$sessions
sessions_workday
sessions_workday
library(dplyr)
# Select working day sessions (`Timecycle == 1`) that
# disconnect the same day (`Disconnection == 1`)
sessions_day <- california_ev_sessions_profiles %>%
filter(Timecycle == 1) %>%
sample_frac(0.05)
library(evprof)
library(dplyr)
# Select working day sessions (`Timecycle == 1`) that
# disconnect the same day (`Disconnection == 1`)
sessions_day <- evprof::california_ev_sessions_profiles %>%
filter(Timecycle == 1) %>%
sample_frac(0.05)
plot_points(sessions_day, start = 3)
# Identify two clusters
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 1234, log = TRUE
)
sessions_day <- evprof::california_ev_sessions_profiles %>%
filter(Timecycle == 1) %>%
sample_frac(0.05)
plot_points(sessions_day, start = 3)
sessions_day
evprof::california_ev_sessions_profiles
sessions_day <- evprof::california_ev_sessions_profiles %>%
filter(Timecycle == "Workday) %>%
sample_frac(0.05)
plot_points(sessions_day, start = 3)
sessions_day <- evprof::california_ev_sessions_profiles %>%
filter(Timecycle == "Workday") %>%
evprof::california_ev_sessions_profiles$Timecycle
sessions_day
sessions_day <- evprof::california_ev_sessions_profiles %>%
filter(Timecycle == "Workday") %>%
sample_frac(0.05)
sessions_day
plot_points(sessions_day, start = 3)
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 1234, log = TRUE
)
# Plot the clusters found
plot_bivarGMM(
sessions = sessions_clusters$sessions,
models = sessions_clusters$models,
log = TRUE, start = 3
)
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 123, log = TRUE
)
# Plot the clusters found
plot_bivarGMM(
sessions = sessions_clusters$sessions,
models = sessions_clusters$models,
log = TRUE, start = 3
)
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 1, log = TRUE
)
# Plot the clusters found
plot_bivarGMM(
sessions = sessions_clusters$sessions,
models = sessions_clusters$models,
log = TRUE, start = 3
)
devtools::check_win_devel()
pkgdown::build_home()
pkgdown::build_site()
noisy_set <- sessions_divided %>% # Obtained from the "Get started" article
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
library(dplyr)
library(purrr)
library(ggplot2)
load('arnhem_data/arnhem_sessions_divided.RData')
load('outliers.RData')
noisy_set <- sessions_divided %>% # Obtained from the "Get started" article
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2)
pkgdown::build_site()
ggsave(
filename = 'my_noise_detection.pdf',
plot = cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
),
width = 500, height = 250, units = "mm"
)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
print(dbscan_params)
ggsave(
filename = 'my_noise_detection.pdf',
plot = cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
),
width = 500, height = 250, units = "mm"
)
sessions_day <- california_ev_sessions_profiles %>%
Disconnection == 1, Timecycle == 1
sessions_day <- california_ev_sessions_profiles %>%
Timecycle == 1
sessions_day <- california_ev_sessions_profiles %>%
filter(
Timecycle == 1
) %>%
sample_frac(0.05)
plot_points(sessions_day, start = 3)
# Identify two clusters
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 1234, log = TRUE
)
sessions_day <- california_ev_sessions_profiles %>%
filter(
Timecycle == 1
) %>%
sample_frac(0.05)
sessions_day
sessions_day <- california_ev_sessions_profiles %>%
filter(
Timecycle == "Workday"
) %>%
sample_frac(0.05)
plot_points(sessions_day, start = 3)
# Identify two clusters
sessions_clusters <- cluster_sessions(
sessions_day, k=2, seed = 1234, log = TRUE
)
# Plot the clusters found
plot_bivarGMM(
sessions = sessions_clusters$sessions,
models = sessions_clusters$models,
log = TRUE, start = 3
)
pkgdown::preview_page("evprof")
pkgdown::preview_page("vignettes/evprof")
pkgdown::preview_page()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
devtools::load_all()
library(dplyr)
library(lubridate)
library(ggplot2)
library(purrr)
library(tidyr)
options(
evprof.start.hour = 0
)
# Data
# sessions <- readRDS("arnhem_data/arnhem_sessions.RDS")
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
View(sfc)
save_clustering_iterations(
sessions_workday_city, k=6, it=6, log = T,
filename = "figures/clusters/workday_city_k-6.pdf"
)
save_clustering_iterations(
sessions_workday_city, k=6, it=6, log = T,
filename = "figures/clusters/workday_city_k-6.pdf"
)
?Mclust
mclust.options("emModelNames")
pkgdown::build_article("evprof")
pkgdown::build_article("evprof")
?plot_bivarGMM
?plot_bivarGMM
pkgdown::build_article("evprof")
?get_connection_models
?plot_model_clusters
pkgdown::build_article("evprof")
friday_connection_models
friday_connection_models$connection_models[[1]]
friday_connection_models$connection_models[[3]]
friday_connection_models$connection_models[[7]]
friday_connection_models$connection_models[[7]]$mu[[1]]
friday_connection_models$connection_models[[7]]$sigma[[1]]
friday_energy_models
friday_energy_models$energy_models[[4]]
friday_energy_models$energy_models[[4]]$energy_models[[1]]
read_ev_model(file = "arnhem_data/evmodel_arnhem.json")
?read_ev_model
pkgdown::build_article("evprof")
pkgdown::build_article("evprof")
devtools::release()
devtools::check_win_devel()
pkgdown::build_site()
devtools::release()
library(evprof)
california_ev_sessions %>%
dplyr::sample_frac(0.05) %>%
plot_points(start = 3) %>%
plot_division_lines(n_lines = 1, division_hour = 10)
library(dplyr)
sessions_disconnection <- california_ev_sessions %>%
sample_frac(0.05) %>%
divide_by_disconnection(
start = 3, division_hour = 10
)
# The column `Disconnection` has been added
names(sessions_disconnection)
library(ggplot2)
sessions_disconnection %>%
tidyr::drop_na() %>%
plot_points() +
facet_wrap(vars(Disconnection))
library(dplyr)
sessions_disconnection <- california_ev_sessions %>%
sample_frac(0.05) %>%
divide_by_disconnection(
start = 3, division_hour = 5
)
# The column `Disconnection` has been added
names(sessions_disconnection)
library(ggplot2)
sessions_disconnection %>%
tidyr::drop_na() %>%
plot_points() +
facet_wrap(vars(Disconnection))
library(dplyr)
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_points(start = 3) %>%
plot_division_lines(n_lines = 1, division_hour = 5)
library(dplyr)
sessions_timecycles <- california_ev_sessions %>%
sample_frac(0.05) %>%
divide_by_timecycle(
months_cycles = list(1:12),
wdays_cycles = list(1:5, 6:7)
)
# The column `Timecycle` has been added
names(sessions_timecycles)
library(ggplot2)
plot_points(sessions_timecycles) +
facet_wrap(vars(Timecycle))
california_ev_sessions %>% sample_frac(0.05)
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_points()
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_points(start = 3)
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_points(log = TRUE)
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_density_2D(by = "wday", start = 3, bins = 15, log = FALSE)
california_ev_sessions %>%
sample_frac(0.05) %>%
plot_density_3D(start = 3)
plot_histogram(california_ev_sessions, "Power", binwidth = 2)
plot_histogram(california_ev_sessions, "Power", binwidth = 0.1)
pkgdown::build_site()
pkgdown::build_site()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::release()
# Example dataset containing load values
load_data <- c(100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5)
# Step 2: Sort the load values in descending order
load_data <- sort(load_data, decreasing = TRUE)
# Step 3: Calculate the cumulative probability
n <- length(load_data)
prob <- seq(1, 0, length.out = n)
# Step 4: Plot the load duration curve
plot(prob, load_data, type = "l", xlab = "Probability", ylab = "Load", main = "Load Duration Curve")
#' Modify datetime values according evprof.start.hour
#'
#' @param time_dt Datetime value
#' @param start Start hour (int)
#'
#' @importFrom lubridate date<- date hour days today
#'
#' @keywords internal
#'
convert_time_dt_to_plot_dt <- function(time_dt, start=getOption("evprof.start.hour")) {
date(time_dt) <- today()
if (any(hour(time_dt) < start)) {
next_day_idx <- (hour(time_dt) < start)
date(time_dt)[next_day_idx] <- date(time_dt)[next_day_idx] + days(1)
}
time_dt
}
convert_time_dt_to_plot_dt(now())
library(lubridate)
convert_time_dt_to_plot_dt(now())
convert_time_dt_to_plot_dt(now(), start = 14)
convert_time_dt_to_plot_dt(seq.POSIXt(dmy_h("01012024 0"), dmy_h("01012024 18"), "hour"), start = 6)
dmy_h("01012024 18")
dmy_h("01012024 0")
convert_time_dt_to_plot_dt(seq.POSIXt(dmy_h("01012024 1"), dmy_h("01012024 18"), "hour"), start = 6)
dmy_h("01012024 1")
dmy_h("01012024 00")
convert_time_dt_to_plot_dt(seq.POSIXt(dmy_h("01012024 00"), dmy_h("01012024 18"), "hour"), start = 6)
convert_time_dt_to_plot_dt(seq.POSIXt(dmy_h("01012024 00"), dmy_h("01012024 18"), "hour"), start = 0)
library(evprof)
devtools::check_win_devel()
pkgdown::build_site()
sessions_day <- california_ev_sessions %>%
divide_by_timecycle(
months_cycles = list(1:12), # Not differentiation between months
wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends
) %>%
divide_by_disconnection(
division_hour = 10, start = 3
) %>%
filter(
Disconnection == 1, Timecycle == 1
) %>%
sample_frac(0.05)
library(dplyr)
sessions_day <- california_ev_sessions %>%
divide_by_timecycle(
months_cycles = list(1:12), # Not differentiation between months
wdays_cycles = list(1:5, 6:7) # Differentiation between workdays/weekends
) %>%
divide_by_disconnection(
division_hour = 10, start = 3
) %>%
filter(
Disconnection == 1, Timecycle == 1
) %>%
sample_frac(0.05)
sum(hour(sessions_day$ConnectionStartDateTime) < 3)
any(hour(sessions_day$ConnectionStartDateTime) < 3)
devtools::check_win_devel()
devtools::check_win_devel()
devtools::release()
library(evprof)
system.file("starwars.csv", package = "dplyr")
system.file("data-raw", "starwars.csv", package = "dplyr")
sessions_feature_names
library(evprof)
sessions_feature_names
pkgdown::build_home()
pkgdown::preview_site()
pkgdown::build_site_github_pages()
??scales_add_defaults
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
library(dplyr)
library(purrr)
library(ggplot2)
load('arnhem_data/arnhem_sessions_divided.RData')
load('outliers.RData')
noisy_set <- sessions_divided %>% # Obtained from the "Get started" article
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2)
options(
evprof.start.hour = 6
)
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- noisy_set %>%
cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log = T)
plot_points(noisy_set, size = 0.2, log = T)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
print(dbscan_params)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
save(plots_list, file='outliers.RData')
plots_list[[15]]
pkgdown::build_site_github_pages()

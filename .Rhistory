library(dutils)
sessions <- readRDS("california_data/california_sessions.RDS") %>%
filter(Site == "caltech")
# load('california_data/california_sessions_divided.RData')
# load('california_data/california_GMM.RData')
# load('california_data/california_sessions_profiles.RData')
# load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 10) %>%
plot_outliers(log = T, size = 0.5)
sessions_divisions <- sessions %>%
divide_by_disconnection(division_hour = 12) %>%
drop_na(Disconnection)
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 10) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2)
sessions_divided %>%
filter(Timecycle == "Workday")
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2) %>%
# detect_outliers(noise_th = 2, log = T, MinPts = 10) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2) %>%
plot_points(log = T)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 10) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 20) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 50) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 5, log = T, MinPts = 50) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 5, log = T, MinPts = 10) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 5, log = T, MinPts = 20) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 3, log = T, MinPts = 50) %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 50) %>%
plot_outliers(log = T, size = 0.5)
sessions_workday <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2.5, log = T, MinPts = 50)
sessions_workday <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2.5, log = T, MinPts = 50)
sessions_workday %>%
plot_outliers(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1, log = T) %>%
plot_points(log = T, size = 0.5)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.75, connection_hours_min = -2, log = T) %>%
detect_outliers(noise_th = 2.5, log = T, MinPts = 50)
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
sessions_workday_noise
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
sessions_workday_noise
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
cut_sessions(connection_start_min = 1.8, log = TRUE) %>%
plot_points(size = 0.5, log = T)
sessions <- readRDS("california_data/california_sessions.RDS") %>%
filter(Site == "jpl")
plot_points(sessions, size = 0.5)
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 1, division_hour = 12)
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 1, division_hour = 8)
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 1, division_hour = 6)
sessions_divisions <- sessions %>%
divide_by_disconnection(division_hour = 6) %>%
drop_na(Disconnection)
plot_density_2D(sessions_divisions, bins = 20, by = 'wday')
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, log = T) %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1, log = T) %>%
plot_points(log = T, size = 0.5)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1, log = T) %>%
detect_outliers(noise_th = 2.5, log = T, MinPts = 50)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 100)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1, log = T) %>%
detect_outliers(noise_th = 3, log = T, MinPts = 100)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1.5, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 100)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
library(rlang)
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
rm(sessions_workday)
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -0.5, log = TRUE) %>%
plot_points(size = 0.5, log = T)
sessions_divided %>%
filter(Timecycle == "Weekend") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = 0, log = TRUE) %>%
plot_points(size = 0.5, log = T)
sessions_weekend <- sessions_divided %>%
filter(Timecycle == "Weekend") %>%
cut_sessions(connection_start_min = 1.8, connection_hours_min = 0, log = TRUE)
save(
sessions_divisions, sessions_divided, sessions_workday_noise, sessions_workday, sessions_weekend,
file = 'california_data/california_sessions_divided.RData'
)
plot_density_3D(sessions_workday, log = T)
plot_density_3D(sessions_weekend, log = T)
pdf('california_data/figures/BIC/workday_log.pdf', paper = 'a4r', width = 10, height = 7)
choose_k_GMM(sessions_workday, k = 3:10, log = T)
dev.off()
pdf('california_data/figures/BIC/weekend_log.pdf', paper = 'a4r', width = 10, height = 7)
choose_k_GMM(sessions_weekend, k = 3:10, log = T)
dev.off()
pdf('california_data/figures/BIC/weekend_log.pdf', paper = 'a4r', width = 10, height = 7)
choose_k_GMM(sessions_weekend, k = 1:5, log = T)
choose_k_GMM(sessions_weekend, k = 1:5, log = T)
dev.off()
save_clustering_iterations(sessions_workday, k=6, it=6, filename = "california_data/figures/CLUSTERS/workday_log_k-6.pdf", log = T)
save_clustering_iterations(sessions_workday, k=7, it=6, filename = "california_data/figures/CLUSTERS/workday_log_k-7.pdf", log = T)
save_clustering_iterations(sessions_workday, k=8, it=6, filename = "california_data/figures/CLUSTERS/workday_log_k-8.pdf", log = T)
save_clustering_iterations(sessions_weekend, k=2, it=6, filename = "california_data/figures/CLUSTERS/weekend_log_k-4.pdf", log = T)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# load('california_data/california_sessions_divided.RData')
# load('california_data/california_GMM.RData')
# load('california_data/california_sessions_profiles.RData')
# load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
workday_GMM <- cluster_sessions(sessions_workday, k = 6, seed = 384, log = T)
weekend_GMM <- cluster_sessions(sessions_weekend, k = 2, seed = 39, log = T)
save(workday_GMM, weekend_GMM, file = 'california_data/california_GMM.RData')
bivarGMM_plots <- purrr::map2(
list(workday_GMM$sessions, weekend_GMM$sessions),
list(workday_GMM$models, weekend_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
ggsave(
filename = 'california_data/figures/CLUSTERS/clusters_GMM.pdf',
plot = cowplot::plot_grid(plotlist = bivarGMM_plots, nrow = 2, ncol = 1),
width = 315, height = 445, units = "mm"
)
bivarGMM_plots[[1]]
# Print centroids in natural scale
define_clusters(workday_GMM$models, log = T)
# Define clusters
workday_clusters_profiles <- define_clusters(
models = workday_GMM$models,
interpretations = c(
"Visits around the day",
"Full-day workers",
"Afternoon visits",
"Full-day workers",
"Full-day workers",
"Evening visits"
),
profile_names = c(
"Visit",
"Worktime",
"Visit",
"Worktime",
"Worktime",
"Visit"
),
log = T
)
workday_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
bivarGMM_plots[[2]]
# Define clusters
weekend_clusters_profiles <- define_clusters(
models = weekend_GMM$models,
interpretations = c(
"Morning visitors",
"Afternoon visits"
),
profile_names = c(
"Visit",
"Visit"
),
log = T
)
weekend_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(workday_GMM$sessions, weekend_GMM$sessions),
clusters_definition = list(workday_clusters_profiles, weekend_clusters_profiles)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
ggsave(
filename = 'california_data/figures/CLUSTERS/classification_profiles.pdf', plot = classification_profiles_plot, paper="a4r", width = 40, height = 10
)
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
workday_connection_models_plot
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Save the result
ggsave(
filename = 'california_data/figures/MODELS/energy_workday_GMM.pdf',
plot = workday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Save the result
ggsave(
filename = 'california_data/figures/MODELS/connection_workday_GMM.pdf',
plot = workday_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(list(weekend_GMM), list(weekend_clusters_profiles), weekend_connection_models[c("profile", "ratio")])
weekend_connection_models_plot
# Save the result
ggsave(
filename = 'california_data/figures/MODELS/connection_weekend_GMM.pdf',
plot = weekend_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Save the result
ggsave(
filename = 'california_data/figures/MODELS/energy_weekend_GMM.pdf',
plot = weekend_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Plot the univariate GMM
weekend_energy_models_plot <- plot_energy_models(weekend_energy_models, nrow = 1)
weekend_energy_models_plot
# Plot the univariate GMM
weekend_energy_models_plot <- plot_energy_models(weekend_energy_models, nrow = 1)
weekend_energy_models_plot
# Save the result
ggsave(
filename = 'california_data/figures/MODELS/energy_weekend_GMM.pdf',
plot = weekend_energy_models_plot,
paper="a4r", width = 40, height = 20
)
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel.json')
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- dmy_hm(010920190000, tz = getOption('evprof.tzone')) + days(1)
end_date <-  dmy_hm(300920190000, tz = getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
print(profiles_ratios)
sessions_estimated <- simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
getOption('evprof.tzone')
options(
evprof.tzone = "America/Los_Angeles",
evprof.start.hour = 3
)
ev_model
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel.json')
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- dmy_hm(010920190000, tz = getOption('evprof.tzone')) + days(1)
end_date <-  dmy_hm(300920190000, tz = getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
sessions_estimated <- simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
pkgdown::build_article("california")
source("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/data-raw/california_ev_sessions.R", echo=TRUE)
library(evprof)
pkgdown::build_article("california")

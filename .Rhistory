workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(list(weekend_GMM), list(weekend_clusters_profiles), weekend_connection_models[c("profile", "ratio")])
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
weekend_energy_models_plots <- plot_energy_models(weekend_energy_models)
weekend_energy_models_plots
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel', fileext = ".RDS")
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
sessions_estimated <- simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
pkgdown::build_article("california")
pkgdown::preview_page('articles/california.html')
usethis::use_github_action_check_standard()
devtools::build_readme()
devtools::release()
devtools::spell_check()
devtools::release()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::check_rhub()
pkgdown::build_article("evprof")
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
ev_model <- readRDS("california_evmodel.RDS")
ev_model
load("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/vignettes/california_data/california_sessions_divided.RData")
sessions_divided
noisy_set <- sessions_divided %>%
filter(Disconnection == "City", Timecycle == "Workday") # Friday Home
sessions_divided
sessions_divisions
noisy_set <- sessions_divided %>%
filter(Disconnection == "City", Timecycle == "Workday") # Friday Home
sessions_divided
load("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/vignettes/california_data/california_sessions_divided.RData")
sessions
sessions_divided
tibble(Power = rnorm(100, mean = 30)) %>% plot_histogram("Power", binwidth = 2)
tibble(Power = rnorm(100, mean = 30)) %>% plot_histogram("Power", binwidth = 0.1)
install.packages("qpdf")
ev_model <- readRDS("california_evmodel.RDS")
saveRDS(ev_model, "california_evmodel.RDS", compress='xz')
ev_model <- readRDS("california_evmodel.RDS")
ev_model
library(evprof)
ev_model <- readRDS("california_evmodel.RDS")
ev_model
save(ev_model, file='ev_model.rda', compress='xz')
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
load("ev_model.rda")
ev_model
devtools::release()
devtools::check_rhub()
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
evprof::sessions_feature_names
sessions_feature_names <- c(
"Session",
"ConnectionStartDateTime",
"ConnectionEndDateTime",
"ChargingStartDateTime",
"ChargingEndDateTime",
"Power",
"Energy",
"ConnectionHours",
"ChargingHours",
"ChargingStation",
"Socket"
)
usethis::use_data(sessions_feature_names, overwrite = TRUE)
sessions_feature_names <- c(
"Session",
"ConnectionStartDateTime",
"ConnectionEndDateTime",
"ChargingStartDateTime",
"ChargingEndDateTime",
"Power",
"Energy",
"ConnectionHours",
"ChargingHours",
"FlexibilityHours",
"ChargingStation",
"Socket"
)
usethis::use_data(sessions_feature_names, overwrite = TRUE)
evprof::sessions_feature_names
california_ev_model <- readRDS('vignettes/california_data/california_evmodel.RDS')
usethis::use_data(california_ev_model, overwrite = TRUE)
california_ev_model
california_ev_model$models$user_profiles[[1]]
california_ev_model$models$user_profiles[[1]]$connection_models
california_ev_model$models$user_profiles[[1]]$energy_models
california_ev_model$models$user_profiles[[1]]$energy_models[[1]]$energy_models
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
california_ev_model$models$user_profiles[[1]]$connection_models
california_ev_model$models$user_profiles
visit_models <- california_ev_model$models$user_profiles[[1]]
visit_models$connection_models
visit_models$energy_models
california_ev_model$models
workday_model <- california_ev_model$models$user_profiles[[1]]
workday_model
workday_model
worktime_model <- workday_model[2, ]
worktime_model
worktime_model$connection_models
worktime_model
print_connection_models_table(worktime_model)
get_connection_models
worktime_model$connection_models[[1]]
workday_model
print_connection_models_table(worktime_model$connection_models[[1]], label = "tab:gmm", caption = "Worktime-workday Gaussian Models", full_width = FALSE)
print_connection_models_table
print_connection_models_table(workday_model, label = "tab:gmm", caption = "Worktime-workday Gaussian Models", full_width = FALSE)
print_energy_models_table(workday_model, label = "tab:gmm", caption = "Worktime connection Gaussian Models", full_width = FALSE)
print_user_profile_energy_models_table(workday_model, label = "tab:gmm", caption = "Worktime connection Gaussian Models", full_width = FALSE)
worktime_model$energy_models
print_user_profile_energy_models_table(worktime_model$energy_models, label = "tab:energy", caption = "Worktime energy Gaussian Models", full_width = FALSE)
print_user_profile_energy_models_table(worktime_model$energy_models[[1]], label = "tab:energy", caption = "Worktime energy Gaussian Models", full_width = FALSE)
print_connection_models_table(worktime_model, label = "tab:connection", caption = "Worktime connection Gaussian Models", full_width = FALSE)
worktime_model$energy_models[[1]]
worktime_model$energy_models[[1]]$energy_models
usethis::use_spell_check()
devtools::check()
devtools::check_rhub()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(evprof)
pkgdown::build_site()
pkgdown::build_article("sessions-format")
pkgdown::build_site()
pkgdown::build_article("sessions-format")
pkgdown::build_article("sessions-format")
pkgdown::build_article("sessions-format")
pkgdown::build_article("sessions-format")
devtools::release()
devtools::check_win_devel()
devtools::release()
devtools::release()
usethis::use_revdep()
revdepcheck::revdep_check(num_workers = 4)
install.packages('revdepcheck')
devtools::install_github('r-lib/revdepcheck')
revdepcheck::revdep_check(num_workers = 4)
library(evprof)
revdepcheck::revdep_check(num_workers = 4)
usethis::use_revdep()
revdepcheck::revdep_check(num_workers = 4)
install.packages(c('testthat', 'covr'))
usethis::use_testthat()
usethis::use_test()
library(testthat)        # load testthat package
library(evprof)       # load our package
evprof::california_ev_model
# Extract connection and energy models from the example `evmodel` included in the package
ev_model <- evprof::california_ev_model
ev_model$models$user_profiles
library(purrr)
connection_GMM <- map(ev_model$models$user_profiles, ~ .x$connection_models)
connection_GMM
library(evsim)
library(dplyr)
sessions <- tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min"),
Session = paste0("S", row_number())
)
library(lubridate)
sessions <- tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min"),
Session = paste0("S", row_number())
)
seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min")
sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5))
sample(c(3.7, 7.4, 11), 10, replace = T, prob =c(0.2, 0.3, 0.5))
tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min"),
ConnectionEndDateTime = ConnectionStartDateTime + hours(abs(rnorm(nrow(.), 10, 3))),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min")
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + hours(abs(rnorm(nrow(.), 10, 3))),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
hours(abs(round(rnorm(10, 10, 3))))
sessions <- tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min")
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + hours(abs(round(rnorm(nrow(.), 10, 3)))),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions
sessions_outliers <- detect_outliers(sessions, noise_th = 2, log = TRUE)
sessions <- tibble(
ConnectionStartDateTime = seq.POSIXt(dmy_hm("01/01/2023 09:00"), dmy_hm("02/01/2023 04:00"), by = "15 min")
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + hours(abs(round(rnorm(nrow(.), 10, 3)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions_outliers <- detect_outliers(sessions, noise_th = 2, log = TRUE)
sessions_outliers <- detect_outliers(sessions, noise_th = 0.1, log = TRUE)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + hours(abs(round(rnorm(100, 9, 1))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + hours(abs(round(rnorm(nrow(.), 10, 3)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions_outliers <- detect_outliers(sessions, noise_th = 1, log = TRUE)
plot_points(sessions)
# Simulating 100 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(100, 9*60, 1))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 3)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
plot_points(sessions)
my_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(100, 9*60, 1))))
dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(100, 9*60, 1))))
rnorm(100, 9*60, 1)
rnorm(100, 9*60, 1)/60
minutes(abs(round(rnorm(100, 9*60, 60))))
abs(round(rnorm(100, 9*60, 60)))/60
# Simulating 100 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(100, 9*60, 60))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 3)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
plot_points(sessions)
# Simulating 100 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(100, 9*60, 60))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
plot_points(sessions)
sessions_outliers <- detect_outliers(sessions, noise_th = 1, log = TRUE)
# Simulating 100 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(1000, 9*60, 60))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
plot_points(sessions)
# Simulating 100 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(10000, 9*60, 60))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
plot_points(sessions)
sessions_outliers <- detect_outliers(sessions, noise_th = 1, log = TRUE)
# Simulating 10000 sessions of a Worktime profile (starting around 9 with a duration of 8 hours)
sessions <- tibble(
ConnectionStartDateTime = dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(1000, 9*60, 60))))
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions_outliers <- detect_outliers(sessions, noise_th = 1, log = TRUE)
plot_points(sessions)
sessions_outliers
expect_is(sessions_outliers, "tibble")
expect_is(sessions_outliers, "tbl")
?test_that
expect_equal(sessions_outliers, "tbl")
expect_equal(is.logical(sessions_outliers$Outlier), TRUE)
expect_equal(is.logical(sessions_outliers$Outlier), TRUE)
expect_true(is.logical(sessions_outliers$Outlier))
sessions_clusters <- cluster_sessions(sessions, 3, seed = 1234, log = TRUE)
sessions_clusters
expect_equivalent(names(sessions_clusters), c("sessions", "models"))
expect_equal(names(sessions_clusters), c("sessions", "models"))
expect_true("Cluster" %in% names(sessions_clusters$sessions))
expect_true(nrow(sessions_clusters$models) == 3)
plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
plot_clusters <- plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
class(plot_clusters)
expect_equal(class(plot_clusters), "ggplot")
expect_type(plot_clusters, "ggplot")
expect_equal(class(plot_clusters), c("gg", "ggplot"))
define_clusters(sessions_clusters$models)
clusters_definition <- define_clusters(sessions_clusters$models)
clusters_definition
# Simulating 1000 sessions of two normal distributions
sessions <- tibble(
ConnectionStartDateTime = c(
dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(1000, 9*60, 60)))),
dmy_hm("01/01/2023 05:00") + minutes(abs(round(rnorm(1000, 9*60, 60))))
)
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions_outliers <- detect_outliers(sessions, noise_th = 1, log = TRUE)
sessions_clusters <- cluster_sessions(sessions, k = 3, seed = 1234, log = TRUE)
sessions_clusters <- cluster_sessions(sessions, k = 2, seed = 1234, log = TRUE)
sessions_clusters
plot_clusters <- plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
plot_clusters
# Simulating 1000 sessions of two normal distributions
set.seed(123)
sessions <- tibble(
ConnectionStartDateTime = c(
dmy_hm("01/01/2023 00:00") + minutes(abs(round(rnorm(1000, 9*60, 60)))),
dmy_hm("01/01/2023 05:00") + minutes(abs(round(rnorm(1000, 9*60, 60))))
)
) %>%
mutate(
ConnectionEndDateTime = ConnectionStartDateTime + minutes(abs(round(rnorm(nrow(.), 8*60, 60)))),
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
Energy = abs(rnorm(nrow(.), 30, 10)),
Power = sample(c(3.7, 7.4, 11), nrow(.), replace = T, prob =c(0.2, 0.3, 0.5)),
Session = paste0("S", row_number())
)
sessions_clusters <- cluster_sessions(sessions, k = 2, seed = 1234, log = TRUE)
plot_clusters <- plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
clusters_definition <- define_clusters(sessions_clusters$models)
plot_clusters
sessions_clusters <- cluster_sessions(sessions, k = 2, seed = 1234, log = TRUE)
plot_clusters
clusters_definition <- define_clusters(sessions_clusters$models)
clusters_definition
sessions_profiles <- set_profiles(sessions_clusters$sessions, clusters_definition = clusters_definition)
sessions_profiles <- set_profiles(sessions_clusters$sessions, cluster_definition = clusters_definition)
sessions_clusters$sessions
sessions_profiles <- set_profiles(list(sessions_clusters$sessions), list(clusters_definition))
clusters_definition <- define_clusters(sessions_clusters$models, profile_names = c("Morning", "Afternoon"))
clusters_definition
sessions_profiles <- set_profiles(list(sessions_clusters$sessions), list(clusters_definition))
sessions_profiles
.Primitive("class")
class(sessions_profiles)
expect_true(is.data.frame(sessions_profiles))
connection_GMM <- get_connection_models(list(sessions_clusters$sessions), list(clusters_definition))
connection_GMM <- get_connection_models(list(sessions_clusters), list(clusters_definition))
sessions_profiles <- set_profiles(list(sessions_clusters), list(clusters_definition))
connection_GMM <- get_connection_models(list(sessions_clusters), list(clusters_definition))
connection_GMM
?expect_type
expect_type(connection_GMM, "data.frame")
library(evprof)
library(testthat)        # load testthat package
library(evprof)       # load our package
library(dplyr)
library(lubridate)
library(purrr)
# Get the example `evmodel` included in the package
ev_model <- evprof::california_ev_model
plot_bivarGMM
plot_clusters <- plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
plot_clusters
library(ggplot2)
connection_GMM
expect_true(c("profile", "ratio", "connection_models") %in% names(connection_GMM))
expect_equal(c("profile", "ratio", "connection_models") %in% names(connection_GMM))
expect_true(c("profile", "ratio", "connection_models") == names(connection_GMM))
c("profile", "ratio", "connection_models") == names(connection_GMM)
expect_true(all.equal(c("profile", "ratio", "connection_models"), names(connection_GMM)))
connection_GMM$connection_models[[1]]
expect_true(all.equal(c("mu", "sigma", "ratio"), names(connection_GMM$connection_models[[1]])))
energy_GMM <- get_energy_models(sessions_profiles, log = FALSE)
energy_GMM
energy_GMM$energy_models[[1]]
expect_true(all.equal(c("charging_rate", "energy_models", "mclust"), names(energy_GMM$energy_models[[1]])))
expect_true(all.equal(c("mu", "sigma", "ratio"), names(energy_GMM$energy_models[[1]]$energy_models[[1]])))
names(energy_GMM$energy_models[[1]]$energy_models[[1]]))
names(energy_GMM$energy_models[[1]]$energy_models[[1]]))
names(energy_GMM$energy_models[[1]]$energy_models[[1]])))))
energy_GMM$energy_models[[1]]$energy_models[[1]]
energy_GMM <- get_energy_models(sessions_profiles, log = TRUE)
energy_GMM
energy_GMM$energy_models[[1]]
energy_GMM <- get_energy_models(sessions_profiles, log = TRUE, by_power = TRUE)
energy_GMM$energy_models[[1]]
usethis::use_github_action("test-coverage")
covr::codecov(token = "83649f4f-6b2b-4b3a-b51c-fe90ad916636")

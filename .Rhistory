#'
#' @importFrom purrr pmap_chr
my_print_connection_models_table <- function(GMM, label, caption, full_width, path = NULL) {
if (is.null(path)) {
latex_table <- paste(
# sep = "\n",
paste0("\begin{table", ifelse(full_width, "*", ""), "}"),
"\resizebox{\linewidth}{!} {",
latex_code <- my_print_connection_models_table(worktime_model, label = "tab:connection", caption = "Worktime connection Gaussian Models", full_width = FALSE)
#' @param label character, e.g. "tab:gmm"
#' @param caption character, table caption
#' @param full_width logical, if true the "*" will be added next to the "table" tag
#' @param path character, file path to write the latex table to. Is must have ".tex" extension.
#' If it is NULL, then the character string is returned instead of writing a file.
#'
#' @return character, LaTeX code
#' @export
#'
#' @importFrom purrr pmap_chr
my_print_connection_models_table <- function(GMM, label, caption, full_width, path = NULL) {
if (is.null(path)) {
latex_table <- paste(
# sep = "\n",
paste0("\begin{table", ifelse(full_width, "*", ""), "}"),
"\resizebox{\linewidth}{!} {",
#' @param label character, e.g. "tab:gmm"
#' @param caption character, table caption
#' @param full_width logical, if true the "*" will be added next to the "table" tag
#' @param path character, file path to write the latex table to. Is must have ".tex" extension.
#' If it is NULL, then the character string is returned instead of writing a file.
#'
#' @return character, LaTeX code
#' @export
#'
#' @importFrom purrr pmap_chr
my_print_connection_models_table <- function(GMM, label, caption, full_width, path = NULL) {
if (is.null(path)) {
latex_table <- paste(
# sep = "\n",
paste0("\begin{table", ifelse(full_width, "*", ""), "}"),
"\resizebox{\\linewidth}{!} {",
"\begin{tabular}{l|c|c|c}",
"\hline",
latex_code <- my_print_connection_models_table(worktime_model, label = "tab:connection", caption = "Worktime connection Gaussian Models", full_width = FALSE)
latex_code <- print_connection_models_table(worktime_model, label = "tab:connection", caption = "Worktime connection Gaussian Models", full_width = FALSE)
latex_code
writeLines(latex_code, "t.tex")
cat("t.tex")
?cat
cat(file = "t.tex")
readLines("t.tex")
readLines(file ="t.tex")
readr::read_lines("t.tex")
readr::write_lines(latex_code, "t.tex")
readr::read_lines("t.tex")
tibble(a = (1, 2, 3)) %>% knitr::kable()
tibble(a = c(1, 2, 3)) %>% knitr::kable()
install.packages('kableExtra')
pkgdown::build_article("evmodel")
library(evsim)
evmodel <- california_ev_model
evmodel
evmodel_lst <- list(
metadata = evmodel$metadata,
models = evmodel$models
)
library(jsonlite)
ev_models_json <- toJSON(evmodel_lst)
ev_models_json
ev_models_json %>% readr::write_lines("model_json.json")
library(dplyr)
ev_models_json %>% readr::write_lines("model_json.json")
write(ev_models_json, "model_json2.json")
file <- "model_json2.json"
fromJSON(file)
json_model_lst <- fromJSON(file)
json_model_lst$metadata
json_model_lst$models
json_model_lst$models %>% as_tibble()
json_model_lst
class(json_model_lst) <- "evmodel"
json_model_lst
json_model_lst$metadata
json_model_lst$models
json_model_lst$models <- as_tibble(json_model_lst$models)
json_model_lst$models
json_model_lst$models$user_profiles
json_model_lst$models$user_profiles <- map(
json_model_lst$models$user_profiles, as_tibble
)
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles, as_tibble
)
json_model_lst$models$user_profiles
?tidy_legacy
models_df <- json_model_lst$models
models_df
user_models_df <- models_df$user_profiles[[1]]
user_models_df
user_models_df
tidy_models <- function(models_df_lst) {
purrr::map(
models_df_lst, as_tibble
)
}
json_model_lst <- jsonlite::fromJSON(file)
class(json_model_lst) <- "evmodel"
json_model_lst$models <- dplyr::as_tibble(json_model_lst$models)
models_df$user_profiles <- purrr::map(
models_df$user_profiles,
~ .x %>%
mutate(
connection_models = tidy_models(connection_models),
energy_models = tidy_models(energy_models)
)
)
json_model_lst$models
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles,
~ .x %>%
mutate(
connection_models = tidy_models(connection_models),
energy_models = tidy_models(energy_models)
)
)
json_model_lst$models
json_model_lst$models$user_profiles[[1]]
json_model_lst$models$user_profiles[[1]] %>% as_tibble()
user_models_df
user_models_df$connection_models <- purrr::map(
user_models_df$connection_models, as_tibble
)
user_models_df
user_models_df$energy_models <- purrr::map(
user_models_df$energy_models, as_tibble
)
user_models_df
user_models_df$connection_models
user_models_df$energy_models
df_to_tbl <- function(df) {
purrr::map(df, as_tibble)
}
user_models_df$energy_models
user_models_df$energy_models$energy_models
user_models_df$energy_models
df_to_tbl(user_models_df$connection_models)
df_to_tbl(user_models_df$energy_models)
user_models_df$energy_models
user_models_df$energy_models <- map(
.x %>%
as_tibble() %>%
mutate(energy_models = map(energy_models, df_to_tbl))
)
user_models_df$energy_models <- purrr:map(
.x %>%
as_tibble() %>%
mutate(energy_models = map(energy_models, df_to_tbl))
)
user_models_df$energy_models <- purrr::map(
.x %>%
as_tibble() %>%
mutate(energy_models = map(energy_models, df_to_tbl))
)
user_models_df$energy_models <- purrr::map(
~ .x %>%
as_tibble() %>%
mutate(energy_models = map(energy_models, df_to_tbl))
)
user_models_df$energy_models <- purrr::map(
user_models_df$energy_models,
~ .x %>%
as_tibble() %>%
mutate(energy_models = map(energy_models, df_to_tbl))
)
user_models_df$energy_models <- purrr::map(
user_models_df$energy_models,
~ .x %>%
as_tibble() %>%
mutate(energy_models = purrr::map(energy_models, df_to_tbl))
)
user_models_df$energy_models
user_models_df$energy_models[[1]]
user_models_df$energy_models[[1]]$energy_models
lst_df_to_tbl <- function(df_lst) {
purrr::map(df_lst, as_tibble)
}
user_models_df <- json_model_lst$models$user_profiles[[1]]
user_models_df
user_models_df$connection_models <- lst_df_to_tbl(user_models_df$connection_models)
user_models_df
user_models_df <- as_tibble(user_models_df)
user_models_df
user_models_df <- json_model_lst$models$user_profiles[[1]]
user_models_df
user_models_df <- as_tibble(user_models_df)
user_models_df
user_models_df$connection_models
json_model_lst$models
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles, as_tibble
)
json_model_lst
json_model_lst$models$user_profiles
json_model_lst$models$user_profiles[[1]]
json_model_lst$models$user_profiles[[1]]$energy_models
json_model_lst <- jsonlite::fromJSON(file)
class(json_model_lst) <- "evmodel"
json_model_lst$models <- dplyr::as_tibble(json_model_lst$models)
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles, as_tibble
)
json_model_lst
json_model_lst$models
json_model_lst <- jsonlite::fromJSON(file)
class(json_model_lst) <- "evmodel"
json_model_lst$models <- dplyr::as_tibble(json_model_lst$models)
json_model_lst$models
json_model_lst$models$user_profiles
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles, as_tibble
)
json_model_lst$models$user_profiles
user_models_df <- json_model_lst$models$user_profiles[[1]]
user_models_df
tidy_models <- function(user_models_df) {
user_models_df <- as_tibble(user_models_df)
user_models_df$connection_models <- lst_df_to_tbl(user_models_df$connection_models)
user_models_df$energy_models <- purrr::map(
user_models_df$energy_models,
~ .x %>%
as_tibble() %>%
mutate(energy_models = lst_df_to_tbl(energy_models))
)
user_models_df
}
json_model_lst <- jsonlite::fromJSON(file)
class(json_model_lst) <- "evmodel"
json_model_lst$models <- dplyr::as_tibble(json_model_lst$models)
json_model_lst$models$user_profiles
json_model_lst$models$user_profiles <- purrr::map(
json_model_lst$models$user_profiles, tidy_models
)
json_model_lst$models$user_profiles
json_model_lst$models$user_profiles[[1]]$energy_models
#' @param evmodel object of class `evmodel`
#' (see this [link](https://mcanigueral.github.io/evprof/articles/evmodel.html) for more information)
#' @param filename character string with the path or name of the file
#'
#' @export
#'
#' @importFrom jsonlite toJSON
#' @importFrom purrr map
#' @importFrom dplyr as_tibble
#'
read_ev_model <- function(file) {
evmodel <- jsonlite::fromJSON(file)
class(evmodel) <- "evmodel"
evmodel$models <- dplyr::as_tibble(evmodel$models)
evmodel$models$user_profiles <- purrr::map(
evmodel$models$user_profiles, tidy_models
)
return(evmodel)
}
read_ev_model("model_json.json")
install.packages(c('plotly', 'dbscan', 'mclust'))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(evprof)
library(evprof)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
library(evsim)
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
ev_model
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
knitr::kable(head(sessions, n = 10))
plot_points(sessions, start = 6, log = F, size = 0.25)
summarise_sessions(sessions, mean) %>% knitr::kable(digits = 2)
plot_histogram_grid(sessions)
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 4, division_hour = 3)
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
plot_density_2D(sessions_divisions, by = 'wday')
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
ev_model,
n_sessions,
profiles_ratios,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
head(profiles_ratios, 10)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
ev_model,
n_sessions,
profiles_ratios,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
# Check that the charging rates distribution is correct with:
# sessions_estimated %>% get_charging_rates_distribution()
head(sessions_estimated)
sessions_estimated %>% get_charging_rates_distribution()
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_comparison_demand.RData')
save(sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
save(sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_data/arnhem_comparison_demand.RData')
usethis::use_version()
usethis::use_version()
pkgdown::build_site()
pkgdown::build_site()
save_ev_model(california_ev_model, "model_test")
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
library(dplyr)
library(purrr)
library(ggplot2)
load('arnhem_data/arnhem_sessions_divided.RData')
load('outliers.RData')
noisy_set <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- noisy_set %>%
cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log = T)
plot_points(noisy_set, size = 0.2, log = T)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
plots_list[[15]]
plots_list[[1]]
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
dbscan_params
plots_list <- pmap(
dbscan_params[1,],
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
plots_list
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params[1,],
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
plots_list[[15]]
save(plots_list, file='outliers.RData')
pkgdown::build_site()
pkgdown::build_home()

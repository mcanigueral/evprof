obj
print.evprof <- function(obj) {
cat('EV sessions model created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '.\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'  ', n, '. ', m[['model_name']], ':',
'\n     Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
m <- obj$models
m[1, 'model_name']
m[['model_name']][1]
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
m <- obj$models
for (n in 1:length(models)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][n]) == 1) m[['months']][n][1] else
paste0(m[['months']][n][1], '-', m[['months']][n][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][n]) == 1) m[['wdays']][n][1] else
paste0(m[['wdays']][n][1], '-', m[['wdays']][n][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][n][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][n]) == 1) m[['months']][n][1] else
paste0(m[['months']][n][1], '-', m[['months']][n][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][n]) == 1) m[['wdays']][n][1] else
paste0(m[['wdays']][n][1], '-', m[['wdays']][n][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][n][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
m <- obj$models
m[['months']]
n
m[['months']][n]
m[['months']][[n]]
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
m[['months']][[n]]
obj
ev_model <- readRDS('data-raw/arnhem2_log_models.rds')
knitr::opts_chunk$set(echo = TRUE)
ev_model <- readRDS('data-raw/arnhem2_log_models.rds')
obj
class(ev_model) <- "evmodel"
saveRDS(ev_model, 'data-raw/ev_model.RDS')
ev_model <- readRDS('data-raw/ev_model.RDS')
ev_model
#' `print` method for `evmodel` object class
#'
#' @param obj  `evmodel` object
#' @export
#'
print.evmodel <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
ev_model
ev_model
ev_model$models
ev_model$models$models
usethis::use_pkgdown()
usethis::use_pkgdown()
pkgdown::build_site()
install.packages(c('plyr', 'cowplot', 'dbscan', 'mclust', 'mixtools', 'ecp'))
ev_model <- readRDS('data-raw/ev_model.RDS')
usethis::use_data(ev_model, internal = TRUE)
load('R/sysdata.rda')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
devtools::load_all()
ev_model
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?base::print
#' `print` method for `evmodel` object class
#'
#' @param x  `evmodel` object
#' @param ... further arguments passed to or from other methods.
#'
#' @export
#'
print.evmodel <- function(x, ...) {
m <- x$models
cat('EV sessions model of class "evprof", created on', as.character(x$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (x$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (x$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
ev_model
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
vignette('evmodel', package = 'evprof')
vignette('evmodel.R', package = 'evprof')
pkgdown::build_site()
library(dplyr)
t <- tibble(a=c(1, 2), b = c(2, 3), c = c(4, 5))
t
t[1, ]
t[1, ] %>% as_tibble()
t[1, ] %>% as.list()
l <- t[1, ] %>% as.list()
l$a
## code to prepare `sessions` dataset goes here
library(dplyr)
library(lubridate)
sessions <- readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9)
ev_model <- readRDS('data-raw/evmodel.RDS')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
pkgdown::build_site()
## code to prepare `sessions` dataset goes here
library(dplyr)
library(lubridate)
sessions <- readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9)
ev_model <- readRDS('data-raw/evmodel.RDS')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
load('arnhem_data/arnhem_sessions_divided.RData')
noisy_set <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2, log = T)
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- noisy_set %>%
cut_sessions(connection_start_min = 1.5, connection_start_max = 2.5, log=T)
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- noisy_set %>%
cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log = T)
plot_points(noisy_set, size = 0.2, log = T)
.MinPts <- c(10, 25, 50, 100)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
save(plots_list, file='outliers.RData')
ggsave(
filename = 'my_noise_detection.pdf',
plot = cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
),
width = 500, height = 250, units = "mm"
)
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
ggsave(
filename = 'my_noise_detection.pdf',
plot = cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
),
width = 500, height = 250, units = "mm"
)
plots_list[[15]]
pkgdown::build_site()
pkgdown::build_site()
source('~/Desktop/PROJECTS/R PACKAGES/evprof/vignettes/arnhem_data/arnhem_sessions.R', echo=TRUE)
source('~/Desktop/PROJECTS/R PACKAGES/evprof/vignettes/arnhem_data/arnhem_sessions.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
# library(evprof)
devtools::load_all()
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.time = 6
)
# Data
load('arnhem_data/arnhem_sessions_divided.RData')
load('arnhem_data/arnhem_sessions_clean.RData')
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
source('~/Desktop/PROJECTS/R PACKAGES/evprof/vignettes/arnhem_data/arnhem_sessions.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
# library(evprof)
devtools::load_all()
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.time = 6
)
# # Data
# load('arnhem_data/arnhem_sessions_divided.RData')
# load('arnhem_data/arnhem_sessions_clean.RData')
# load('arnhem_data/arnhem_sessions_profiles.RData')
# load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:4, 5, 6, 7))
sessions_divided <- sessions_divisions %>%
filter(Disconnection %in% c("1", "2")) %>%
mutate(
Disconnection = plyr::mapvalues(Disconnection, c("1", "2"), c("City", "Home")),
Disconnection = factor(Disconnection, levels = c("City", "Home")),
Timecycle = plyr::mapvalues(Timecycle, c("1", "2", "3", "4"), c("Workday", "Friday", "Saturday", "Sunday")),
Timecycle = factor(Timecycle, levels = c("Workday", "Friday", "Saturday", "Sunday"))
)
head(sessions_divided)
save(sessions, sessions_divisions, sessions_divided, file = 'arnhem_sessions_divided.RData')
pkgdown::build_site()
# Data
load('arnhem_data/arnhem_sessions_divided.RData')
# library(evprof)
devtools::load_all()
sessions
library(evprof)
sessions
pkgdown::build_site()
# Data
load('arnhem_data/arnhem_sessions_clean.RData')
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.time = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_divided.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
print(sessions)
print(sessions, n=5)
head(sessions)
knitr::kable(head(sessions))
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
load("~/Desktop/PROJECTS/R PACKAGES/evprof/vignettes/arnhem_data/arnhem_sessions_divided.RData")
save(sessions, file='arnhem_sessions.RData')
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
remotes::install_github('mcanigueral/dutils')
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(evprof)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.time = 6
)
# # Data
# load('arnhem_data/arnhem_sessions_profiles.RData')
# load('arnhem_data/arnhem_sessions_divided.RData')
# load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
source('~/Desktop/PROJECTS/R PACKAGES/evprof/vignettes/arnhem_data/arnhem_sessions.R', echo=TRUE)
sessions <- sessions %>%
# Rename existing variables
rename(
ConnectionStartDateTime = StartTime,
ConnectionEndDateTime = EndTime,
Energy = EnergyCharged,
ChargingHours = ChargingTime
) %>%
# Adapt datetime variables to timezone
mutate(
ConnectionStartDateTime = lubridate::with_tz(ConnectionStartDateTime, tzone = getOption("evprof.tzone")),
ConnectionEndDateTime = lubridate::with_tz(ConnectionEndDateTime, tzone = getOption("evprof.tzone"))
) %>%
# Add missing features
mutate(
ConnectionHours = as.numeric(ConnectionEndDateTime - ConnectionStartDateTime, units = "hours"),
ChargingStartDateTime = ConnectionStartDateTime,
ChargingEndDateTime = ChargingStartDateTime + evprof:::convert_time_num_to_period(ChargingHours),
Power = Energy/ChargingHours,
FlexibilityHours = ConnectionHours - ChargingHours
) %>%
# Select only the standard features
select(c(evprof::sessions_feature_names, "ChargingPoint")) %>%
# Filter sessions with desired values
filter(
Energy > 0,
ConnectionHours > 0,
ChargingHours > 0,
ConnectionHours >= 0.90*ChargingHours, # Factor applied to avoid false inequality from manual calculations
ConnectionHours < 100,
ConnectionHours > 0.25,
Power < 30
) %>%
# Drop NA values in any of the variables
drop_na() %>%
distinct()
plot_points(sessions, start = 6, log = F, size = 0.25)
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:4, 5, 6, 7))

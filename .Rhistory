"Pillow",
"Commuters"
),
log = T
)
sunday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
user_profiles <- unique(sessions_profiles$Profile)
sessions_profiles <- sessions_profiles %>%
mutate(Profile = factor(Profile, levels = user_profiles))
classification_profiles_plot <-
plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(vars(Timecycle)) +
guides(colour = guide_legend(override.aes = list(size=2)))
classification_profiles_plot
save.image('arnhem_data/arnhem_sessions_profiles.RData')
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 4, division_hour = 3)
sessions_energy_models <- sessions_profiles %>%
filter(
lubridate::year(ConnectionStartDateTime) == 2020,
lubridate::month(ConnectionStartDateTime) < 3
)
# Build the models
workday_connection_models <- get_connection_models(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles)
)
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles),
workday_connection_models[c("profile", "ratio")]
)
# Build the models
workday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = TRUE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
workday_energy_models_plots
# Build the models
friday_connection_models <- get_connection_models(
list(friday_city_GMM, friday_home_GMM),
list(friday_city_clusters_profiles, friday_home_clusters_profiles)
)
# Plot the bivariate GMM
friday_connection_models_plot <- plot_model_clusters(
list(friday_city_GMM, friday_home_GMM),
list(friday_city_clusters_profiles, friday_home_clusters_profiles),
friday_connection_models[c("profile", "ratio")]
)
# Build the models
friday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Build the models
friday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(
log = TRUE,
by_power = TRUE
)
# Plot the univariate GMM
friday_energy_models_plots <- plot_energy_models(friday_energy_models)
# Build the models
saturday_connection_models <- get_connection_models(
list(saturday_city_GMM, saturday_home_GMM),
list(saturday_city_clusters_profiles, saturday_home_clusters_profiles)
)
# Plot the bivariate GMM
saturday_connection_models_plot <- plot_model_clusters(
list(saturday_city_GMM, saturday_home_GMM),
list(saturday_city_clusters_profiles, saturday_home_clusters_profiles),
saturday_connection_models[c("profile", "ratio")]
)
# Build the models
saturday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(
log = TRUE,
by_power = TRUE
)
# Plot the univariate GMM
saturday_energy_models_plots <- plot_energy_models(saturday_energy_models)
# Build the models
sunday_connection_models <- get_connection_models(
list(sunday_city_GMM, sunday_home_GMM),
list(sunday_city_clusters_profiles, sunday_home_clusters_profiles)
)
# Plot the bivariate GMM
sunday_connection_models_plot <- plot_model_clusters(
list(sunday_city_GMM, sunday_home_GMM),
list(sunday_city_clusters_profiles, sunday_home_clusters_profiles),
sunday_connection_models[c("profile", "ratio")]
)
# Build the models
sunday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(
log = TRUE,
by_power = TRUE
)
# Plot the univariate GMM
sunday_energy_models_plots <- plot_energy_models(sunday_energy_models)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, file = "arnhem_data/evmodel_arnhem", fileext = ".RDS")
save(
workday_connection_models, workday_energy_models, friday_connection_models, friday_energy_models,
saturday_connection_models, saturday_energy_models, sunday_connection_models, sunday_energy_models,
ev_model,
file = 'arnhem_data/arnhem_sessions_models_power.RData'
)
library(evsim)
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
knitr::kable(head(sessions, n = 10))
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
save(my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_comparison_demand.RData')
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_article("evprof")
pkgdown::preview_page('articles/evprof.html')
classification_profiles_plot <-
plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
guides(colour = guide_legend(override.aes = list(size=2)))
classification_profiles_plot
usethis::use_version()
usethis::use_news_md()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
load('california_data/california_sessions_divided.RData')
load('california_data/california_sessions_clean.RData')
load('california_data/california_GMM.RData')
load('california_data/california_sessions_profiles.RData')
load('california_data/california_sessions_models.RData')
load('california_data/california_comparison_demand.RData')
options(
evprof.tzone = "America/Los_Angeles",
evprof.start.hour = 3
)
plot_points(sessions, start = 3) +
aes(color = acn_set) +
scale_color_manual(values = c("1" = "red", "2" = "blue", "3" = "darkgreen"), labels = c('JPL', 'Caltech', 'Offices')) +
labs(color = 'ACN data set')
summarise_sessions(sessions, mean) %>% knitr::kable(digits = 2)
plot_points(sessions, size = 0.25) %>% plot_division_lines(n_lines = 1, division_hour = 4)
plot_points(sessions, size = 0.25) %>% plot_division_lines(n_lines = 1, division_hour = 6)
sessions$ConnectionStartDateTime[1]
plot_points(sessions, size = 0.25) %>% plot_division_lines(n_lines = 1, division_hour = 8)
plot_points(sessions, size = 0.25) %>% plot_division_lines(n_lines = 1, division_hour = 10)
plot_points(sessions, size = 0.25) %>% plot_division_lines(n_lines = 1, division_hour = 12)
sessions_divisions <- sessions %>% divide_by_disconnection(days = 1:2, division_hour = 4)
sessions_divisions <- sessions %>% divide_by_disconnection(days = 1:2, division_hour = 4)
sessions_divisions <- sessions %>% divide_by_disconnection(days = 1:2, division_hour = 12)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
sessions_divisions <- sessions %>% divide_by_disconnection(days = 1:2, division_hour = 12)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
sessions_divisions %>%
drop_na(Disconnection) %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
plot_density_2D(sessions_divisions, bins = 20, by = 'wday')
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))
sessions_divisions %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Time-cycle", "Number of sessions", "Percentage of sessions (%)"))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
save(sessions, sessions_divisions, sessions_divided, file = 'california_data/california_sessions_divided.RData')
sessions_workday <- sessions_divided %>% filter(Timecycle == "Workday")
sessions_weekend <- sessions_divided %>% filter(Timecycle == "Weekend")
save(sessions_workday, sessions_weekend, file = 'california_data/california_sessions_clean.RData')
plot_density_3D(sessions_workday, log = T)
sessions_divisions %>% filter(is.na(Disconnection))
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:2, division_hour = 12) %>%
drop_na(Disconnection)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
save(sessions, sessions_divisions, sessions_divided, file = 'california_data/california_sessions_divided.RData')
sessions_workday <- sessions_divided %>% filter(Timecycle == "Workday")
sessions_weekend <- sessions_divided %>% filter(Timecycle == "Weekend")
save(sessions_workday, sessions_weekend, file = 'california_data/california_sessions_clean.RData')
workday_GMM <- cluster_sessions(sessions_workday, k = 7, seed = 826, log = T)
bivarGMM_plots[[1]]
weekend_GMM <- cluster_sessions(sessions_weekend, k = 4, seed = 163, log = T)
bivarGMM_plots <- purrr::map2(
list(workday_GMM$sessions, weekend_GMM$sessions),
list(workday_GMM$models, weekend_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
bivarGMM_plots <- purrr::map2(
list(workday_GMM$sessions, weekend_GMM$sessions),
list(workday_GMM$models, weekend_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
bivarGMM_plots
save(workday_GMM, weekend_GMM, file = 'california_data/california_GMM.RData')
bivarGMM_plots[[1]]
# Print centroids in natural scale
define_clusters(workday_GMM$models, log = T)
bivarGMM_plots[[1]]
# Define clusters
workday_clusters_profiles <- define_clusters(
models = workday_GMM$models,
interpretations = c(
"Full-day workers",
"Full-day workers",
"Evening visitors",
"Full-day workers",
"Afternoon visitors",
"Morning visitors",
"Visits around the day"
),
profile_names = c(
"Worktime",
"Worktime",
"Visit",
"Worktime",
"Visit",
"Visit",
"Visit"
),
log = T
)
workday_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
bivarGMM_plots[[2]]
# Define clusters
weekend_clusters_profiles <- define_clusters(
models = weekend_GMM$models,
interpretations = c(
"Full-day visitors",
"Morning visitors",
"Afternoon visitors",
"Evening visits"
),
profile_names = c(
"Visit",
"Visit",
"Visit",
"Visit"
),
log = T
)
weekend_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(workday_GMM$sessions, weekend_GMM$sessions),
clusters_definition = list(workday_clusters_profiles, weekend_clusters_profiles)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
save(workday_clusters_profiles, weekend_clusters_profiles, sessions_profiles, file = 'california_data/california_sessions_profiles.RData')
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(list(weekend_GMM), list(weekend_clusters_profiles), weekend_connection_models[c("profile", "ratio")])
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
weekend_energy_models_plots <- plot_energy_models(weekend_energy_models)
weekend_energy_models_plots
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel', fileext = ".RDS")
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
sessions_estimated <- simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
pkgdown::build_article("california")
pkgdown::preview_page('articles/california.html')

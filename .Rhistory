library(dutils)
load('california_data/california_sessions_divided.RData')
load('california_data/california_GMM.RData')
# load('california_data/california_sessions_profiles.RData')
# load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
options(
evprof.tzone = "America/Los_Angeles",
evprof.start.hour = 3
)
sessions <- evprof::california_ev_sessions
plot_points(sessions, start = 3) +
aes(color = Location) +
scale_color_manual(values = c("jpl" = "red", "caltech" = "blue", "office" = "darkgreen"), labels = c('JPL', 'Caltech', 'Offices')) +
labs(color = 'ACN data set')
bivarGMM_plots <- purrr::map2(
list(workday_GMM$sessions, weekend_GMM$sessions),
list(workday_GMM$models, weekend_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
bivarGMM_plots
bivarGMM_plots[[1]]
# Print centroids in natural scale
define_clusters(workday_GMM$models, log = T)
# Plot clusters
plot_points(workday_GMM$sessions, start = 3, log = FALSE, aes(color = Cluster))
# Define clusters
workday_clusters_profiles <- define_clusters(
models = workday_GMM$models,
interpretations = c(
"Full-day workers",
"Full-day workers",
"Evening visitors",
"Full-day workers",
"Afternoon visitors",
"Morning visitors",
"Visits around the day"
),
profile_names = c(
"Worktime",
"Worktime",
"Visit",
"Worktime",
"Visit",
"Visit",
"Visit"
),
log = T
)
workday_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Define clusters
weekend_clusters_profiles <- define_clusters(
models = weekend_GMM$models,
interpretations = c(
"Full-day visitors",
"Morning visitors",
"Afternoon visitors",
"Evening visits"
),
profile_names = c(
"Visit",
"Visit",
"Visit",
"Visit"
),
log = T
)
weekend_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(workday_GMM$sessions, weekend_GMM$sessions),
clusters_definition = list(workday_clusters_profiles, weekend_clusters_profiles)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
save(workday_clusters_profiles, weekend_clusters_profiles, sessions_profiles, file = 'california_data/california_sessions_profiles.RData')
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
workday_connection_models_plot
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
weekend_energy_models_plots <- plot_energy_models(weekend_energy_models)
weekend_energy_models_plots
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel.json')
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
sessions_estimated <- simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
profiles_ratios
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
head(profiles_ratios, 10)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
print(profiles_ratios)
sessions_estimated <- simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
sessions_estimated %>% get_charging_rates_distribution()
charging_rates
head(sessions_estimated)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
ev_model
save_ev_model(ev_model, filename = "arnhem_data/evmodel_arnhem.json")
library(evsim)
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
head(profiles_ratios, 10)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_data/arnhem_comparison_demand.RData')
evprof::read_ev_model('vignettes/california_data/california_evmodel.json')
california_ev_model <- evprof::read_ev_model('vignettes/california_data/california_evmodel.json')
usethis::use_data(california_ev_model, overwrite = TRUE)
plot_density_2D(california_ev_sessions)
plot_density_2D(california_ev_sessions, by = "wday")
library(evprof)
plot_density_2D(california_ev_sessions)
plot_density_2D(california_ev_sessions, by = "wday")
plot_density_2D(california_ev_sessions, by = "wday", start = 3)
plot_density_2D(california_ev_sessions, by = "month")
plot_density_2D(california_ev_sessions, by = "wday", start = 3, bins = 20)
plot_density_2D(california_ev_sessions, by = "wday", start = 3, bins = 5)
plot_density_2D(california_ev_sessions, by = "month", start = 3, log = TRUE)
plot_density_2D(california_ev_sessions, by = "month", start = 2, log = TRUE)
plot_density_2D(california_ev_sessions, by = "month", start = 0, log = TRUE)
plot_density_3D(california_ev_sessions)
plot_density_3D(california_ev_sessions, start = 3)
summarise_sessions(california_ev_sessions, mean)
plot_histogram(california_ev_sessions, "Power", binwidth = 2)
plot_histogram_grid(california_ev_sessions, vars = c("Energy", "Power"))
plot_histogram_grid(california_ev_sessions)
get_charging_rates_distribution(california_ev_sessions)
get_charging_rates_distribution(california_ev_sessions, unit="month")
get_daily_n_sessions(california_ev_sessions)
get_daily_n_sessions(california_ev_sessions, 2018)
get_daily_n_sessions(california_ev_sessions, 2018, 5, 1)
#' get_daily_n_sessions(
#'   california_ev_sessions,
#'   year = 2018, months = c(5, 6), wdays = 1
#' )
get_daily_n_sessions(
california_ev_sessions,
year = 2018, months = c(5, 6), wdays = 1
)
get_daily_avg_n_sessions(
california_ev_sessions,
year = 2018, months = c(5, 6), wdays = 1
)
cut_sessions(california_ev_sessions, connection_hours_min = 10, connection_start_max = 24)
plot_points(california_ev_sessions, start = 3)
sessions_clean <- cut_sessions(
california_ev_sessions, connection_start_max = 20
)
plot_points(sessions_clean, start = 3)
#' @returns session dataframe
#' @export
#'
#' @importFrom dplyr between
#'
#' @examples
#' # Localize the outlying sessions above a certain threshold
#' plot_points(california_ev_sessions, start = 3)
#'
#' # For example sessions longer than 20 hours are considered outliers
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20
)
plot_points(sessions_clean, start = 3)
#' @export
#'
#' @importFrom dplyr between
#'
#' @examples
#' # Localize the outlying sessions above a certain threshold
#' plot_points(california_ev_sessions, start = 3)
#'
#' # For example sessions that start before 5 AM or that are
#' longer than 20 hours are considered outliers
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20, connection_start_min = 5
)
plot_points(sessions_clean, start = 3)
#' @export
#'
#' @importFrom dplyr between
#'
#' @examples
#' # Localize the outlying sessions above a certain threshold
#' plot_points(california_ev_sessions, start = 3)
#'
#' # For example sessions that start before 5 AM or that are
#' longer than 20 hours are considered outliers
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20, connection_start_min = 5
)
plot_points(sessions_clean, start = 3)
#' @export
#'
#' @importFrom dplyr between
#'
#' @examples
#' # Localize the outlying sessions above a certain threshold
#' plot_points(california_ev_sessions, start = 3)
#'
#' # For example sessions that start before 5 AM or that are
#' longer than 20 hours are considered outliers
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20, connection_start_min = 7
)
plot_points(sessions_clean, start = 3)
library(evprof)
plot_points(california_ev_sessions, start = 3)
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20, connection_start_min = 5
)
plot_points(sessions_clean, start = 3)
sessions_clean <- cut_sessions(
california_ev_sessions, connection_hours_max = 20, connection_start_min = 5, start = 3
)
plot_points(sessions_clean, start = 3)
plot_kNNdist(california_ev_sessions, start = 3)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
plot_points(sessions, log = F, size = 0.25)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
plot_points(sessions, log = F, size = 0.25)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
plot_points(sessions, log = F, size = 0.25)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 0
)
plot_points(sessions, log = F, size = 0.25)
plot_points(sessions, start = 6, log = F, size = 0.25)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
# evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 0
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
plot_points(sessions, size = 0.25)
plot_points(sessions, start = 6, size = 0.25)
library(evprof)
detect_outliers(california_ev_sessions)
sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5)
sessions_outliers
sessions_outliers %>% plot_outliers()
plot_outliers(sessions_outliers)
vignette("sessions-format")
?plot_points
devtools::document()
library(evprof)
?plot_points
devtools::document()
library(evprof)
?plot_points
devtools::document()
library(evprof)
?plot_points
sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5, log = TRUE)
plot_outliers(sessions_outliers)
plot_outliers(sessions_outliers, log = TRUE)
plot_outliers(sessions_outliers)
sessions_clean <- drop_outliers(sessions_outliers)
plot_outliers(sessions_clean)
sessions_outliers <- detect_outliers(california_ev_sessions, noise_th = 5)
plot_outliers(sessions_outliers)
sessions_clean <- drop_outliers(sessions_outliers)
plot_outliers(sessions_clean)
sessions_outliers
plot_points(sessions_clean)
plot_points(california_ev_sessions) + plot_division_lines(n_lines = 1, division_hour = 12)
plot_points(california_ev_sessions) %>% plot_division_lines(n_lines = 1, division_hour = 12)
library(dplyr)
plot_points(california_ev_sessions) %>% plot_division_lines(n_lines = 1, division_hour = 12)
plot_points(california_ev_sessions) %>% plot_division_lines(n_lines = 1, division_hour = 10)
choose_k_GMM(california_ev_sessions, k = 2)
choose_k_GMM(california_ev_sessions, k = 1:4, start = 3)
choose_k_GMM(california_ev_sessions, k = 1:4)
sessions_clusters <- cluster_sessions(california_ev_sessions, k=2, seed = 1234)
plot_points(sessions_clusters) + aes(color = Cluster)
sessions_clusters
plot_points(sessions_clusters$sessions) + aes(color = Cluster)
plot_points(sessions_clusters$sessions) + ggplot2::aes(color = Cluster)
sessions_clusters <- cluster_sessions(california_ev_sessions, k=4, seed = 1234)
names(sessions_clusters)
plot_points(sessions_clusters$sessions) + ggplot2::aes(color = Cluster)
plot_bivarGMM(sessions_clusters$models)
plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models)
plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models, log = FALSE, start = 3)
library(evprof)
plot_bivarGMM(sessions_clusters$sessions, sessions_clusters$models, log = FALSE, start = 3)
sessions_clusters <- cluster_sessions(
california_ev_sessions, k=2, seed = 1234, log = FALSE
)
plot_bivarGMM(
sessions = sessions_clusters$sessions,
bivarGMM_params = sessions_clusters$models,
log = FALSE, start = 3
)
sessions_clusters <- cluster_sessions(
california_ev_sessions, k=2, seed = 1234, log = T
)
plot_bivarGMM(
sessions = sessions_clusters$sessions,
bivarGMM_params = sessions_clusters$models,
log = T, start = 3
)
sessions_clusters$models

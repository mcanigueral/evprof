ev_model,
file = 'arnhem_data/arnhem_sessions_models.RData'
)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
devtools::load_all() # load evprof
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# load('california_data/california_sessions_divided.RData')
# load('california_data/california_GMM.RData')
# load('california_data/california_sessions_profiles.RData')
# load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
devtools::load_all() # load evprof
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# load('california_data/california_sessions_divided.RData')
# load('california_data/california_GMM.RData')
# load('california_data/california_sessions_profiles.RData')
# load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
sessions <- evprof::california_ev_sessions
options(
evprof.start.hour = 3
)
plot_points(sessions, size = 0.5)
summarise_sessions(sessions, mean) %>%
knitr::kable(digits = 2)
plot_histogram_grid(sessions)
plot_points(sessions, size = 0.25) %>%
plot_division_lines(n_lines = 1, division_hour = 6)
sessions_divisions <- sessions %>%
divide_by_disconnection(division_hour = 6) %>%
drop_na(Disconnection)
sessions_divisions %>%
group_by(Disconnection) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Disconnection day", "Number of sessions", "Percentage of sessions (%)"))
plot_density_2D(sessions_divisions, bins = 20, by = 'wday')
plot_density_2D(sessions_divisions, bins = 20, by = 'month')
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:5, 6:7))
sessions_divisions %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100) %>%
knitr::kable(digits = 2, col.names = c("Time-cycle", "Number of sessions", "Percentage of sessions (%)"))
sessions_divided <- sessions_divisions %>%
filter(Disconnection == "1") %>%
mutate(
Timecycle = plyr::mapvalues(Timecycle, c("1", "2"), c("Workday", "Weekend")),
Timecycle = factor(Timecycle, levels = c("Workday", "Weekend"))
) %>%
select(-Disconnection)
head(sessions_divided)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
plot_points(log = T, size = 0.5)
sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1, log = T) %>%
plot_points(log = T, size = 0.5)
sessions_workday_noise <- sessions_divided %>%
filter(Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 1.5, connection_hours_min = -1.5, log = T) %>%
detect_outliers(noise_th = 2, log = T, MinPts = 100)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday_noise %>%
plot_outliers(log = T, size = 0.5)
sessions_workday <- sessions_workday_noise %>%
drop_outliers()
sessions_weekend <- sessions_divided %>%
filter(Timecycle == "Weekend") %>%
cut_sessions(connection_start_min = 1.8, connection_hours_min = 0, log = TRUE)
save(
sessions_divisions, sessions_divided, sessions_workday_noise, sessions_workday, sessions_weekend,
file = 'california_data/california_sessions_divided.RData'
)
workday_GMM <- cluster_sessions(sessions_workday, k = 6, seed = 823, log = T)
weekend_GMM <- cluster_sessions(sessions_weekend, k = 2, seed = 484, log = T)
save(workday_GMM, weekend_GMM, file = 'california_data/california_GMM.RData')
bivarGMM_plots <- purrr::map2(
list(workday_GMM$sessions, weekend_GMM$sessions),
list(workday_GMM$models, weekend_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
# Define clusters
workday_clusters_profiles <- define_clusters(
models = workday_GMM$models,
interpretations = c(
"Full-day workers",
"Full-day or morning visitors",
"Evening visits",
"Full-day workers",
"Full-day workers",
"Afternoon visits"
),
profile_names = c(
"Worktime",
"Visit",
"Visit",
"Worktime",
"Worktime",
"Visit"
),
log = T
)
workday_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Define clusters
weekend_clusters_profiles <- define_clusters(
models = weekend_GMM$models,
interpretations = c(
"Morning visitors",
"Afternoon visits"
),
profile_names = c(
"Visit",
"Visit"
),
log = T
)
weekend_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(workday_GMM$sessions, weekend_GMM$sessions),
clusters_definition = list(workday_clusters_profiles, weekend_clusters_profiles)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
save(workday_clusters_profiles, weekend_clusters_profiles, sessions_profiles, file = 'california_data/california_sessions_profiles.RData')
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(
list(weekend_GMM), list(weekend_clusters_profiles),
weekend_connection_models[c("profile", "ratio")]
)
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
weekend_energy_models_plot <- plot_energy_models(weekend_energy_models, nrow = 1)
weekend_energy_models_plot
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T,
data_tz = "America/Los_Angeles"
)
ev_model
ev_model$models$user_profiles[[1]]$energy_models
save_ev_model(ev_model, 'california_data/california_evmodel.json')
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim) # install.packages('evsim')
library(dutils) # remotes::install_github('mcanigueral/dutils')
interval_mins <- 15
start_date <- dmy_hm(090920190000, tz = getOption('evprof.tzone')) # Monday
end_date <-  dmy_hm(290920190000, tz = getOption('evprof.tzone')) + days(1) # Sunday
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date - days(1), end_date))
demand <- sessions_demand %>%
evsim::get_demand(dttm_seq)
demand %>%
dutils::dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
print(profiles_ratios)
sessions_estimated <- simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
head(sessions_estimated)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
devtools::load_all() # load evprof
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
load('california_data/california_sessions_divided.RData')
load('california_data/california_GMM.RData')
load('california_data/california_sessions_profiles.RData')
load('california_data/california_sessions_models.RData')
load('california_data/california_comparison_demand.RData')
sessions_profiles
saveRDS(sessions_profiles, "california_data/california_sessions_profiles.RDS")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
devtools::load_all()
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.start.hour = 0
)
# Data
# sessions <- readRDS("arnhem_data/arnhem_sessions.RDS")
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
library(dygraphs)
library(lubridate)
library(evsim) # install.packages('evsim')
library(dutils) # remotes::install_github('mcanigueral/dutils')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
devtools::load_all()
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.start.hour = 0
)
# Data
# sessions <- readRDS("arnhem_data/arnhem_sessions.RDS")
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
# load('arnhem_data/arnhem_comparison_demand.RData')
library(dygraphs)
library(lubridate)
library(evsim) # install.packages('evsim')
library(dutils) # remotes::install_github('mcanigueral/dutils')
library(dygraphs)
library(lubridate)
library(evsim) # install.packages('evsim')
library(dutils) # remotes::install_github('mcanigueral/dutils')
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio) %>%
ungroup()
head(profiles_ratios, 10)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
evmodel = ev_model,
sessions_day = n_sessions,
user_profiles = profiles_ratios,
charging_powers = charging_rates,
dates = unique(date(dttm_seq)),
resolution = interval_mins
)
# Check that the charging rates distribution is correct with:
# sessions_estimated %>% get_charging_rates_distribution()
head(sessions_estimated)
sessions_estimated %>% get_charging_rates_distribution()
profiles_ratios
charging_rates
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
save(sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_data/arnhem_comparison_demand.RData')
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
evsim::california_ev_model$models$user_profiles[[1]]$energy_models
energy_GMM
library(testthat)        # load testthat package
library(evprof)
library(dplyr)
library(tibble)
library(lubridate)
library(purrr)
library(ggplot2)
# Get the example `evmodel` and `sessions` included in the package
ev_model <- evprof::california_ev_model
sessions <- evprof::california_ev_sessions
temp_dir <- tempdir()
sessions_clusters <- sessions %>%
head(1000) %>%
cluster_sessions(k = 2, seed = 123, log = TRUE)
clusters_definition <- define_clusters(
sessions_clusters$models,
interpretations = c("Morning sessions", "Afternoon sessions"),
profile_names = c("Morning", "Afternoon")
)
sessions_profiles <- set_profiles(list(sessions_clusters$sessions), list(clusters_definition))
energy_GMM <- get_energy_models(sessions_profiles, log = TRUE, by_power = FALSE)
expect_true(is.data.frame(energy_GMM))
energy_GMM
expect_true(all.equal(c("profile", "energy_models"), names(energy_GMM)))
expect_true(all.equal(c("charging_rate", "ratio", "energy_models", "mclust"), names(energy_GMM$energy_models[[1]])))
expect_true(all.equal(c("mu", "sigma", "ratio"), names(energy_GMM$energy_models[[1]]$energy_models[[1]])))
expect_no_error(
print_user_profile_energy_models_table(energy_GMM$energy_models[[1]], full_width = TRUE, label = "tab:en", caption = "energy GMM")
)
energy_GMM$energy_models[[1]]
usethis::use_version()
pkgdown::build_site()
library(evprof)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
evprof::california_ev_model
california_ev_model <- evprof::read_ev_model(
'vignettes/california_data/california_evmodel.json'
)
california_ev_model$models$user_profiles[[1]]$energy_models
california_ev_model <- evprof::read_ev_model(
'vignettes/california_data/california_evmodel.json'
)
usethis::use_data(california_ev_model, overwrite = TRUE)
evprof::california_ev_model
library(evprof)
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
evprof::california_ev_model
workday_model <- california_ev_model$models$user_profiles[[1]]
workday_model
worktime_model <- workday_model[2, ]
worktime_model$connection_models
worktime_model$energy_models[[1]]
worktime_model$energy_models[[1]]$energy_models[[1]]
pkgdown::build_site()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::release()
california_sessions_profiles <- readRDS("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/vignettes/california_data/california_sessions_profiles.RDS")
california_sessions_profiles
california_ev_sessions_profiles <- readRDS(
"vignettes/california_data/california_sessions_profiles.RDS"
)
california_ev_sessions_profiles
usethis::use_data(california_ev_sessions_profiles, overwrite = TRUE)
load("vignettes/california_data/california_sessions_models.RData")
california_GMM <- list(
workdays = list(
connection_models = workday_connection_models,
energy_models = workday_energy_models
),
weekends = list(
connection_models = weekend_connection_models,
energy_models = weekend_energy_models
)
)
usethis::use_data(california_GMM, overwrite = TRUE)
california_ev_sessions <- readRDS(
"vignettes/california_data/california_sessions.RDS"
)
usethis::use_data(california_ev_sessions, overwrite = TRUE)
california_ev_sessions
california_ev_model <- evprof::read_ev_model(
'vignettes/california_data/california_evmodel.json'
)
usethis::use_data(california_ev_model, overwrite = TRUE)
load("vignettes/california_data/california_sessions_models.RData")
california_GMM <- list(
connection_models = workday_connection_models,
energy_models = workday_energy_models
)
usethis::use_data(california_GMM, overwrite = TRUE)
library(evprof)
evprof::california_ev_model
evprof::california_ev_model$models$user_profiles[[1]]$energy_models
evprof::california_ev_sessions
evprof::california_ev_sessions_profiles
workdays_connection_models <- evprof::california_GMM$workdays$connection_models
workdays_connection_models
evprof::california_GMM
load("vignettes/california_data/california_sessions_models.RData")
california_GMM <- list(
connection_models = workday_connection_models,
energy_models = workday_energy_models
)
california_GMM
weekend_connection_models
weekend_energy_models
california_GMM <- list(
workdays = list(
connection_models = workday_connection_models,
energy_models = workday_energy_models
),
weekends = list(
connection_models = weekend_connection_models,
energy_models = weekend_energy_models
)
)
usethis::use_data(california_GMM, overwrite = TRUE)
evprof::california_GMM$
library(evprof)
evprof::california_GMM
workdays_connection_models <- evprof::california_GMM$workdays$connection_models
workdays_energy_models <- evprof::california_GMM$workdays$energy_models
workdays_connection_models
workdays_energy_models
weekends_connection_models <- evprof::california_GMM$weekends$connection_models
weekends_energy_models <- evprof::california_GMM$weekends$energy_models
weekends_connection_models
weekends_energy_models
pkgdown::build_site()
library(evprof)
pkgdown::build_site()

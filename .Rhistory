filter(Disconnection == "Home", Timecycle == "Workday") %>% plot_points(log =T)
sessions_workday_home <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 2.4, connection_hours_min = 2.25, log=T)
sessions_workday_home %>% plot_points(log = T)
sessions_workday_home <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Workday") %>%
cut_sessions(connection_start_min = 2.4, connection_hours_min = 2.25, connection_hours_max = 3.3, log=T)
sessions_workday_home %>% plot_points(log = T)
sessions_friday_home %>% plot_points(log = T)
essions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") %>% plot_points(log = T)
sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") %>% plot_points(log = T)
sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Saturday") %>% plot_points(log = T)
pdf('pr_data/figures/BIC/BIC_sessions_workday_home.pdf', paper = 'a4r', width = 10, height = 7)
choose_k_GMM(sessions_workday_home, k = 1:10, log = T)
dev.off()
save_clustering_iterations(sessions_workday_home, k=5, it=9, filename = "pr_data/figures/CLUSTERS/workday_home_k-5.pdf", log = T)
save_clustering_iterations(sessions_workday_home, k=6, it=9, filename = "pr_data/figures/CLUSTERS/workday_home_k-6.pdf", log = T)
save_clustering_iterations(sessions_workday_home, k=4, it=9, filename = "pr_data/figures/CLUSTERS/workday_home_k-4.pdf", log = T)
workday_home_GMM <- cluster_sessions(sessions_workday_home, k = 5, seed = 923, log = T)
bivarGMM_plots <- purrr::map2(
list(workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions),
list(workday_city_GMM$models, workday_home_GMM$models, friday_city_GMM$models, friday_home_GMM$models,
saturday_city_GMM$models, saturday_home_GMM$models, sunday_city_GMM$models, sunday_home_GMM$models),
~ plot_bivarGMM(
.x, .y, profiles_names = paste0(.y$cluster, " (", round(.y$ratio*100), "%)"), log = T, legend_nrow = 1
)
)
bivarGMM_plots[[2]]
ggsave(
filename = 'pr_data/figures/CLUSTERS/clusters_GMM.pdf',
cowplot::plot_grid(plotlist = bivarGMM_plots, nrow = 4, ncol = 2, labels = c(
"Workday city", "Workday home", "Friday city", "Friday home", "Saturday city", "Saturday home", "Sunday city", "Sunday home"
)),
width = 315, height = 445, units = "mm"
)
save(
workday_city_GMM, workday_home_GMM, friday_city_GMM, friday_home_GMM,
saturday_city_GMM, saturday_home_GMM, sunday_city_GMM, sunday_home_GMM,
bivarGMM_plots,
file = 'pr_data/pr_bivarGMM.RData'
)
bivarGMM_plots[[2]]
define_clusters(workday_home_GMM$models, log = T)
bivarGMM_plots[[2]]
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Commuters",
"Commuters"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Home",
"Home"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
ggsave(
filename = 'pr_data/figures/CLUSTERS/classification_profiles.pdf', plot = classification_profiles_plot, paper="a4r", width = 40, height = 10
)
classification_clusters_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Cluster), size = 0.3) +
facet_wrap(~ Timecycle)
ggsave(
filename = 'pr_data/figures/CLUSTERS/classification_clusters.pdf', plot = classification_clusters_plot, paper="a4r", width = 40, height = 10
)
save.image('pr_data/pr_sessions_profiles.RData')
# Build the models
workday_connection_models <- get_connection_models(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles)
)
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles),
workday_connection_models[c("profile", "ratio")]
)
workday_connection_models_plot
# Save the result
ggsave(
filename = 'pr_data/figures/MODELS/connection_workday_GMM.pdf',
plot = workday_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Save the result
ggsave(
filename = 'pr_data/figures/MODELS/energy_workday_GMM.pdf',
plot = workday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Build the models
friday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
friday_energy_models_plots <- plot_energy_models(friday_energy_models)
friday_energy_models_plots
# Save the result
ggsave(
filename = 'pr_data/figures/MODELS/energy_friday_GMM.pdf',
plot = friday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Build the models
saturday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
saturday_energy_models_plots <- plot_energy_models(saturday_energy_models)
saturday_energy_models_plots
# Save the result
ggsave(
filename = 'pr_data/figures/MODELS/energy_saturday_GMM.pdf',
plot = saturday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Build the models
sunday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
sunday_energy_models_plots <- plot_energy_models(sunday_energy_models)
sunday_energy_models_plots
# Save the result
ggsave(
filename = 'pr_data/figures/MODELS/energy_sunday_GMM.pdf',
plot = sunday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
save(
workday_connection_models, workday_energy_models, friday_connection_models, friday_energy_models,
saturday_connection_models, saturday_energy_models, sunday_connection_models, sunday_energy_models,
file = 'pr_data/pr_sessions_models.RData'
)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, file = "pr_data/pr_evmodel.RDS")
ev_config <- list()
# sessions_profiles %>%
#   filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
#   group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
#   summarise(n = n()) %>%
#   ggplot(aes(date, n, fill = time_cycle))+
#   geom_col()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
writexl::write_xlsx(ev_config, 'pr_data/ev_config.xlsx')
ev_config
ev_config <- list()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
rmarkdown::render('pr.Rmd', output_file = 'pr.html')
renv::update()
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
friday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(log = TRUE)
# Build the models
saturday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(log = TRUE)
# Build the models
sunday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(log = TRUE)
sunday_energy_models$energy_models[[1]]
sunday_energy_models$mclsut[[1]]
sunday_energy_models$mclust[[1]]
sunday_energy_models$mclust[[1]]$parameters
# Plot the univariate GMM
sunday_energy_models_plots <- plot_energy_models(sunday_energy_models)
sunday_energy_models_plots
mclust::mclustModelNames(sunday_energy_models$mclust[[1]])
sunday_energy_models$mclust[[1]]$parameters$variance$modelName
sunday_energy_models$mclust[[2]]$parameters$variance$modelName
sunday_energy_models$mclust[[2]]$parameters
mclust_obj <- sunday_energy_models$mclust[[1]]
tibble(
mu = mclust_obj$parameters$mean,
sigma = sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
tibble(
mu = mclust_obj$parameters$mean,
sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
mclust_obj <- sunday_energy_models$mclust[[2]]
tibble(
mu = mclust_obj$parameters$mean,
sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
renv::update()
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(log = TRUE)
# Build the models
friday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(log = TRUE)
# Build the models
saturday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(log = TRUE)
# Build the models
sunday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(log = TRUE)
sunday_energy_models$energy_models
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, file = "pr_data/pr_evmodel.RDS")
ev_config <- list()
# sessions_profiles %>%
#   filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
#   group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
#   summarise(n = n()) %>%
#   ggplot(aes(date, n, fill = time_cycle))+
#   geom_col()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
writexl::write_xlsx(ev_config, 'pr_data/ev_config.xlsx')
setwd('vignettes')
rmarkdown::render('pr.Rmd', output_file = 'pr.html')
bivarGMM_plots[[2]]
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Commuters",
"Commuters"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Home",
"Home"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot

)
save(
workday_connection_models, workday_energy_models, friday_connection_models, friday_energy_models,
saturday_connection_models, saturday_energy_models, sunday_connection_models, sunday_energy_models,
file = 'pr_data/pr_sessions_models.RData'
)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, file = "pr_data/pr_evmodel.RDS")
ev_config <- list()
# sessions_profiles %>%
#   filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
#   group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
#   summarise(n = n()) %>%
#   ggplot(aes(date, n, fill = time_cycle))+
#   geom_col()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
writexl::write_xlsx(ev_config, 'pr_data/ev_config.xlsx')
ev_config
ev_config <- list()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
rmarkdown::render('pr.Rmd', output_file = 'pr.html')
renv::update()
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(log = TRUE)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
friday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(log = TRUE)
# Build the models
saturday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(log = TRUE)
# Build the models
sunday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(log = TRUE)
sunday_energy_models$energy_models[[1]]
sunday_energy_models$mclsut[[1]]
sunday_energy_models$mclust[[1]]
sunday_energy_models$mclust[[1]]$parameters
# Plot the univariate GMM
sunday_energy_models_plots <- plot_energy_models(sunday_energy_models)
sunday_energy_models_plots
mclust::mclustModelNames(sunday_energy_models$mclust[[1]])
sunday_energy_models$mclust[[1]]$parameters$variance$modelName
sunday_energy_models$mclust[[2]]$parameters$variance$modelName
sunday_energy_models$mclust[[2]]$parameters
mclust_obj <- sunday_energy_models$mclust[[1]]
tibble(
mu = mclust_obj$parameters$mean,
sigma = sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
tibble(
mu = mclust_obj$parameters$mean,
sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
mclust_obj <- sunday_energy_models$mclust[[2]]
tibble(
mu = mclust_obj$parameters$mean,
sigma = sqrt(mclust_obj$parameters$variance$sigmasq),
ratio = mclust_obj$parameters$pro
)
renv::update()
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(log = TRUE)
# Build the models
friday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(log = TRUE)
# Build the models
saturday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(log = TRUE)
# Build the models
sunday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(log = TRUE)
sunday_energy_models$energy_models
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, file = "pr_data/pr_evmodel.RDS")
ev_config <- list()
# sessions_profiles %>%
#   filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
#   group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
#   summarise(n = n()) %>%
#   ggplot(aes(date, n, fill = time_cycle))+
#   geom_col()
ev_config[["ev_sessions"]] <- sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2021, month(ConnectionStartDateTime) > 8) %>%
group_by(time_cycle = Timecycle, date = date(ConnectionStartDateTime)) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
summarise(sessions_day = round(mean(n)))
ev_config[["ev_profiles"]] <- sessions_profiles %>%
group_by(time_cycle = Timecycle, profile = Profile) %>%
summarise(n = n()) %>%
group_by(time_cycle) %>%
mutate(ratio = round(n/sum(n)*100)) %>%
select(-n)
writexl::write_xlsx(ev_config, 'pr_data/ev_config.xlsx')
setwd('vignettes')
rmarkdown::render('pr.Rmd', output_file = 'pr.html')
bivarGMM_plots[[2]]
# setwd('vignettes') before running chunks
# To Knit run rmarkdown::render('pr.Rmd', output_file = 'pr.html')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
# load('pr_data/pr_sessions_divided.RData')
# load('pr_data/pr_sessions_clean.RData')
# load('pr_data/pr_sessions_clusters.RData')
load('pr_data/pr_sessions_profiles.RData')
load('pr_data/pr_sessions_models.RData')
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 4
)
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Commuters",
"Commuters"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection after work, with a variable duration",
"Connection during the afternoon, with a variable duration",
"Connection during the afternoon, leaving always next morning",
"Connection after work late in the afternoon, leaving always next morning",
"Connection after work early in the afternoon, leaving always next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Home",
"Home"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(
workday_city_GMM$sessions, workday_home_GMM$sessions, friday_city_GMM$sessions, friday_home_GMM$sessions,
saturday_city_GMM$sessions, saturday_home_GMM$sessions, sunday_city_GMM$sessions, sunday_home_GMM$sessions
),
clusters_definition = list(
workday_city_clusters_profiles, workday_home_clusters_profiles, friday_city_clusters_profiles, friday_home_clusters_profiles,
saturday_city_clusters_profiles, saturday_home_clusters_profiles, sunday_city_clusters_profiles, sunday_home_clusters_profiles
)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
setwd('vignettes/')
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(evprof)
library(dplyr)
library(dplyr)
library(lubridate)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
# source('pr_data/pr_sessions.R')
load('pr_data/connections.RData')
setwd('pr_data')
setwd('..')
setwd('amsterdam_data')
library(dplyr)
library(lubridate)
library(purrr)
library(tidyr)
library(readxl)
setwd('amsterdam_data')
# Read data ---------------------------------------------------------------
tzone <- 'Europe/Amsterdam'
amsterdam_data <- map_dfr(list.files('data'), ~ read_excel(paste0('data/', .x))) %>% distinct()
amsterdam_data <- read.csv('data/Amsterdam all 20200101-20211117.csv')
amsterdam_data
amsterdam_data <- read_csv('data/Amsterdam all 20200101-20211117.csv')
library(readr)
amsterdam_data <- read_csv('data/Amsterdam all 20200101-20211117.csv')
problems()
amsterdam_data
amsterdam_data %>%
filter(is.character(Street_number))
View(amsterdam_data)
amsterdam_data %>%
filter(!is.na(Street_number))
amsterdam_data %>%
filter(!is.na(Postal_code))
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_')
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
filter(stringr::str_detect(Charging_point, '_'))
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
filter(!stringr::str_detect(Charging_point, '_'))
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(ChargingPoint, Socket, Postal_code, Street_name, Street_number) %>%
distinct()
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(ChargingPoint, Socket, Postal_code, Street_name, Street_number) %>%
distinct() %>%
writexl::write_xlsx('data/metadata.xlsx')
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(ChargingPoint, Socket, Postal_code, Street_name, Street_number) %>%
distinct() %>%
filter(stringr::str_match(Postal_code, '1019'))
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(ChargingPoint, Socket, Postal_code, Street_name, Street_number) %>%
distinct() %>%
filter(stringr::str_detect(Postal_code, '1019'))
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(ChargingPoint, Socket, Postal_code, Street_name, Street_number) %>%
distinct() %>%
filter(stringr::str_detect(Postal_code, '1019')) %>%
writexl::write_xlsx('data/metadata_eastern_docklands.xlsx')
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 241)
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
# separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(Charging_station, Socket, Postal_code, Street_name, Street_number) %>%
distinct() %>%
filter(stringr::str_detect(Postal_code, '1019')) %>%
writexl::write_xlsx('data/metadata_eastern_docklands.xlsx')
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
# separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(Charging_station, Postal_code, Street_name, Street_number) %>%
distinct() %>%
filter(stringr::str_detect(Postal_code, '1019')) %>%
writexl::write_xlsx('data/metadata_eastern_docklands.xlsx')
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 241)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 202)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 160)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 1088)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 706)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 245)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 36)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 84)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 67)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 512)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 25)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 1005)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 347)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 6)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 462)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 255)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 21)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 169)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 361)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 72)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 89)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 131)
readxl::read_excel('data/metadata_eastern_docklands.xlsx') %>%
filter(Street_number == 271)
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
# separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(Charging_station, Postal_code, Street_name, Street_number) %>%
distinct() %>%
writexl::write_xlsx('data/metadata.xlsx')
amsterdam_data %>%
filter(!is.na(Postal_code)) %>%
# separate(Charging_point, c('ChargingPoint', 'Socket'), '_') %>%
select(Charging_station, Postal_code, Street_name, Street_number) %>%
distinct()
install.packages('roxygen2')
install.packages('testthat')
library(evprof)
load("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/R/sysdata.rda")
devtools::load_all(".")
sessions
sessions
load("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/R/sysdata.rda")
View(ev_model)
ev_model
library(evprof)
sessions
library(evprof)
sessions
evprof:::sessions
sessions <- readRDS("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evprof/data-raw/sessions.rds")
## code to prepare `sessions` dataset goes here
library(dplyr)
library(lubridate)
sessions <- readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9) %>%
arrange(StartTime) %>%
mutate(
Session = paste0('S', row_number())
) %>%
tidyr::separate(ChargingPoint, c("ToDelete", "ChargingPoint")) %>%
select(-ToDelete)
sessions
readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9) %>%
arrange(StartTime) %>%
mutate(
Session = paste0('S', row_number())
) %>%
tidyr::separate(ChargingPoint, c("ToDelete", "ChargingPoint"))
sessions <- readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9) %>%
arrange(StartTime) %>%
mutate(
Session = paste0('S', row_number())
) %>%
tidyr::separate(ChargingPoint, c("ToDelete", "ChargingPoint"), "NLALLEGO") %>%
select(-ToDelete)
sessions
ev_model <- readRDS('data-raw/evmodel.RDS')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
library(evprof)
sessions
sessions

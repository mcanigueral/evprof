)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
save(workday_clusters_profiles, weekend_clusters_profiles, sessions_profiles, file = 'california_data/california_sessions_profiles.RData')
# Build the models
workday_connection_models <- get_connection_models(list(workday_GMM), list(workday_clusters_profiles))
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(list(workday_GMM), list(workday_clusters_profiles), workday_connection_models[c("profile", "ratio")])
workday_connection_models_plot
# Build the models
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
workday_energy_models_plots <- plot_energy_models(workday_energy_models)
workday_energy_models_plots
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Build the models
weekend_connection_models <- get_connection_models(list(weekend_GMM), list(weekend_clusters_profiles))
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(list(weekend_GMM), list(weekend_clusters_profiles), weekend_connection_models[c("profile", "ratio")])
weekend_connection_models_plot
# Build the models
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Plot the univariate GMM
weekend_energy_models_plots <- plot_energy_models(weekend_energy_models)
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'california_data/california_evmodel', fileext = ".RDS")
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models, ev_model,
file = 'california_data/california_sessions_models.RData'
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
sessions_estimated <- simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
# Check that the charging rates distribution is correct with:
# sessions_estimated %>% get_charging_rates_distribution()
head(sessions_estimated)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
sessions_estimated
sessions_estimated$ConnectionEndDateTime[1]
ev_model$metadata
ev_model$metadata$tzone
knitr::opts_chunk$set(echo = TRUE)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
load('california_data/california_sessions_divided.RData')
load('california_data/california_sessions_clean.RData')
load('california_data/california_GMM.RData')
load('california_data/california_sessions_profiles.RData')
load('california_data/california_sessions_models.RData')
# load('california_data/california_comparison_demand.RData')
options(
evprof.tzone = "America/Los_Angeles",
evprof.start.hour = 3
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01092019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(30092019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
demand %>% dyplot(fillGraph = T)
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(20, 8))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
sessions_estimated <- simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'california_data/california_comparison_demand.RData')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
sessions_energy_models <- sessions_profiles %>%
filter(
lubridate::year(ConnectionStartDateTime) == 2020,
lubridate::month(ConnectionStartDateTime) < 3
)
# Build the models
workday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
log = TRUE,
by_power = FALSE
)
# Build the models
friday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Friday') %>%
get_energy_models(
log = TRUE,
by_power = F
)
# Build the models
saturday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Saturday') %>%
get_energy_models(
log = TRUE,
by_power = F
)
# Build the models
sunday_energy_models <- sessions_energy_models %>%
filter(Timecycle == 'Sunday') %>%
get_energy_models(
log = TRUE,
by_power = F
)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
demand
charging_rates <- get_charging_rates_distribution(sessions_demand) %>%
select(power, ratio)
print(charging_rates)
n_sessions <- sessions_demand %>%
group_by(Timecycle) %>%
summarise(n = n()) %>%
mutate(n_day = round(n/c(16, 4, 4, 4))) %>% # Divided by the monthly days of each time-cycle
select(time_cycle = Timecycle, n_sessions = n_day)
print(n_sessions)
profiles_ratios <- sessions_demand %>%
group_by(Timecycle, Profile) %>%
summarise(n = n()) %>%
mutate(ratio = n/sum(n)) %>%
select(time_cycle = Timecycle, profile = Profile, ratio)
head(profiles_ratios, 10)
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- dmy(01022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
end_date <- dmy(29022020) %>% as_datetime(tz = getOption('evprof.tzone')) %>% floor_date('day')
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
set.seed(1)
sessions_estimated <- evsim::simulate_sessions(
my_ev_model,
n_sessions,
charging_rates,
dates = unique(date(dttm_seq)),
interval_mins
)
# Check that the charging rates distribution is correct with:
# sessions_estimated %>% get_charging_rates_distribution()
head(sessions_estimated)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
comparison_demand <- tibble(
datetime = dttm_seq,
demand_real = rowSums(demand[-1]),
demand_estimated = rowSums(estimated_demand[-1])
)
comparison_demand %>%
dyplot(ylab = 'kW') %>%
dySeries('demand_real', 'Real demand', color = 'black', strokePattern = 'dashed', strokeWidth = 2) %>%
dySeries('demand_estimated', 'Estimated demand', color = 'navy', fillGraph = T)
save(ev_model, my_ev_model, sessions_demand, sessions_estimated, demand, estimated_demand, comparison_demand, file = 'arnhem_comparison_demand.RData')
save_ev_model(ev_model, file = "arnhem_data/evmodel_arnhem", fileext = ".RDS")
save(
workday_connection_models, workday_energy_models, friday_connection_models, friday_energy_models,
saturday_connection_models, saturday_energy_models, sunday_connection_models, sunday_energy_models,
file = 'arnhem_data/arnhem_sessions_models.RData'
)
# Save the result
ggsave(
filename = 'figures/MODELS/energy_workday_GMM.pdf',
plot = workday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
pkgdown::build_site()
demand %>% dyplot(fillGraph = T)
pkgdown::build_article("vignettes/california.Rmd")
pkgdown::build_article("california.Rmd")
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_article("evmodel")
pkgdown::build_article("outliers")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
save(sessions, sessions_divisions, sessions_divided, file = 'arnhem_sessions_divided.RData')
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
sessions_divisions <- sessions_divisions %>%
divide_by_timecycle(months_cycles = list(1:12), wdays_cycles = list(1:4, 5, 6, 7))
sessions_divided <- sessions_divisions %>%
filter(Disconnection %in% c("1", "2")) %>%
mutate(
Disconnection = plyr::mapvalues(Disconnection, c("1", "2"), c("City", "Home")),
Disconnection = factor(Disconnection, levels = c("City", "Home")),
Timecycle = plyr::mapvalues(Timecycle, c("1", "2", "3", "4"), c("Workday", "Friday", "Saturday", "Sunday")),
Timecycle = factor(Timecycle, levels = c("Workday", "Friday", "Saturday", "Sunday"))
)
head(sessions_divided)
save(sessions, sessions_divisions, sessions_divided, file = 'arnhem_sessions_divided.RData')
save(sessions, sessions_divisions, sessions_divided, file = 'arnhem_data/arnhem_sessions_divided.RData')
pkgdown::build_article("outliers")
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
load('arnhem_data/arnhem_sessions_divided.RData')
load('outliers.RData')
noisy_set <- sessions_divided %>%
filter(Disconnection == "Home", Timecycle == "Friday") # Friday Home
plot_points(noisy_set, size = 0.2, log = T)
noisy_set <- noisy_set %>%
cut_sessions(connection_hours_min = 1.5, connection_start_min = 2.5, log = T)
plot_points(noisy_set, size = 0.2, log = T)
library(evprof)
evprof::detect_outliers
?evprof::detect_outliers
.MinPts <- c(10, 50, 100, 200)
.noise_th <- c(1, 3, 5, 7)
dbscan_params <- tibble(
MinPts = rep(.MinPts, each = length(.noise_th)),
noise_th = rep(.noise_th, times = length(.MinPts))
)
plots_list <- pmap(
dbscan_params,
~ noisy_set %>%
detect_outliers(MinPts = ..1, noise_th = ..2, log = T) %>%
plot_outliers(log = T, size = 0.2) +
theme(legend.position = "none")
)
save(plots_list, file='outliers.RData')
ggsave(
filename = 'my_noise_detection.pdf',
plot = cowplot::plot_grid(
plotlist = plots_list, nrow = 4, ncol = 4, labels = as.list(rep(.MinPts, each = length(.noise_th)))
),
width = 500, height = 250, units = "mm"
)
plots_list[[15]]
pkgdown::build_site()
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
ev_model <- get_ev_model(
names = c('Workday', 'Friday', 'Saturday', 'Sunday'),
months_lst = list(1:12),
wdays_lst = list(1:4, 5, 6, 7),
connection_GMM = list(
workday_connection_models, friday_connection_models,
saturday_connection_models, sunday_connection_models
),
energy_GMM = list(
workday_energy_models, friday_energy_models,
saturday_energy_models, sunday_energy_models
),
connection_log = T,
energy_log = T
)
ev_model
save(
workday_connection_models, workday_energy_models, friday_connection_models, friday_energy_models,
saturday_connection_models, saturday_energy_models, sunday_connection_models, sunday_energy_models,
ev_model,
file = 'arnhem_data/arnhem_sessions_models.RData'
)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
my_ev_model <- ev_model %>%
update_profiles_ratios(
profiles_ratios # Update the distribution of user profiles
)
pkgdown::build_article("evprof")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_article("outliers")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_favicons()

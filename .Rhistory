cat('Object of class "evprof\n"')
cat('Object of class "evprof"\n')
cat('Creation date:', obj$metadata$creation, "\n")
library(lubridate)
cat('Creation date:', as_datetime(obj$metadata$creation), "\n")
obj$metadata$creation
cat('Creation date:', as.Date(obj$metadata$creation), "\n")
class(obj$metadata$creation)
cat('Creation date:', as.character(obj$metadata$creation), "\n")
if (obj$metadata$connection_log | obj$metadata$connection_log) {
log_c <- if (obj$metadata$connection_log) "Connection" else NULL
log_e <- if (obj$metadata$energy_log) "Energy" else NULL
log_and <- if (!is.null(log_c) & !is.null(log_e)) "and" else NULL
cat('Logarithmic transformation in', log_c, log_and, log_e, "models\n\n")
} else {
cat('No logarithmic transformation performed\n\n')
}
cat('EV Model composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
library(dplyr)
models <- transpose(obj$models)
library(purrr)
models <- transpose(obj$models)
length(models)
obj$models
jsonlite::toJSON(obj)
obj_json <- jsonlite::toJSON(obj)
obj2 <- jsonlite::fromJSON(obj_json)
onj2
obj2
library(jsonlite)
?fromJSON
save(obj_json, file = 'obj_json.JSON')
write(obj_json, "test.json")
obj2 <- jsonlite::fromJSON('test.json')
obj2
obj_json <- fromJSON('test.json')
obj$models
for (n in 1:length(models)) {
m <- models[n]
cat(
'\t', n, '. ', m[['timeframe']], ': ',
'months = ', m[['months']],
'\n', sep = ''
)
}
models
models[n]
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['timeframe']], ': ',
'months = ', m[['months']],
'\n', sep = ''
)
}
models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ': ',
'months = ', m[['months']],
'\n', sep = ''
)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ': ',
'months = ', m[['months']],
'\n', sep = ''
)
}
month.names
month.name
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t User profiles = ', paste0(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t\t Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t\t User profiles = ', paste0(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste0(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], sep = ", "),
'\n', sep = ''
)
}
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ","),
'\n', sep = ''
)
}
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
print.evprof <- function(obj) {
cat('Object of class "evprof"\n')
cat('Creation date:', as.character(obj$metadata$creation), "\n")
if (obj$metadata$connection_log | obj$metadata$connection_log) {
log_c <- if (obj$metadata$connection_log) "Connection" else NULL
log_e <- if (obj$metadata$energy_log) "Energy" else NULL
log_and <- if (!is.null(log_c) & !is.null(log_e)) "and" else NULL
cat('Logarithmic transformation in', log_c, log_and, log_e, "models\n\n")
} else {
cat('No logarithmic transformation performed\n\n')
}
cat('EV Model composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
class(obj) <- "evprof"
obj
print.evprof <- function(obj) {
cat('Object of class "evprof" created on', as.character(obj$metadata$creation))
if (obj$metadata$connection_log | obj$metadata$connection_log) {
log_c <- if (obj$metadata$connection_log) "Connection" else NULL
log_e <- if (obj$metadata$energy_log) "Energy" else NULL
log_and <- if (!is.null(log_c) & !is.null(log_e)) "and" else NULL
cat('Logarithmic transformation in', log_c, log_and, log_e, "models\n\n")
} else {
cat('No logarithmic transformation performed\n\n')
}
cat('EV Model composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('Object of class "evprof" created on', as.character(obj$metadata$creation), '\n')
if (obj$metadata$connection_log | obj$metadata$connection_log) {
log_c <- if (obj$metadata$connection_log) "Connection" else NULL
log_e <- if (obj$metadata$energy_log) "Energy" else NULL
log_and <- if (!is.null(log_c) & !is.null(log_e)) "and" else NULL
cat('Logarithmic transformation in', log_c, log_and, log_e, "models\n\n")
} else {
cat('No logarithmic transformation performed\n\n')
}
cat('EV Model composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('Object of class "evprof" created on', as.character(obj$metadata$creation), '\n')
if (obj$metadata$connection_log | obj$metadata$connection_log) {
log_c <- if (obj$metadata$connection_log) "Connection" else NULL
log_e <- if (obj$metadata$energy_log) "Energy" else NULL
log_and <- if (!is.null(log_c) & !is.null(log_e)) "and" else NULL
cat('Logarithmic transformation in', log_c, log_and, log_e, "Gaussian Mixture Models\n\n")
} else {
cat('No logarithmic transformation performed\n\n')
}
cat('EV Model composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('EV sessions model created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '.\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'\t', n, '. ', m[['model_name']], ':',
'\n\t   Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n\t   User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
models <- transpose(obj$models)
for (n in 1:length(models)) {
m <- models[n][[1]]
cat(
'  ', n, '. ', m[['model_name']], ':',
'\n     Months = ', if (length(m[['months']]) == 1) m[['months']][1] else
paste0(m[['months']][1], '-', m[['months']][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']]) == 1) m[['wdays']][1] else
paste0(m[['wdays']][1], '-', m[['wdays']][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
m <- obj$models
m[1, 'model_name']
m[['model_name']][1]
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(obj$models), 'time-cycle models:\n')
m <- obj$models
for (n in 1:length(models)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][n]) == 1) m[['months']][n][1] else
paste0(m[['months']][n][1], '-', m[['months']][n][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][n]) == 1) m[['wdays']][n][1] else
paste0(m[['wdays']][n][1], '-', m[['wdays']][n][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][n][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][n]) == 1) m[['months']][n][1] else
paste0(m[['months']][n][1], '-', m[['months']][n][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][n]) == 1) m[['wdays']][n][1] else
paste0(m[['wdays']][n][1], '-', m[['wdays']][n][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][n][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
obj
m <- obj$models
m[['months']]
n
m[['months']][n]
m[['months']][[n]]
#' `print` method for `evprof` object class
#'
#' @param obj  `evprof` object
#'
#' @export
#'
#' @importFrom purrr transpose
print.evprof <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
m[['months']][[n]]
obj
ev_model <- readRDS('data-raw/arnhem2_log_models.rds')
knitr::opts_chunk$set(echo = TRUE)
ev_model <- readRDS('data-raw/arnhem2_log_models.rds')
obj
class(ev_model) <- "evmodel"
saveRDS(ev_model, 'data-raw/ev_model.RDS')
ev_model <- readRDS('data-raw/ev_model.RDS')
ev_model
#' `print` method for `evmodel` object class
#'
#' @param obj  `evmodel` object
#' @export
#'
print.evmodel <- function(obj) {
m <- obj$models
cat('EV sessions model of class "evprof", created on', as.character(obj$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (obj$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (obj$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
ev_model
ev_model
ev_model$models
ev_model$models$models
usethis::use_pkgdown()
usethis::use_pkgdown()
pkgdown::build_site()
install.packages(c('plyr', 'cowplot', 'dbscan', 'mclust', 'mixtools', 'ecp'))
ev_model <- readRDS('data-raw/ev_model.RDS')
usethis::use_data(ev_model, internal = TRUE)
load('R/sysdata.rda')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
devtools::load_all()
ev_model
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?base::print
#' `print` method for `evmodel` object class
#'
#' @param x  `evmodel` object
#' @param ... further arguments passed to or from other methods.
#'
#' @export
#'
print.evmodel <- function(x, ...) {
m <- x$models
cat('EV sessions model of class "evprof", created on', as.character(x$metadata$creation), '\n')
cat('The Gaussian Mixture Models of EV user profiles are built in:\n')
cat('  - Connection Models:', if (x$metadata$connection_log) "logarithmic" else "natural", 'scale\n')
cat('  - Energy Models:', if (x$metadata$energy_log) "logarithmic" else "natural", 'scale\n')
cat('\nModel composed by', nrow(m), 'time-cycle models:\n')
for (n in 1:nrow(m)) {
cat(
'  ', n, '. ', m[['model_name']][n], ':',
'\n     Months = ', if (length(m[['months']][[n]]) == 1) m[['months']][[n]][1] else
paste0(m[['months']][[n]][1], '-', m[['months']][[n]][length(m[['months']])]),
', Week days = ', if (length(m[['wdays']][[n]]) == 1) m[['wdays']][[n]][1] else
paste0(m[['wdays']][[n]][1], '-', m[['wdays']][[n]][length(m[['wdays']])]),
'\n     User profiles = ', paste(m[['models']][[n]][['profile']], collapse = ", "),
'\n', sep = ''
)
}
}
ev_model
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
vignette('evmodel', package = 'evprof')
vignette('evmodel.R', package = 'evprof')
pkgdown::build_site()
library(dplyr)
t <- tibble(a=c(1, 2), b = c(2, 3), c = c(4, 5))
t
t[1, ]
t[1, ] %>% as_tibble()
t[1, ] %>% as.list()
l <- t[1, ] %>% as.list()
l$a
## code to prepare `sessions` dataset goes here
library(dplyr)
library(lubridate)
sessions <- readRDS("data-raw/sessions.rds") %>%
filter(year(StartTime) == 2019, month(StartTime) >= 9)
ev_model <- readRDS('data-raw/evmodel.RDS')
usethis::use_data(sessions, ev_model, overwrite = TRUE, internal = TRUE)
pkgdown::build_site()

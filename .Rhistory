# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection during the night, not necessarily leaving next morning",
"Connection during the night, leaving next morning",
"Connection during the afternoon, not necessarily leaving next morning",
"Connection after work, leaving next morning",
"Connection during the afternoon, leaving next morning",
"Connection after work, leaving next morning"
),
profile_names = c(
"Pillow",
"Pillow",
"Home",
"Commuters",
"Home",
"Commuters"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Define clusters
workday_home_clusters_profiles <- define_clusters(
models = workday_home_GMM$models,
interpretations = c(
"Connection during the night, not necessarily leaving next morning",
"Connection after work, leaving next morning",
"Connection after work, leaving next morning",
"Connection during the afternoon, not necessarily leaving next morning",
"Connection during the afternoon, leaving next morning",
"Connection during the night, leaving next morning"
),
profile_names = c(
"Pillow",
"Commuters",
"Commuters",
"Home",
"Home",
"Pillow"
),
log = T
)
workday_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
bivarGMM_plots[[3]]
# Define clusters
weekend_city_clusters_profiles <- define_clusters(
models = weekend_city_GMM$models,
interpretations = c(
"Dinner time",
"Visits during the afternoon",
"Short visits during the afternoon",
"Visits throughout the day"
),
profile_names = c(
"Dinner",
"Visit",
"Shortstay",
"Visit"
),
log = T
)
weekend_city_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
bivarGMM_plots[[4]]
# Define clusters
weekend_home_clusters_profiles <- define_clusters(
models = weekend_home_GMM$models,
interpretations = c(
"Connection during the afternoon, not necessarily leaving next morning",
"Connection during the early-afternoon, not necessarily leaving next morning",
"Connection during the afternoon, leaving next morning",
"Connection during the night, not necessarily leaving next morning"
),
profile_names = c(
"Home",
"Home",
"Home",
"Pillow"
),
log = T
)
weekend_home_clusters_profiles %>%
knitr::kable(digits = 2, col.names = c(
"Cluster", "Controid Start time", "Centroid Connection hours", "Interpretation", "Profile"
))
# Join the classification of each subset
sessions_profiles <- set_profiles(
sessions_clustered = list(workday_city_GMM$sessions, workday_home_GMM$sessions, weekend_city_GMM$sessions, weekend_home_GMM$sessions),
clusters_definition = list(workday_city_clusters_profiles, workday_home_clusters_profiles, weekend_city_clusters_profiles, weekend_home_clusters_profiles)
)
head(sessions_profiles)
classification_profiles_plot <- plot_points(sessions_profiles, start = 3, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
classification_profiles_plot <- plot_points(sessions_profiles, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot <- plot_points(sessions_profiles, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Profile), size = 0.3) +
facet_wrap(~ Timecycle)
classification_profiles_plot
ggsave(
filename = 'amsterdam_data/figures/CLUSTERS/classification_profiles.pdf', plot = classification_profiles_plot, paper="a4r", width = 40, height = 10
)
classification_clusters_plot <- plot_points(sessions_profiles, start = 6, log = FALSE, aes(color = Cluster), size = 0.3) +
facet_wrap(~ Timecycle)
ggsave(
filename = 'amsterdam_data/figures/CLUSTERS/classification_clusters.pdf', plot = classification_clusters_plot, paper="a4r", width = 40, height = 10
)
save(
workday_city_clusters_profiles, workday_home_clusters_profiles, weekend_city_clusters_profiles, weekend_home_clusters_profiles,
sessions_profiles, file = 'amsterdam_data/amsterdam_sessions_profiles.RData'
)
# Build the models
workday_connection_models <- get_connection_models(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles)
)
# Plot the bivariate GMM
workday_connection_models_plot <- plot_model_clusters(
list(workday_city_GMM, workday_home_GMM),
list(workday_city_clusters_profiles, workday_home_clusters_profiles),
workday_connection_models[c("profile", "ratio")]
)
workday_connection_models_plot
# Save the result
ggsave(
filename = 'amsterdam_data/figures/MODELS/connection_workday_GMM.pdf',
plot = workday_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Save the result
ggsave(
filename = 'amsterdam_data/figures/MODELS/connection_workday_GMM.pdf',
plot = workday_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Build the models
set.seed(1)
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
c("Visit"=8, "Worktime"=6, "Shortstay"=6),
maxit = 10000,
log = TRUE
)
# Build the models
set.seed(1)
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
c("Visit"=6, "Worktime"=6, "Shortstay"=6, "Dinner"=6),
maxit = 10000,
log = TRUE
)
sessions_profiles %>%
filter(Timecycle == 'Workday')
sessions_profiles %>%
filter(Timecycle == 'Workday') %>% pull(Profile) %>% unique
# Build the models
set.seed(1)
workday_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
get_energy_models(
c("Visit"=6, "Worktime"=6, "Shortstay"=6, "Dinner"=6, "Home"=6, "Pillow"=6, "Commuters"=6),
maxit = 10000,
log = TRUE
)
# Plot the univariate GMM
workday_energy_models_plots <- sessions_profiles %>%
filter(Timecycle == 'Workday') %>%
plot_energy_models_density(workday_energy_models, log = T)
workday_energy_models_plots
# Save the result
ggsave(
filename = 'amsterdam_data/figures/MODELS/energy_workday_GMM.pdf',
plot = workday_energy_models_plots,
paper="a4r", width = 40, height = 20
)
# Build the models
weekend_connection_models <- get_connection_models(
list(weekend_city_GMM, weekend_home_GMM),
list(weekend_city_clusters_profiles, weekend_home_clusters_profiles)
)
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(
list(weekend_city_GMM, weekend_home_GMM),
list(weekend_city_clusters_profiles, weekend_home_clusters_profiles)
weekend_connection_models[c("profile", "ratio")]
# Plot the bivariate GMM
weekend_connection_models_plot <- plot_model_clusters(
list(weekend_city_GMM, weekend_home_GMM),
list(weekend_city_clusters_profiles, weekend_home_clusters_profiles),
weekend_connection_models[c("profile", "ratio")]
)
weekend_connection_models_plot
# Save the result
ggsave(
filename = 'amsterdam_data/figures/MODELS/connection_weekend_GMM.pdf',
plot = weekend_connection_models_plot,
paper="a4r", width = 40, height = 20
)
# Build the models
set.seed(1)
weekend_energy_models <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
get_energy_models(
c("Visit"=6, "Shortstay"=6, "Dinner"=6, "Home"=6, "Pillow"=6),
log = TRUE
)
# Plot the univariate GMM
weekend_energy_models_plots <- sessions_profiles %>%
filter(Timecycle == 'Weekend') %>%
plot_energy_models_density(weekend_energy_models, log = T)
weekend_energy_models_plots
# Save the result
ggsave(
filename = 'amsterdam_data/figures/MODELS/energy_weekend_GMM.pdf',
plot = weekend_energy_models_plots,
paper="a4r", width = 40, height = 20
)
save(
workday_city_connection_models, workday_home_connection_models, workday_city_energy_models, workday_home_energy_models,
weekend_city_connection_models, weekend_home_connection_models, weekend_city_energy_models, weekend_home_energy_models,
file = 'amsterdam_data/amsterdam_sessions_models.RData'
)
save(
workday_connection_models, workday_energy_models, weekend_connection_models, weekend_energy_models,
file = 'amsterdam_data/amsterdam_sessions_models.RData'
)
ev_model <- get_ev_model(
names = c('Workday', 'Weekend'),
months_lst = list(1:12),
wdays_lst = list(1:5, 6:7),
connection_GMM = list(workday_connection_models, weekend_connection_models),
energy_GMM = list(workday_energy_models, weekend_energy_models),
connection_log = T,
energy_log = T
)
ev_model
save_ev_model(ev_model, 'amsterdam_data/amsterdam_evmodel')
sessions
sessions_profiles
sessions_profiles %>% arrange(ConnectionStartDateTime)
View(sessions_profiles)
library(dygraphs)
library(lubridate)
library(evsim)
library(dutils)
interval_mins <- 15
start_date <- date_to_datetime_with_tz(dmy(01012019), getOption('evprof.tzone')) + days(1)
end_date <-  date_to_datetime_with_tz(dmy(31012019), getOption('evprof.tzone')) + days(1)
dttm_seq <- seq.POSIXt(from = start_date, to = end_date, by = paste(interval_mins, 'min'))
sessions_demand <- sessions_profiles %>%
filter(between(ConnectionStartDateTime, start_date, end_date))
demand <- sessions_demand %>%
get_demand(dttm_seq)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_divided.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
sessions_divisions <- sessions %>%
divide_by_disconnection(days = 1:5, division_hour = 3)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_divided.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
# plot_density_2D(sessions_divisions, by = 'wday') + facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divisions
sessions_divided
plot_density_2D
sessions_divided %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = bins) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
xlab('\nSession start time') + ylab('Number of connection hours\n') +
theme_light() +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 15) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
xlab('\nSession start time') + ylab('Number of connection hours\n') +
theme_light() +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 15) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
labs(x = '\nSession start time', y='Number of connection hours\n', fill = 'Density of \nsessions\n') +
theme_light() +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
evprof:::mutate_to_log() %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 15) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
labs(x = '\nSession start time', y='Number of connection hours\n', fill = 'Density of \nsessions\n') +
theme_light() +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
evprof:::mutate_to_log()
sessions_divided %>%
evprof:::mutate_to_log() %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 15) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
labs(x = '\nSession start time', y='Number of connection hours\n', fill = 'Density of \nsessions\n') +
theme_light() +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
evprof:::mutate_to_log() %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 15) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
labs(x = '\nSession start time', y='Number of connection hours\n', fill = 'Density of \nsessions\n') +
theme_light()
# facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
sessions_divided %>%
evprof:::mutate_to_log() %>%
ggplot(aes_string(x="ConnectionStartDateTime", y="ConnectionHours")) +
stat_density2d(geom = "polygon", aes(fill = stat(.data$nlevel)), bins = 30) +
# scale_fill_viridis_c(name = 'Density of \nsessions\n') +
# scale_x_datetime(date_labels = '%H:%M', date_breaks = '4 hour') +
labs(x = '\nSession start time', y='Number of connection hours\n', fill = 'Density of \nsessions\n') +
theme_light()
# facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
plot_density_2D(sessions_divided, by = 'wday', log = T) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 50) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 100) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 500) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 200) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 50) + facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 50) + facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 200) +
# facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 200) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4)
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 200) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4, scales = 'free')
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 100) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4, scales = 'free')
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 300) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 4, scales = 'free')
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 300) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 8, scales = 'free')
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 300) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 8, scales = 'free') +
theme(legend.position = 'bottom')
# facet_wrap(vars(wday), ncol = 7)
plot_density_2D(sessions_divided, by = 'wday', log = T, bins = 300) +
facet_wrap(vars(Timecycle, Disconnection), ncol = 8, scales = 'free') +
theme(legend.position = 'top')
# facet_wrap(vars(wday), ncol = 7)
# facet_wrap(vars(wday), ncol = 7)
ggsave('density2d.pdf', width = 350, height = 75, units = 'mm')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F, fig.width = 10)
library(evprof)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dygraphs)
library(purrr)
library(tidyr)
library(dutils)
options(
evprof.tzone = "Europe/Amsterdam",
evprof.start.hour = 6
)
# Data
load('arnhem_data/arnhem_sessions_profiles.RData')
load('arnhem_data/arnhem_sessions_divided.RData')
load('arnhem_data/arnhem_sessions_models.RData')
load('arnhem_data/arnhem_comparison_demand.RData')
evmodel <- readRDS('arnhem_data/evmodel_arnhem.RDS')
evmodel$models
evmodel$models$user_profiles
up <- evmodel$models$user_profiles[[1]]
up
pmap_dfr(up, ~ ..3)
pmap_dfr(up, ~ ..3, .id = 'profile')
pmap_dfr(set_names(up$connection_models, up$profile), ~ .x, .id = 'profile')
set_names(up$connection_models, up$profile)
pmap_dfr(set_names(up$connection_models, up$profile), ~ as_tibble(.x$mu), .id = 'profile')
as_tibble(up$connection_models[[1]]$mu)
up$connection_models[[1]]
up$connection_models[[1]]$mu
up$connection_models[[1]]$mu[[1]]
set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration'))
as_tibble(set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration')))
bind_cols(set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration')))
set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration'))
as_list(set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration'))
)
as.list(set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration')))
as_tibble(as.list(set_names(up$connection_models[[1]]$mu[[1]], c('start', 'duration'))))
pmap_dfr(set_names(up$connection_models, up$profile), ~ as_tibble(as.list(set_names(.x$mu[[1]], c('start', 'duration')))), .id = 'profile')
set_names(up$connection_models, up$profile)
up
up$connection_models[[1]]$mu
up$connection_models[[2]]$mu
bind_rows(up$connection_models[[2]]$mu)
map_dfr(up$connection_models[[2]]$mu, ~ as_tibble(as.list(set_names(.x, c('start', 'duration')))))
up
evmodel$models$user_profiles
get_centroids_means <- function(mu_list) {
map_dfr(mu_list, ~ as_tibble(as.list(set_names(.x, c('start', 'duration')))))
}
get_porfiles_centroids_means <- function(user_profiles_df) {
pmap_dfr(
set_names(user_profiles_df[['connection_models']], user_profiles_df[['profile']]),
~ get_centroids_means(.x[['mu']]),
.id = 'profile'
)
}
centroids <- map_dfr(
evmodel$models$user_profiles,
get_porfiles_centroids_means(.x)
)
get_porfiles_centroids_means <- function(user_profiles_df) {
map_dfr(
set_names(user_profiles_df[['connection_models']], user_profiles_df[['profile']]),
~ get_centroids_means(.x[['mu']]),
.id = 'profile'
)
}
centroids <- map_dfr(
evmodel$models$user_profiles,
get_porfiles_centroids_means(.x)
)
centroids <- map_dfr(
evmodel$models$user_profiles,
~ get_porfiles_centroids_means(.x)
)
centroids
centroids %>%
mutate(start = exp(start), duration = exp(duration)) %>%
ggplot(aes(start, duration, color = profile)) +
geom_point()
centroids %>%
mutate(start = exp(start), duration = exp(duration)) %>%
ggplot(aes(start, duration, color = profile)) +
geom_point() +
theme_light()
centroids %>%
mutate(start = exp(start), duration = exp(duration)) %>%
ggplot(aes(start, duration, color = profile)) +
geom_point() +
theme_light() +
labs(x = 'Connection start hour', y = 'Number of connection hours', color = 'Profile')
centroids %>%
# mutate(start = exp(start), duration = exp(duration)) %>%
ggplot(aes(start, duration, color = profile)) +
geom_point() +
theme_light() +
labs(x = 'Connection start hour', y = 'Number of connection hours', color = 'Profile')
centroids %>%
mutate(start = exp(start), duration = exp(duration)) %>%
ggplot(aes(start, duration, color = profile)) +
geom_point() +
theme_light() +
labs(x = 'Connection start hour', y = 'Number of connection hours', color = 'Profile')
ggsave('profiling.pdf', width = 150, height = 100, units = 'mm')
